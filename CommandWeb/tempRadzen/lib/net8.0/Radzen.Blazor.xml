<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Radzen.Blazor</name>
    </assembly>
    <members>
        <member name="T:Radzen.Blazor.AppointmentData">
            <summary>
            Represents an appointment in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
        </member>
        <member name="P:Radzen.Blazor.AppointmentData.Start">
            <summary>
            Gets or sets the start of the appointment.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Radzen.Blazor.AppointmentData.End">
            <summary>
            Gets or sets the end of the appointment.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Radzen.Blazor.AppointmentData.Text">
            <summary>
            Gets or sets the text of the appointment.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.AppointmentData.Data">
            <summary>
            Gets or sets the data associated with the appointment
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Radzen.Blazor.AppointmentData.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance. Used to check if two appointments are equal.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.AppointmentData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Radzen.Blazor.AutoCompleteType">
            <summary>
            The <c>AutomCompleteType</c> is a string-associated enum of
            browser-supported autocomplete attribute values.
            </summary>
            <remarks>
            This class lists the autocomplete attirbute options allowing
            developers to provide the browser with guidance on how to pre-populate
            the form fields. It is a class rather than a simpler enum to associate
            each option with the string the browser expects. For more information
            please review the list of options (https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
            and the spec (https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
            </remarks>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Off">
            <summary>Autocomplete is disabled. </summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.On">
            <summary>Autocomplete is enabled. The browser chooses what values to suggest. </summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Name">
            <summary>The field expects the value to be a person's full name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.HonorificPrefix">
            <summary>The prefix or title, such as "Mrs.", "Mr.", "Miss", "Ms.", "Dr." etc.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.GivenName">
            <summary>The given (or "first") name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AdditionalName">
            <summary>The middle name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.FamilyName">
            <summary>The family (or "last") name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.HonorificSuffix">
            <summary>The suffix, such as "Jr.", "B.Sc.", "PhD.", "MBASW", etc.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Nickname">
            <summary>The nickname or handle.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Email">
            <summary>The email address.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Username">
            <summary>The username or account name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.NewPassword">
            <summary>A new password. When creating a new account or changing passwords.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CurrentPassword">
            <summary>A current password. When filling in an existing password.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.OneTimeCode">
            <summary>A one-time code used for verifying user identity.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.OrganizationTitle">
            <summary>A job title, or the title a person has within an organization, such as "Senior Technical Writer", "President", or "Assistant Troop Leader".</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Organization">
            <summary>A company, business, or organization name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.StreetAddress">
            <summary>A street address. Use multiple address lines when more space is needed.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AddressLine1">
            <summary>The line 1 of a street address. For example, "1234 Main Street".</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AddressLine2">
            <summary>The line 2 of a street address. For example, "Apartment 123".</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AddressLine3">
            <summary>The line 3 of a street address. For example, "c/o Jane Doe".</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AddressLevel1">
            <summary>The city or locality.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AddressLevel2">
            <summary>The state, province, prefecture, or region.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AddressLevel3">
            <summary>The zip code or postal code.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.AddressLevel4">
            <summary>The country name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Country">
            <summary>The country code.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CountryName">
            <summary>The country name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.PostalCode">
            <summary>The postal code.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcName">
            <summary>The full name as printed on or associated with a payment instrument such as a credit card.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcGivenName">
            <summary>The given (or "first") name as printed on or associated with a payment instrument such as a credit card.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcAdditionalName">
            <summary>The middle name as printed on or associated with a payment instrument such as a credit card.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcFamilyName">
            <summary>The family (or "last") name as printed on or associated with a payment instrument such as a credit card.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcNumber">
            <summary>A credit card number or other number identifying a payment method, such as an account number.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcExp">
            <summary>A payment method expiration date, typically in the form "MM/YY" or "MM/YYYY".</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcExpMonth">
            <summary>A payment method expiration month, typically in numeric form (MM).</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcExpYear">
            <summary>A payment method expiration year, typically in numeric form (YYYY).</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcCsc">
            <summary>The security code for your payment method, such as the CVV code.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.CcType">
            <summary>The type of payment instrument, such as "Visa", "Master Card", "Checking", or "Savings".</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.TransactionCurrency">
            <summary>The currency in which the transaction was completed. Use the ISO 4217 currency codes, such as "USD" for the US dollar.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.TransactionAmount">
            <summary>The amount, in the currency specified by the transaction currency attribute, of the transaction completed.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Language">
            <summary>The language in which the transaction was completed. Use the relevant BCP 47 language tag.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Bday">
            <summary>A birth date, as a full date.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.BdayDay">
            <summary>The day of the month of a birth date.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.BdayMonth">
            <summary>The month of the year of a birth date.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.BdayYear">
            <summary>The year of a birth date.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Sex">
            <summary>A gender identity (such as "Female", "Fa'afafine", "Hijra", "Male", "Nonbinary"), as freeform text without newlines.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Tel">
            <summary>A full telephone number, including the country code. </summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.TelCountryCode">
            <summary>A country code, such as "1" for the United States, Canada, and other areas in North America and parts of the Caribbean.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.TelNational">
            <summary>The entire phone number without the country code component, including a country-internal prefix.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.TelAreaCode">
            <summary>The area code, with any country-internal prefix applied if appropriate.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.TelLocal">
            <summary>The phone number without the country or area code.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.TelExtension">
            <summary>The extension number, if applicable.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Impp">
            <summary>A URL for an instant messaging protocol endpoint, such as "xmpp:username@example.net".</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Url">
            <summary>A URL, such as a home page or company website address as appropriate given the context of the other fields in the form.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Photo">
            <summary>The URL of an image representing the person, company, or contact information given in the other fields in the form.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.State">
            <summary>State.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.Province">
            <summary>Province.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.ZipCode">
            <summary>Zip code.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.FirstName">
            <summary>Firs name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.MiddleName">
            <summary>Middle name.</summary>
        </member>
        <member name="F:Radzen.Blazor.AutoCompleteType.LastName">
            <summary>Last name.</summary>
        </member>
        <member name="T:Radzen.Blazor.AxisBase">
            <summary>
            Base class for an axis in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Stroke">
            <summary>
            Gets or sets the stroke (line color) of the axis.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.StrokeWidth">
            <summary>
            Gets or sets the pixel width of axis.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.FormatString">
            <summary>
            Gets or sets the format string used to display the axis values.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Formatter">
            <summary>
            Gets or sets a formatter function that formats the axis values.
            </summary>
            <value>The formatter.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.LineType">
            <summary>
            Gets or sets the type of the line used to display the axis.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.GridLines">
            <summary>
            Gets or sets the grid lines configuration of the current axis.
            </summary>
            <value>The grid lines.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Title">
            <summary>
            Gets or sets the title configuration.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Ticks">
            <summary>
            Gets or sets the ticks configuration.
            </summary>
            <value>The ticks.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.TickDistance">
            <summary>
            Gets or sets the pixel distance between axis ticks. It is used to calculate the number of visible ticks depending on the available space. Set to 100 by default;
            Setting <see cref="P:Radzen.Blazor.AxisBase.Step" /> will override this value.
            </summary>
            <value>The desired pixel distance between ticks.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Min">
            <summary>
            Specifies the minimum value of the axis.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Max">
            <summary>
            Specifies the maximum value of the axis.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Step">
            <summary>
            Specifies the step of the axis.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.AxisBase"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.LabelRotation">
            <summary>
            Specifies the label rotation angle in degrees. Set to <c>null</c> by default which means no rotation is applied. Has higher precedence than <see cref="P:Radzen.Blazor.AxisBase.LabelAutoRotation"/>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.AxisBase.LabelAutoRotation">
            <summary>
            Specifies the automatic label rotation angle in degrees. If set RadzenChart will automatically rotate the labels to fit the available space by the specified value. Has lower precedence than <see cref="P:Radzen.Blazor.AxisBase.LabelRotation"/>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.AxisBase.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.CartesianSeries`1">
            <summary>
            Base class of <see cref="T:Radzen.Blazor.RadzenChart" /> series.
            </summary>
            <typeparam name="TItem">The type of the series data.</typeparam>
        </member>
        <member name="F:Radzen.Blazor.CartesianSeries`1.categoryPropertyCache">
            <summary>
            Cache for the value returned by <see cref="M:Radzen.Blazor.CartesianSeries`1.Category(Radzen.Blazor.ScaleBase)"/> when that value is only dependent on
            <see cref="P:Radzen.Blazor.CartesianSeries`1.CategoryProperty"/>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.Category(Radzen.Blazor.ScaleBase)">
            <summary>
            Creates a getter function that returns a value from the specified category scale for the specified data item.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.ComposeCategory(Radzen.Blazor.ScaleBase)">
            <summary>
            Helper function. Used internally.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.ComposeValue(Radzen.Blazor.ScaleBase)">
            <summary>
            Helper function. Used internally.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.IsDate(System.String)">
            <summary>
            Determines whether the property with the specified name is <see cref="T:System.DateTime" />
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the specified property name is date; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">Property {propertyName} does not exist</exception>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.IsNumeric(System.String)">
            <summary>
            Determines whether the property with the specified name is numeric.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the specified property name is numeric; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">Property {propertyName} does not exist</exception>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Title">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.TooltipTemplate">
            <summary>
            Gets or sets the tooltip template.
            </summary>
            <value>The tooltip template.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Overlays">
            <summary>
            Gets the list of overlays.
            </summary>
            <value>The Overlays list.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.CoordinateSystem">
            <summary>
            Gets the coordinate system of the series.
            </summary>
            <value>Coordinate system enum value.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.CategoryProperty">
            <summary>
            The name of the property of <typeparamref name="TItem" /> that provides the X axis (a.k.a. category axis) values.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.CartesianSeries`1"/> is visible.
            Invisible series do not appear in the legend and cannot be shown by the user.
            Use the <c>Visible</c> property to programatically show or hide a series.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Hidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.CartesianSeries`1"/> is hidden.
            Hidden series are initially invisible and the user can show them by clicking on their label in the legend.
            Use the <c>Hidden</c> property to hide certain series from your users but still allow them to see them.
            </summary>
            <value><c>true</c> if hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.ShowInLegend">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.ValueProperty">
            <summary>
            The name of the property of <typeparamref name="TItem" /> that provides the Y axis (a.k.a. value axis) values.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.RenderingOrder">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Value">
            <summary>
            Creates a getter function that returns a value from the specified data item. Uses <see cref="P:Radzen.Blazor.CartesianSeries`1.ValueProperty" />.
            </summary>
            <value>The value.</value>
            <exception cref="T:System.ArgumentException">ValueProperty should not be empty</exception>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Data">
            <summary>
            Gets or sets the data of the series. The data is enumerated and its items are displayed by the series.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Items">
            <summary>
            Stores <see cref="P:Radzen.Blazor.CartesianSeries`1.Data" /> as an IList of <typeparamref name="TItem"/>.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Markers">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.MarkerType">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetCategories">
            <summary>
            Returns the category values
            </summary>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TransformCategoryScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TransformValueScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.Render(Radzen.Blazor.ScaleBase,Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.RenderOverlays(Radzen.Blazor.ScaleBase,Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.MeasureLegend">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.InsidePolygon(Radzen.Blazor.Point,Radzen.Blazor.Point[])">
            <summary>
            Determines if the provided point is inside the provided polygon.
            </summary>
            <param name="point">The point.</param>
            <param name="polygon">The polygon.</param>
            <returns><c>true</c> if the polygon contains the point, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.RenderTooltip(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.RenderSharedTooltipItem(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetTooltipPosition(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TooltipStyle(`0)">
            <summary>
            Gets the tooltip inline style.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TooltipClass(`0)">
            <summary>
            Gets the tooltip CSS class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.RenderLegendItem">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.RenderLegendItem(System.Boolean)">
            <summary>
            Renders the legend item for this series.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.CartesianSeries`1.MarkerSize">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetMedian">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetMean">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetMode">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetTrend">
            <summary>
            https://en.wikipedia.org/wiki/Simple_linear_regression#Fitting_the_regression_line
            </summary>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetTitle">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TooltipLabel(`0)">
            <summary>
            Gets the label of the tooltip displayed for this item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TooltipTitle(`0)">
            <summary>
            Gets the title of the tooltip displayed for this item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TooltipValue(`0)">
            <summary>
            Gets the value of the tooltip displayed for this item.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TooltipX(`0)">
            <summary>
            Gets the X coordinate of the tooltip of the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.TooltipY(`0)">
            <summary>
            Gets the Y coordinate of the tooltip of the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.DataAt(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.PickColor(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IList{Radzen.Blazor.SeriesColorRange},System.Double)">
            <summary>
            Returns a color from the specified list of colors. Rotates colors.
            </summary>
            <param name="index">The index.</param>
            <param name="colors">The colors.</param>
            <param name="defaultValue">The default value.</param>
            <param name="colorRange">The color range value.</param>
            <param name="value">The value of the item.</param>
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.CartesianSeries`1.InvokeClick(Microsoft.AspNetCore.Components.EventCallback{Radzen.SeriesClickEventArgs},System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.ColorScheme">
            <summary>
            Specifies the <see cref="T:Radzen.Blazor.RadzenChart" /> color schemes used when rendering the series.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.ColorScheme.Pastel">
            <summary>
            Pastel color scheme.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.ColorScheme.Palette">
            <summary>
            Palette color scheme.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.ColorScheme.Divergent">
            <summary>
            Divergent color scheme.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.ColorScheme.Monochrome">
            <summary>
            Monochrome color scheme
            </summary>
        </member>
        <member name="T:Radzen.Blazor.EnumExtensions">
            <summary>
            Class EnumExtensions.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.EnumExtensions.GetDisplayDescription(System.Enum,System.Func{System.String,System.String})">
            <summary>
            Gets enum description.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.EnumExtensions.EnumAsKeyValuePair(System.Type,System.Func{System.String,System.String})">
            <summary>
            Converts Enum to IEnumerable of Value/Text.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.EnumExtensions.GetAutoCompleteValue(Radzen.Blazor.AutoCompleteType)">
            <summary>
            Converts the autocomplete type enum value to the expected
            autocomplete attribute value.
            </summary>
            <returns>The autocomplete attribute string value.</returns>
        </member>
        <member name="T:Radzen.Blazor.GaugeBase">
            <summary>
            Class GaugeBase.
            Implements the <see cref="T:Radzen.RadzenComponent" />
            </summary>
            <seealso cref="T:Radzen.RadzenComponent" />
        </member>
        <member name="P:Radzen.Blazor.GaugeBase.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.GaugeBase.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Radzen.Blazor.GaugeBase.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="F:Radzen.Blazor.GaugeBase.widthAndHeightAreSet">
            <summary>
            The width and height are set
            </summary>
        </member>
        <member name="F:Radzen.Blazor.GaugeBase.firstRender">
            <summary>
            The first render
            </summary>
        </member>
        <member name="M:Radzen.Blazor.GaugeBase.OnAfterRenderAsync(System.Boolean)">
            <summary>
            On after render as an asynchronous operation.
            </summary>
            <param name="firstRender">if set to <c>true</c> [first render].</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.GaugeBase.OnInitialized">
            <summary>
            Called when [initialized].
            </summary>
        </member>
        <member name="M:Radzen.Blazor.GaugeBase.Resize(System.Double,System.Double)">
            <summary>
            Resizes the specified width.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Radzen.Blazor.GaugeBase.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.GaugeBase.visibleChanged">
            <summary>
            The visible changed
            </summary>
        </member>
        <member name="M:Radzen.Blazor.GaugeBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.GaugeBase.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.GaugeBase.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.GaugeTickPosition">
            <summary>
            Enum GaugeTickPosition
            </summary>
        </member>
        <member name="F:Radzen.Blazor.GaugeTickPosition.Inside">
            <summary>
            The inside
            </summary>
        </member>
        <member name="F:Radzen.Blazor.GaugeTickPosition.Outside">
            <summary>
            The outside
            </summary>
        </member>
        <member name="F:Radzen.Blazor.GaugeTickPosition.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="T:Radzen.Blazor.IChartAxis">
            <summary>
            Common axis API of <see cref="T:Radzen.Blazor.RadzenChart" />
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartAxis.GridLines">
            <summary>
            Gets or sets the grid lines configuration of this axis.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.IChartBarSeries">
            <summary>
            Marker interface for <see cref="T:Radzen.Blazor.RadzenBarSeries`1" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartBarSeries.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Radzen.Blazor.IChartColumnSeries">
            <summary>
            Marker interface for <see cref="T:Radzen.Blazor.RadzenColumnSeries`1" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartColumnSeries.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Radzen.Blazor.IChartDonutSeries">
            <summary>
            Marker interface for <see cref="T:Radzen.Blazor.RadzenColumnSeries`1" />.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartDonutSeries.RenderTitle(System.Double,System.Double)">
            <summary>
            Renders the title.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>RenderFragment.</returns>
        </member>
        <member name="T:Radzen.Blazor.IChartSeries">
            <summary>
            Specifies the common API that <see cref="T:Radzen.Blazor.RadzenChart" /> series must implement.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.TransformCategoryScale(Radzen.Blazor.ScaleBase)">
            <summary>
            Transforms a category scale to new one.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.TransformValueScale(Radzen.Blazor.ScaleBase)">
            <summary>
            Transforms a category scale to new one.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.Markers">
            <summary>
            Gets or sets the series marker configuration.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.MarkerType">
            <summary>
            Gets the series marker type.
            </summary>
            <value>The type of the marker.</value>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.MarkerSize">
            <summary>
            Gets the size of the marker.
            </summary>
            <value>The size of the marker.</value>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.Render(Radzen.Blazor.ScaleBase,Radzen.Blazor.ScaleBase)">
            <summary>
            Renders the series with the specified category and value scales.
            </summary>
            <param name="categoryScale">The category scale.</param>
            <param name="valueScale">The value scale.</param>
            <returns>RenderFragment.</returns>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.RenderOverlays(Radzen.Blazor.ScaleBase,Radzen.Blazor.ScaleBase)">
            <summary>
            Renders the series overlays with the specified category and value scales.
            </summary>
            <param name="categoryScale">The category scale.</param>
            <param name="valueScale">The value scale.</param>
            <returns>RenderFragment.</returns>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.RenderTooltip(System.Object)">
            <summary>
            Renders the series tooltip.
            </summary>
            <param name="data">The data.</param>
            <returns>RenderFragment.</returns>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.RenderSharedTooltipItem(System.Object)">
            <summary>
            Renders a tooltip item with the specified data to be displayed in a shared tooltip
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.GetTooltipPosition(System.Object)">
            <summary>
            Get position of the series tooltip.
            </summary>
            <param name="data">The data.</param>
            <returns>Position.</returns>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.RenderLegendItem">
            <summary>
            Renders the legend item.
            </summary>
            <returns>RenderFragment.</returns>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.Color">
            <summary>
            Gets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:Radzen.Blazor.IChartSeries"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.ShowInLegend">
            <summary>
            Gets a value indicating whether this series should appear in the legend.
            </summary>
            <value><c>true</c> if the series appears in the legend; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.RenderingOrder">
            <summary>
            Gets or sets the rendering order.
            </summary>
            <value>The rendering order.</value>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.Contains(System.Double,System.Double,System.Double)">
            <summary>
            Determines if the series contains the specified coordinates with a given tolerance.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if the series contains the coordinates; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.DataAt(System.Double,System.Double)">
            <summary>
            Returns the data at the specified coordinates;
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.GetDataLabels(System.Double,System.Double)">
            <summary>
            Returns data chart position
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.GetMedian">
            <summary>
            Returns series median
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.GetMean">
            <summary>
            Returns series mean
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.GetMode">
            <summary>
            Returns series mode
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.GetTrend">
            <summary>
            Returns series trend
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.CoordinateSystem">
            <summary>
            Series coordinate system
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.Overlays">
            <summary>
            Series overlays
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartSeries.Title">
            <summary>
            Gets or sets the title of the series. The title is displayed in tooltips and the legend.
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.GetTitle">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.MeasureLegend">
            <summary>
            Measures the legend.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Radzen.Blazor.IChartSeries.InvokeClick(Microsoft.AspNetCore.Components.EventCallback{Radzen.SeriesClickEventArgs},System.Object)">
            <summary>
            Invokes the click handler with the provided data item.
            </summary>
            <param name="handler">The handler.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:Radzen.Blazor.IChartSeriesOverlay">
            <summary>
            Interface for chart overlays
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeriesOverlay.Render(Radzen.Blazor.ScaleBase,Radzen.Blazor.ScaleBase)">
            <summary>
            Render overlay
            </summary>
            <param name="categoryScale"></param>
            <param name="valueScale"></param>
            <returns>RenderFragment</returns>
        </member>
        <member name="P:Radzen.Blazor.IChartSeriesOverlay.Visible">
            <summary>
            Gets overlay visibility state
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeriesOverlay.Contains(System.Double,System.Double,System.Int32)">
            <summary>
            Hit test
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeriesOverlay.RenderTooltip(System.Double,System.Double)">
            <summary>
            Renders tooltip
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartSeriesOverlay.GetTooltipPosition(System.Double,System.Double)">
            <summary>
            Get position of the overlay tooltip.
            </summary>
            <returns>Position.</returns>
        </member>
        <member name="T:Radzen.Blazor.IChartStackedAreaSeries">
            <summary>
            Marker interface for <see cref="T:Radzen.Blazor.RadzenStackedAreaSeries`1" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartStackedAreaSeries.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedAreaSeries.ValuesForCategory(System.Double)">
            <summary>
            Gets the values for category.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedAreaSeries.ValueAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.IChartStackedBarSeries">
            <summary>
            Marker interface for <see cref="T:Radzen.Blazor.RadzenStackedBarSeries`1" />.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedBarSeries.ValueAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedBarSeries.ValuesForCategory(System.Double)">
            <summary>
            Gets the values for category.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedBarSeries.ItemsForCategory(System.Double)">
            <summary>
            Gets the items for category.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="T:Radzen.Blazor.IChartStackedColumnSeries">
            <summary>
            Marker interface for <see cref="T:Radzen.Blazor.RadzenStackedColumnSeries`1" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IChartStackedColumnSeries.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedColumnSeries.ValuesForCategory(System.Double)">
            <summary>
            Gets the values for category.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedColumnSeries.ItemsForCategory(System.Double)">
            <summary>
            Gets the items for category.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.IChartStackedColumnSeries.ValueAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Interpolation">
            <summary>
            Specifies the interpolation mode of lines between data points. Used by <see cref="T:Radzen.Blazor.RadzenAreaSeries`1"/> and <see cref="T:Radzen.Blazor.RadzenLineSeries`1"/>.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Interpolation.Line">
            <summary>
            Points are connected by a straight line.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Interpolation.Spline">
            <summary>
            Points are connected by a smooth curve.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Interpolation.Step">
            <summary>
            Points are connected by horizontal and vertical lines only.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.IScheduler">
            <summary>
            The common <see cref="T:Radzen.Blazor.RadzenScheduler`1" /> API injected as a cascading parameter to is views.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IScheduler.AppointmentMove">
            <summary>
            Gets or sets the appointment move event callback.
            </summary>
            <value>The appointment move event callback.</value>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.GetAppointmentsInRange(System.DateTime,System.DateTime)">
            <summary>
            Gets the appointments in the specified range.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <returns>A collection of appointments within the specified range.</returns>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.IsAppointmentInRange(Radzen.Blazor.AppointmentData,System.DateTime,System.DateTime)">
            <summary>
            Determines whether an appointment is within the specified range.
            </summary>
            <param name="item">The appointment to check.</param>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <returns><c>true</c> if the appointment is within the specified range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.AddView(Radzen.Blazor.ISchedulerView)">
            <summary>
            Adds a view. Must be called when a <see cref="T:Radzen.Blazor.ISchedulerView" /> is initialized.
            </summary>
            <param name="view">The view to add.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.RemoveView(Radzen.Blazor.ISchedulerView)">
            <summary>
            Removes a view. Must be called when a <see cref="T:Radzen.Blazor.ISchedulerView" /> is disposed.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.IsSelected(Radzen.Blazor.ISchedulerView)">
            <summary>
            Determines whether the specified view is selected.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if the specified view is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Radzen.Blazor.IScheduler.CurrentDate">
            <summary>
            Gets or sets the current date.
            </summary>
            <value>The current date.</value>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.SelectAppointment(Radzen.Blazor.AppointmentData)">
            <summary>
            Selects the specified appointment.
            </summary>
            <param name="data">The appointment to select.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.SelectSlot(System.DateTime,System.DateTime)">
            <summary>
            Selects the specified slot.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.SelectSlot(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <summary>
            Selects the specified slot.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="appointments">The appointments for this range.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.SelectMonth(System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <summary>
            Selects the specified month.
            </summary>
            <param name="monthStart">The start of the month.</param>
            <param name="appointments">The appointments for this range.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.SelectDay(System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <summary>
            Selects the specified day.
            </summary>
            <param name="day">The selected day.</param>
            <param name="appointments">The appointments for this range.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.SelectMore(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <summary>
            Selects the specified more link.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="appointments">The appointments for this range.</param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.GetAppointmentAttributes(Radzen.Blazor.AppointmentData)">
            <summary>
            Gets the appointment HTML attributes.
            </summary>
            <param name="item">The appointment.</param>
            <returns>A dictionary containing the HTML attributes for the specified appointment.</returns>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.GetSlotAttributes(System.DateTime,System.DateTime,System.Func{System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData}})">
            <summary>
            Gets the slot HTML attributes.
            </summary>
            <param name="start">The start of the slot.</param>
            <param name="end">The end of the slot.</param>
            <param name="getAppointments">Function to return appointments for this range.</param>
            <returns>A dictionary containing the HTML attributes for the specified slot.</returns>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.RenderAppointment(Radzen.Blazor.AppointmentData)">
            <summary>
            Renders the appointment.
            </summary>
            <param name="item">The item.</param>
            <returns>RenderFragment.</returns>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.MouseEnterAppointment(Microsoft.AspNetCore.Components.ElementReference,Radzen.Blazor.AppointmentData)">
            <summary>
            Notifies the scheduler that the user has moved the mouse over the specified appointment.
            </summary>
            <param name="reference"></param>
            <param name="data"></param>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.HasMouseEnterAppointmentDelegate">
            <summary>
            Returns true if the scheduler has a mouse enter appointment listener.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.HasAppointmentMoveDelegate">
            <summary>
            Returns true if the scheduler has an AppointmentMove listener.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.MouseLeaveAppointment(Microsoft.AspNetCore.Components.ElementReference,Radzen.Blazor.AppointmentData)">
            <summary>
            Notifies the scheduler that the user has moved the mouse out of the specified appointment.
            </summary>
            <param name="reference"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.IScheduler.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IScheduler.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Radzen.Blazor.IScheduler.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="T:Radzen.Blazor.ISchedulerView">
            <summary>
            Interface that has to be implemented by a view in order to by supported by <see cref="T:Radzen.Blazor.RadzenScheduler`1" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ISchedulerView.Icon">
            <summary>
            Gets the icon of the view. It is displayed in the view switching UI.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ISchedulerView.Title">
            <summary>
            Gets the title of the view. It is displayed in the RadzenScheduler title area.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Blazor.ISchedulerView.Text">
            <summary>
            Gets the text of the view. It is displayed in the view switching UI.
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:Radzen.Blazor.ISchedulerView.Next">
            <summary>
            Returns a new date when the user clicks the next button of RadzenScheduler.
            </summary>
            <returns>The next date. For example a day view will return the next day, a week view will return the next week.</returns>
        </member>
        <member name="M:Radzen.Blazor.ISchedulerView.Prev">
            <summary>
            Returns a new date when the user clicks the previous button of RadzenScheduler.
            </summary>
            <returns>The previous date. For example a day view will return the previous day, a week view will return the previous week.</returns>
        </member>
        <member name="M:Radzen.Blazor.ISchedulerView.Render">
            <summary>
            Renders this instance.
            </summary>
            <returns>RenderFragment.</returns>
        </member>
        <member name="P:Radzen.Blazor.ISchedulerView.StartDate">
            <summary>
            Gets the start date.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ISchedulerView.EndDate">
            <summary>
            Gets the end date.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.ISchedulerView.OnAppointmentMove(Radzen.SchedulerAppointmentMoveEventArgs)">
            <summary>
            Handles appointent move event.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Radzen.Blazor.LegendPosition">
            <summary>
            Specifies the legend position in a <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.LegendPosition.Right">
            <summary>
            The legend is at the right side of the series.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.LegendPosition.Left">
            <summary>
            The legend is at the left side of the series.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.LegendPosition.Top">
            <summary>
            The legend is above the series.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.LegendPosition.Bottom">
            <summary>
            The legend is below the series.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.LineType">
            <summary>
            Specified the line drawing style.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.LineType.Solid">
            <summary>
            Solid lines.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.LineType.Dashed">
            <summary>
            Dashed lines.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.LineType.Dotted">
            <summary>
            Dotted lines.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.AtxHeading">
            <summary>
            Represents a markdown ATX heading: <c># Heading</c>.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.Block">
            <summary>
            Base class for a markdown block nodes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Block.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <summary>
            Accepts a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Block.LastChild">
            <summary>
            Returns the last child of the block.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Block.FirstChild">
            <summary>
            Returns the first child of the block.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Block.Next">
            <summary>
            Returns the next sibling of the block.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Block.Parent">
            <summary>
            Returns the parent node of the block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Block.Remove">
            <summary>
            Removes the block from its parent.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.BlockContainer">
            <summary>
            Base class for markdown block nodes that can contain other blocks.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.BlockContainer.Children">
            <summary>
            Returns the children of the block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.BlockContainer.CanContain(Radzen.Blazor.Markdown.Block)">
            <summary>
            Determines if the block can contain the specified node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.BlockContainer.Add``1(``0)">
            <summary>
            Appends a block to the children of the block.
            </summary>
            <typeparam name="T">The type of the block.</typeparam>
            <param name="block">The block to add.</param>
            <returns>The added block.</returns>
        </member>
        <member name="M:Radzen.Blazor.Markdown.BlockContainer.Replace(Radzen.Blazor.Markdown.Block,Radzen.Blazor.Markdown.Block)">
            <summary>
            Replaces a block with another block.
            </summary>
            <param name="source">The block to replace.</param>
            <param name="target">The block to replace with.</param>
        </member>
        <member name="M:Radzen.Blazor.Markdown.BlockContainer.Remove(Radzen.Blazor.Markdown.Block)">
            <summary>
            Removes a block from the children of the block.
            </summary>
            <param name="block">The block to remove.</param>
        </member>
        <member name="M:Radzen.Blazor.Markdown.BlockContainer.NextSibling(Radzen.Blazor.Markdown.Block)">
            <summary>
            Returns the next sibling of the block.
            </summary>
            <param name="block">The block to get the next sibling of.</param>
            <returns>The next sibling of the block.</returns>
        </member>
        <member name="P:Radzen.Blazor.Markdown.BlockContainer.LastChild">
            <inheritdoc/>
        </member>
        <member name="P:Radzen.Blazor.Markdown.BlockContainer.FirstChild">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.Blazor.Markdown.BlockQuote">
            <summary>
            Represents a markdown block quote: <c>&gt; Quote</c>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.BlockQuote.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.Markdown.BlockQuote.CanContain(Radzen.Blazor.Markdown.Block)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.Code">
            <summary>
            Represents a markdown inline code block: <c>`code`</c>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Code.#ctor(System.String)">
            <summary>
            Represents a markdown inline code block: <c>`code`</c>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Code.Value">
            <summary>
            Gets or sets the code value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Code.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.Document">
            <summary>
            Represents a markdown document.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.Blazor.Markdown.Document"/> class.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Document.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.Markdown.Document.CanContain(Radzen.Blazor.Markdown.Block)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.Emphasis">
            <summary>
            Represents an emphasis element in a markdown document: <c>_emphasis_</c> or <c>*emphasis*</c>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Emphasis.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.FencedCodeBlock">
            <summary>
            Represents a fenced code block in a markdown document: <c>```</c> or <c>~~~</c>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.FencedCodeBlock.Delimiter">
            <summary>
            The delimiter used to start and end the code block.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.FencedCodeBlock.Info">
            <summary>
            The info string of the code block. This is the first line of the code block and is used to specify the language of the code block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.FencedCodeBlock.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.Heading">
            <summary>
            A base class for all heading elements.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Heading.Level">
            <summary>
            The level of the heading. The value is between 1 and 6.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Heading.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.HtmlBlock">
            <summary>
            Represents an HTML block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.HtmlBlock.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.HtmlInline">
            <summary>
            Represents an inline HTML element.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.HtmlInline.Value">
            <summary>
            Gets or sets the HTML element value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.HtmlInline.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.IBlockInlineContainer">
            <summary>
            Represents a block node that has inline children.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.IBlockInlineContainer.Children">
            <summary>
            Gets the inline children of the block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.IBlockInlineContainer.Add(Radzen.Blazor.Markdown.Inline)">
            <summary>
              Adds an inline child to the block.
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:Radzen.Blazor.Markdown.IBlockInlineContainer.Value">
            <summary>
            Gets string value of the block.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.Image">
            <summary>
            Represents an inline image element: <c>![Alt text](/path/to/img.jpg "Optional title")</c>
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Image.Destination">
            <summary>
            Gets or sets the destination (URL) of the image.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Image.Title">
            <summary>
            Gets or sets the alternative text of the image.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Image.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.IndentedCodeBlock">
            <summary>
            Represents a markdown indented code block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.IndentedCodeBlock.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.Inline">
            <summary>
            Base class for markdown inline nodes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Inline.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <summary>
            Accepts a visitor.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.InlineContainer">
            <summary>
            Base class for inline elements that contain other inline elements.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.InlineContainer.Children">
            <summary>
            Gets the children of the container.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.InlineContainer.Add(Radzen.Blazor.Markdown.Inline)">
            <summary>
            Appends a child to the container.
            </summary>
            <param name="node">The child to add.</param>
        </member>
        <member name="T:Radzen.Blazor.Markdown.INode">
            <summary>
            Represents a markdown node that can be visited by a <see cref="T:Radzen.Blazor.Markdown.INodeVisitor"/>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INode.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <summary>
            Accepts a <see cref="T:Radzen.Blazor.Markdown.INodeVisitor"/>.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Radzen.Blazor.Markdown.INodeVisitor">
            <summary>
            Represents a visitor for Markdown AST nodes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitHeading(Radzen.Blazor.Markdown.Heading)">
            <summary>
            Visits a heading node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitParagraph(Radzen.Blazor.Markdown.Paragraph)">
            <summary>
            Visits a paragraph node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitBlockQuote(Radzen.Blazor.Markdown.BlockQuote)">
            <summary>
            Visits a block quote node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitDocument(Radzen.Blazor.Markdown.Document)">
            <summary>
            Visits a document node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitUnorderedList(Radzen.Blazor.Markdown.UnorderedList)">
            <summary>
            Visits an unordered list node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitListItem(Radzen.Blazor.Markdown.ListItem)">
            <summary>
            Visits a list item node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitText(Radzen.Blazor.Markdown.Text)">
            <summary>
            Visits a text node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitOrderedList(Radzen.Blazor.Markdown.OrderedList)">
            <summary>
            Visits an ordered list node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitEmphasis(Radzen.Blazor.Markdown.Emphasis)">
            <summary>
            Visits an emphasis node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitStrong(Radzen.Blazor.Markdown.Strong)">
            <summary>
            Visits a strong node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitCode(Radzen.Blazor.Markdown.Code)">
            <summary>
            Visits a code node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitLink(Radzen.Blazor.Markdown.Link)">
            <summary>
            Visits a link node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitImage(Radzen.Blazor.Markdown.Image)">
            <summary>
            Visits an image node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitHtmlInline(Radzen.Blazor.Markdown.HtmlInline)">
            <summary>
            Visits an HTML inline node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitLineBreak(Radzen.Blazor.Markdown.LineBreak)">
            <summary>
            Visits a line break node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitSoftLineBreak(Radzen.Blazor.Markdown.SoftLineBreak)">
            <summary>
            Visits a soft line break node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitThematicBreak(Radzen.Blazor.Markdown.ThematicBreak)">
            <summary>
            Visits a thematic break node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitIndentedCodeBlock(Radzen.Blazor.Markdown.IndentedCodeBlock)">
            <summary>
            Visits an indented code block node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitFencedCodeBlock(Radzen.Blazor.Markdown.FencedCodeBlock)">
            <summary>
            Visits a fenced code block node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitHtmlBlock(Radzen.Blazor.Markdown.HtmlBlock)">
            <summary>
            Visits an HTML block node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitTable(Radzen.Blazor.Markdown.Table)">
            <summary>
            Visits a table node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitTableHeaderRow(Radzen.Blazor.Markdown.TableHeaderRow)">
            <summary>
            Visits a table header row node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitTableRow(Radzen.Blazor.Markdown.TableRow)">
            <summary>
            Visits a table row node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.INodeVisitor.VisitTableCell(Radzen.Blazor.Markdown.TableCell)">
            <summary>
            Visits a table cell node.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.Leaf">
            <summary>
            Base class for markdown leaf block nodes.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Leaf.Value">
            <summary>
            Gets or sets the value of the leaf node.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Leaf.Children">
            <summary>
            Gets the children of the leaf node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Leaf.Add(Radzen.Blazor.Markdown.Inline)">
            <summary>
            Appends a child to the leaf node.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.LineBreak">
            <summary>
            Represents a line break node. Line breaks are usually empty lines and are used to separate paragraphs.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.LineBreak.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.Link">
            <summary>
            Represents a link element: <c>[Link text](/path/to/page "Optional title")</c>
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Link.Destination">
            <summary>
            Gets or sets the destination (URL) of the link.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Link.Title">
            <summary>
            Gets or sets the link title.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Link.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.List">
            <summary>
            Base class for list elements (ordered and unordered).
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.List.Marker">
            <summary>
            Gets or sets the list marker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.List.Tight">
            <summary>
            Gets or sets a value indicating whether the list is tight. Tight lists have no space between their items.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.List.CanContain(Radzen.Blazor.Markdown.Block)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.ListItem">
            <summary>
            Represents a list item node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.ListItem.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.Markdown.ListItem.CanContain(Radzen.Blazor.Markdown.Block)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.MarkdownParser">
            <summary>
            Parses a Markdown document.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.MarkdownParser.Parse(System.String)">
            <summary>
            Parses a string containing Markdown into a document.
            </summary>
            <param name="markdown">The Markdown content to parse.</param>
            <returns>The parsed document.</returns>
        </member>
        <member name="T:Radzen.Blazor.Markdown.NodeVisitorBase">
            <summary>
            Base class for visitors that traverse a Markdown document.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitBlockQuote(Radzen.Blazor.Markdown.BlockQuote)">
            <summary>
            Visits a block quote by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitDocument(Radzen.Blazor.Markdown.Document)">
            <summary>
            Visits a document by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitHeading(Radzen.Blazor.Markdown.Heading)">
            <summary>
            Visits a heading by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitListItem(Radzen.Blazor.Markdown.ListItem)">
            <summary>
            Visits a list item by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitOrderedList(Radzen.Blazor.Markdown.OrderedList)">
            <summary>
            Visits an ordered list by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitParagraph(Radzen.Blazor.Markdown.Paragraph)">
            <summary>
            Visits a paragraph by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitThematicBreak(Radzen.Blazor.Markdown.ThematicBreak)">
            <summary>
            Visits a thematic break.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitText(Radzen.Blazor.Markdown.Text)">
            <summary>
            Visits a text node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitCode(Radzen.Blazor.Markdown.Code)">
            <summary>
            Visits a code node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitHtmlInline(Radzen.Blazor.Markdown.HtmlInline)">
            <summary>
            Visits an HTML block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitLineBreak(Radzen.Blazor.Markdown.LineBreak)">
            <summary>
            Visits a line break.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitSoftLineBreak(Radzen.Blazor.Markdown.SoftLineBreak)">
            <summary>
            Visits a soft line break.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitUnorderedList(Radzen.Blazor.Markdown.UnorderedList)">
            <summary>
            Visits an ordered list by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitEmphasis(Radzen.Blazor.Markdown.Emphasis)">
            <summary>
            Visits an emphasis by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitStrong(Radzen.Blazor.Markdown.Strong)">
            <summary>
            Visits a strong by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitLink(Radzen.Blazor.Markdown.Link)">
            <summary>
            Visits a link by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitImage(Radzen.Blazor.Markdown.Image)">
            <summary>
            Visits an image by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitIndentedCodeBlock(Radzen.Blazor.Markdown.IndentedCodeBlock)">
            <summary>
            Visits a code block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitFencedCodeBlock(Radzen.Blazor.Markdown.FencedCodeBlock)">
            <summary>
            Visits a fenced code block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitHtmlBlock(Radzen.Blazor.Markdown.HtmlBlock)">
            <summary>
            Visits an HTML block.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitTable(Radzen.Blazor.Markdown.Table)">
            <summary>
            Visits a table.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitTableHeaderRow(Radzen.Blazor.Markdown.TableHeaderRow)">
            <summary>
            Visits a table header row by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitTableRow(Radzen.Blazor.Markdown.TableRow)">
            <summary>
            Visits a table row by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitTableCell(Radzen.Blazor.Markdown.TableCell)">
            <summary>
            Visits a table cell by visiting its children.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.NodeVisitorBase.VisitChildren(System.Collections.Generic.IEnumerable{Radzen.Blazor.Markdown.INode})">
            <summary>
            Visits a collection of nodes.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.OrderedList">
            <summary>
            Represents an ordered list: <c>1. item</c>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.OrderedList.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.Markdown.OrderedList.Start">
            <summary>
            Gets or sets the start number of the ordered list.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.Paragraph">
            <summary>
            Represents a paragraph node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Paragraph.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.SetExtHeading">
            <summary>
            Represents a setext heading node. Setext headings are headings that are underlined with equal signs for level 1 headings and dashes for level 2 headings.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.SoftLineBreak">
            <summary>
            Represents a soft line break node. Soft line breaks are usually used to separate lines in a paragraph.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.SoftLineBreak.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.Strong">
            <summary>
            Represents a strong node: <c>**strong**</c>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Strong.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.TableCellAlignment">
            <summary>
            The alignment of a table cell.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Markdown.TableCellAlignment.None">
            <summary>
            No alignment specified. Default alignment is left.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Markdown.TableCellAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Markdown.TableCellAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Markdown.TableCellAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.Table">
            <summary>
            Represents a table in a Markdown document.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Table.Rows">
            <summary>
            Gets the rows of the table.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Table.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.TableHeaderRow">
            <summary>
            Represents a table header row in a Markdown table.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.TableHeaderRow.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.TableRow">
            <summary>
            Represents a table row in a Markdown table.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.TableRow.Cells">
            <summary>
            /// Gets the cells of the table row.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.TableRow.Add(System.String,Radzen.Blazor.Markdown.TableCellAlignment)">
            <summary>
            Adds a cell to the table row.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.TableRow.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.TableCell">
            <summary>
            Represents a table cell in a Markdown table.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.TableCell.Alignment">
            <summary>
            Gets the alignment of the table cell.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.TableCell.#ctor(System.String,Radzen.Blazor.Markdown.TableCellAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.Blazor.Markdown.TableCell"/> class.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.TableCell.Value">
            <summary>
            Gets or sets the inline content of the cell
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.TableCell.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.Markdown.TableCell.Children">
            <summary>
            Gets the children of the table cell.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.TableCell.Add(Radzen.Blazor.Markdown.Inline)">
            <summary>
            Appends a child to table cell.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Markdown.Text">
            <summary>
            Represents a text node.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Text.#ctor(System.String)">
            <summary>
            Represents a text node.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Markdown.Text.Value">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.Text.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.ThematicBreak">
            <summary>
            Represents a thematic break node: <c>***</c>, <c>---</c>, or <c>___</c>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.ThematicBreak.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Markdown.UnorderedList">
            <summary>
            Represents an unordered list: <c>- item</c>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Markdown.UnorderedList.Accept(Radzen.Blazor.Markdown.INodeVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.MarkerType">
            <summary>
            Specifies the type of marker that <see cref="T:Radzen.Blazor.RadzenChart" /> displays for data points.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.MarkerType.None">
            <summary>
            Do not display a marker for data points.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.MarkerType.Auto">
            <summary>
            Cycle between markers.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.MarkerType.Circle">
            <summary>
            Use a circle marker.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.MarkerType.Triangle">
            <summary>
            Use a triangle marker.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.MarkerType.Square">
            <summary>
            Use a square marker.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.MarkerType.Diamond">
            <summary>
            Use a diamond marker.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.PagingInformation">
            <summary>
            Represents paging information.
            </summary>
            <param name="CurrentPage">The current page number.</param>
            <param name="NumberOfPages">The total number of pages.</param>
            <param name="TotalCount">The total count of items.</param>
        </member>
        <member name="M:Radzen.Blazor.PagingInformation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents paging information.
            </summary>
            <param name="CurrentPage">The current page number.</param>
            <param name="NumberOfPages">The total number of pages.</param>
            <param name="TotalCount">The total count of items.</param>
        </member>
        <member name="P:Radzen.Blazor.PagingInformation.CurrentPage">
            <summary>The current page number.</summary>
        </member>
        <member name="P:Radzen.Blazor.PagingInformation.NumberOfPages">
            <summary>The total number of pages.</summary>
        </member>
        <member name="P:Radzen.Blazor.PagingInformation.TotalCount">
            <summary>The total count of items.</summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenAccordion">
            <summary>
            RadzenAccordion component.
            </summary>
            <example>
            <code>
            &lt;RadzenAccordion&gt;
                &lt;Items&gt;
                    &lt;RadzenAccordionItem Text="Orders" Icon="account_balance_wallet"&gt;
                        Details for Orders
                    &lt;/RadzenAccordionItem&gt;
                    &lt;RadzenAccordionItem Text="Employees" Icon="account_box"&gt;
                        Details for Employees
                    &lt;/RadzenAccordionItem&gt;
                &lt;/Items&gt;
            &lt;/RadzenAccordion&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordion.Multiple">
            <summary>
            Gets or sets a value indicating whether multiple items can be expanded.
            </summary>
            <value><c>true</c> if multiple items can be expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordion.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordion.SelectedIndexChanged">
            <summary>
            Gets or sets the value changed.
            </summary>
            <value>The value changed.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordion.Expand">
            <summary>
            Gets or sets a callback raised when the item is expanded.
            </summary>
            <value>The expand.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordion.Collapse">
            <summary>
            Gets or sets a callback raised when the item is collapsed.
            </summary>
            <value>The collapse.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordion.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.AddItem(Radzen.Blazor.RadzenAccordionItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.RemoveItem(Radzen.Blazor.RadzenAccordionItem)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.IsSelected(System.Int32,Radzen.Blazor.RadzenAccordionItem)">
            <summary>
            Determines whether the specified index is selected.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns><c>true</c> if the specified index is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.ItemTitle(System.Int32,Radzen.Blazor.RadzenAccordionItem)">
            <summary>
            Gets the item's title attribute value.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns>The item's collapse or expand title value depending on if the item is expanded or collapsed.
            If the relevant title is null or whitespace this method returns "Expand" or "Collapse".</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.ItemAriaLabel(System.Int32,Radzen.Blazor.RadzenAccordionItem)">
            <summary>
            Gets the item's aria-label attribute value.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns>The item's collapse or expand aria-label value depending on if the item is expanded or collapsed.
            If the relevant aria-label is null or whitespace this method returns "Expand" or "Collapse".</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordion.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenAccordionItem">
            <summary>
            Class RadzenAccordionItem.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenAccordionItem"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.SelectedChanged">
            <summary>
            Gets or sets the value changed.
            </summary>
            <value>The value changed.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenAccordionItem"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.ExpandTitle">
            <summary>
            Gets or sets the title attribute of the expand button.
            </summary>
            <value>The title attribute value of the expand button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.CollapseTitle">
            <summary>
            Gets or sets the title attribute of the collapse button.
            </summary>
            <value>The title attribute value of the collapse button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.ExpandAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the expand button.
            </summary>
            <value>The aria-label attribute value of the expand button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.CollapseAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the collapse button.
            </summary>
            <value>The aria-label attribute value of the collapse button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.Template">
            <summary>
            Gets or sets the header content.
            </summary>
            <value>The header content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenAccordionItem"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAccordionItem.Accordion">
            <summary>
            Gets or sets the accordion.
            </summary>
            <value>The accordion.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordionItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordionItem.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenAccordionItem.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenAlert">
            <summary>
            RadzenAlert component.
            </summary>
            <example>
            <code>
            &lt;RadzenAlert&gt;
                &lt;ChildContent&gt;
                    Content
                &lt;/ChildContent&gt;
            &lt;/RadzenAlert&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.AllowClose">
            <summary>
            Gets or sets a value indicating whether close is allowed. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if close is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.ShowIcon">
            <summary>
            Gets or sets a value indicating whether icon should be shown. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if icon is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.Text">
            <summary>
            Gets or sets the text of the alert. Overriden by <see cref="P:Radzen.RadzenComponentWithChildren.ChildContent" />.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.AlertStyle">
            <summary>
            Gets or sets the severity.
            </summary>
            <value>The severity.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.Variant">
            <summary>
            Gets or sets the design variant of the alert.
            </summary>
            <value>The variant of the alert.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.Shade">
            <summary>
            Gets or sets the color shade of the alert.
            </summary>
            <value>The color shade of the alert.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenAlert.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAlert.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.VisibleChanged">
            <summary>
            Gets or sets the callback which is invoked when the alert is shown or hidden.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAlert.Close">
            <summary>
            Gets or sets the callback which is invoked when the alert is closed by the user.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenAlert.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenAppearanceToggle">
            <summary>
            Dark or light theme switch. Requires <see cref="P:Radzen.Blazor.RadzenAppearanceToggle.ThemeService" /> to be registered in the DI container.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAppearanceToggle.Variant">
            <summary>
            Gets or sets the switch button variant.
            </summary>
            <value>The switch button variant.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAppearanceToggle.ButtonStyle">
            <summary>
            Gets or sets the switch button style.
            </summary>
            <value>The switch button style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAppearanceToggle.ToggleShade">
            <summary>
            Gets or sets the switch button toggled shade.
            </summary>
            <value>The switch button toggled shade.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAppearanceToggle.ToggleButtonStyle">
            <summary>
            Gets or sets the switch button toggled style.
            </summary>
            <value>The switch button toggled style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAppearanceToggle.LightTheme">
            <summary>
            Gets or sets the light theme. Not set by default - the component uses the light version of the current theme.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAppearanceToggle.DarkTheme">
            <summary>
            Gets or sets the dark theme. Not set by default - the component uses the dark version of the current theme.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenAppearanceToggle.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAppearanceToggle.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenArcGaugeScale">
            <summary>
            RadzenArcGaugeScale component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Gauge">
            <summary>
            Gets or sets the gauge.
            </summary>
            <value>The gauge.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.TickLength">
            <summary>
            Gets or sets the length of the tick.
            </summary>
            <value>The length of the tick.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.MinorTickLength">
            <summary>
            Gets or sets the length of the minor tick.
            </summary>
            <value>The length of the minor tick.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.TickLabelOffset">
            <summary>
            Gets or sets the tick label offset.
            </summary>
            <value>The tick label offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Formatter">
            <summary>
            Gets or sets the formatter.
            </summary>
            <value>The formatter.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.TickPosition">
            <summary>
            Gets or sets the tick position.
            </summary>
            <value>The tick position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.ShowFirstTick">
            <summary>
            Gets or sets a value indicating whether first tick is shown.
            </summary>
            <value><c>true</c> if first tick is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.ShowLastTick">
            <summary>
            Gets or sets a value indicating whether last tick is shown.
            </summary>
            <value><c>true</c> if last tick is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.ShowTickLabels">
            <summary>
            Gets or sets a value indicating whether to show tick labels.
            </summary>
            <value><c>true</c> if tick labels are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Min">
            <summary>
            Determines the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Max">
            <summary>
            Determines the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.MinorStep">
            <summary>
            Gets or sets the minor step.
            </summary>
            <value>The minor step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>The margin.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.CurrentStrokeWidth">
            <summary>
            Gets the width of the current stroke.
            </summary>
            <value>The width of the current stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.CurrentRadius">
            <summary>
            Gets the current radius.
            </summary>
            <value>The current radius.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.CurrentSize">
            <summary>
            Gets the current size.
            </summary>
            <value>The current size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScale.CurrentCenter">
            <summary>
            Gets the current center.
            </summary>
            <value>The current center.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenArcGaugeScaleValue">
            <summary>
            RadzenArcGaugeScaleValue component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.ShowValue">
            <summary>
            Gets or sets a value indicating whether to show value.
            </summary>
            <value><c>true</c> if value is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenArcGaugeScaleValue.Gauge">
            <summary>
            Gets or sets the gauge.
            </summary>
            <value>The gauge.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenArcGaugeScaleValue.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenArcGaugeScaleValue.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenAreaSeries`1">
            <summary>
            Renders area series in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAreaSeries`1.Stroke">
            <summary>
            Specifies the color of the line.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAreaSeries`1.Fill">
            <summary>
            Specifies the fill (background color) of the area series.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAreaSeries`1.StrokeWidth">
            <summary>
            Gets or sets the pixel width of the line. Set to <c>2</c> by default.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAreaSeries`1.LineType">
            <summary>
            Specifies the line type.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAreaSeries`1.Smooth">
            <summary>
            Specifies whether to render a smooth line. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAreaSeries`1.Interpolation">
            <summary>
            Specifies how to render lines between data points. Set to <see cref="F:Radzen.Blazor.Interpolation.Line"/> by default
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAreaSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAreaSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAreaSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAreaSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenAutoComplete">
            <summary>
            RadzenAutoComplete component.
            </summary>
            <example>
            <code>
            &lt;RadzenAutoComplete Data=@customers TextProperty="CompanyName" Change=@(args => Console.WriteLine($"Selected text: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.SelectedItemChanged">
            <summary>
            Gets or sets the selected item changed.
            </summary>
            <value>The selected item changed.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.Multiline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenAutoComplete"/> is multiline.
            </summary>
            <value><c>true</c> if multiline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.OpenOnFocus">
            <summary>
            Gets or sets a value indicating whether popup should open on focus. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if popup should open on focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.PopupStyle">
            <summary>
            Gets or sets the Popup height.
            </summary>
            <value>The number Popup height.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.MinLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.FilterDelay">
            <summary>
            Gets or sets the filter delay.
            </summary>
            <value>The filter delay.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.InputType">
            <summary>
            Gets or sets the underlying input type.
            </summary>
            <remarks>
            This does not apply when <see cref="P:Radzen.Blazor.RadzenAutoComplete.Multiline"/> is <c>true</c>.
            </remarks>
            <value>The input type.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.MaxLength">
            <summary>
            Gets or sets the underlying max length.
            </summary>
            <value>The max length value.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenAutoComplete.search">
            <summary>
            Gets search input reference.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenAutoComplete.list">
            <summary>
            Gets list element reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenAutoComplete.OnFilterKeyPress(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handles the <see cref="E:FilterKeyPress" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.Query">
            <summary>
            Gets the IQueryable.
            </summary>
            <value>The IQueryable.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAutoComplete.View">
            <summary>
            Gets the view - the Query with filtering applied.
            </summary>
            <value>The view.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenAutoComplete.OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Change" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenAutoComplete.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAutoComplete.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAutoComplete.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Called on after render asynchronous.
            </summary>
            <param name="firstRender">if set to <c>true</c> is first render.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenAutoComplete.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenAutoComplete.FocusAsync">
            <summary>
            Sets the focus on the input element.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenAxisTitle">
            <summary>
            Represents the title configuration of a <see cref="T:Radzen.Blazor.AxisBase" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenAxisTitle.Text">
            <summary>
            Gets or sets the text displayed by the title.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenAxisTitle.Axis">
            <summary>
            Sets the axis with this configuration applies to.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenAxisTitle.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenBadge">
            <summary>
            RadzenBadge component.
            </summary>
            <example>
            <code>
            &lt;RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="Primary" /&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenBadge.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenBadge.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBadge.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBadge.BadgeStyle">
            <summary>
            Gets or sets the badge style.
            </summary>
            <value>The badge style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBadge.Variant">
            <summary>
            Gets or sets the badge variant.
            </summary>
            <value>The badge variant.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBadge.Shade">
            <summary>
            Gets or sets the badge shade color.
            </summary>
            <value>The badge shade color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBadge.IsPill">
            <summary>
            Gets or sets a value indicating whether this instance is pill.
            </summary>
            <value><c>true</c> if this instance is pill; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenBarOptions">
            <summary>
            Common configuration of <see cref="T:Radzen.Blazor.RadzenBarSeries`1" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarOptions.Radius">
            <summary>
            Gets or sets the border radius of the bars. 
            </summary>
            <value>The radius. Values greater than <c>0</c> make rounded corners.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarOptions.Margin">
            <summary>
            Gets or sets the margin between bars.
            </summary>
            <value>The margin. By default set to <c>10</c></value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarOptions.Height">
            <summary>
            Gets or sets the height of all bars in pixels. By default it is automatically calculated depending on the chart height.
            </summary>
            <value>The pixel height of the bar. By default set to <c>null</c></value>
        </member>
        <member name="M:Radzen.Blazor.RadzenBarOptions.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarOptions.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenBarSeries`1">
            <summary>
            Renders bar series in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
            <typeparam name="TItem">The type of the series data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.Fill">
            <summary>
            Specifies the fill (background color) of the bar series.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.Fills">
            <summary>
            Specifies a list of colors that will be used to set the individual bar backgrounds.
            </summary>
            <value>The fills.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.Stroke">
            <summary>
            Specifies the stroke (border color) of the bar series.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.Strokes">
            <summary>
            Specifies a list of colors that will be used to set the individual bar borders.
            </summary>
            <value>The strokes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke (border).
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.LineType">
            <summary>
            Gets or sets the type of the line used to render the bar border.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.FillRange">
            <summary>
            Gets or sets the color range of the fill.
            </summary>
            <value>The color range of the fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.StrokeRange">
            <summary>
            Gets or sets the color range of the stroke.
            </summary>
            <value>The color range of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBarSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.TransformCategoryScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.TransformValueScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.GetCategories">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.TooltipX(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.TooltipValue(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.TooltipTitle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.DataAt(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.TooltipY(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBarSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenBody">
            <summary>
            RadzenBody component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBody.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenBody.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBody.Toggle">
            <summary>
            Toggles this instance width and left margin.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBody.Layout">
            <summary>
            The <see cref="T:Radzen.Blazor.RadzenLayout" /> this component is nested in.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenBody.GetStyle">
            <summary>
            Gets the style.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenBody.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenBody"/> is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBody.ExpandedChanged">
            <summary>
            Gets or sets a callback raised when the component is expanded or collapsed.
            </summary>
            <value>The expanded changed callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenBody.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenBody.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenBreadCrumb">
            <summary>
            A component to display a Bread Crumb style menu
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBreadCrumb.Template">
            <summary>
            An optional RenderFragment that is rendered per Item
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenBreadCrumb.GetComponentCssClass">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.Blazor.RadzenBreadCrumbItem">
            <summary>
            Bread Crumb Item Component
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBreadCrumbItem.Template">
            <summary>
            Cascaded Template Parameter from <see cref="T:Radzen.Blazor.RadzenBreadCrumb"/> Component
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBreadCrumbItem.Text">
            <summary>
            The Displayed Text
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBreadCrumbItem.Path">
            <summary>
            An optional Link to be rendendered
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBreadCrumbItem.Icon">
            <summary>
            An optional Icon to be rendered
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenBreadCrumbItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenBreadCrumbItem.ChildContent">
            <summary>
            Template Parameter used only for this Item
            Note: this overrides the <see cref="P:Radzen.Blazor.RadzenBreadCrumbItem.Template"/> Cascading Parameter
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenBreadCrumbItem.GetComponentCssClass">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.Blazor.RadzenButton">
            <summary>
            RadzenButton component.
            </summary>
            <example>
            <code>
            &lt;RadzenButton Click=@(args => Console.WriteLine("Button clicked")) Text="Button" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.TabIndex">
            <summary>
            Gets or sets the index of the tab.
            </summary>
            <value>The index of the tab.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.ButtonStyle">
            <summary>
            Gets or sets the button style.
            </summary>
            <value>The button style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.ButtonType">
            <summary>
            Gets or sets the type of the button.
            </summary>
            <value>The type of the button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Variant">
            <summary>
            Gets or sets the design variant of the button.
            </summary>
            <value>The variant of the button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Shade">
            <summary>
            Gets or sets the color shade of the button.
            </summary>
            <value>The color shade of the button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenButton"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.IsBusy">
            <summary>
            Gets or sets a value indicating whether this instance busy text is shown.
            </summary>
            <value><c>true</c> if this instance busy text is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.BusyText">
            <summary>
            Gets or sets the busy text.
            </summary>
            <value>The busy text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenButton.IsDisabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenButton.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenButton.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenCard">
            <summary>
            RadzenCard component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenCard.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenCard.Variant">
            <summary>
            Gets or sets the card variant.
            </summary>
            <value>The card variant.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenCardGroup">
            <summary>
            RadzenCardGroup component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCardGroup.Responsive">
            <summary>
            Toggles the responsive mode of the component. If set to <c>true</c> (the default) the component will be 
            expanded on larger displays and collapsed on touch devices. Set to <c>false</c> if you want to disable this behavior.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenCardGroup.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenCarousel">
            <summary>
            RadzenCarousel component.
            </summary>
            <example>
            <code>
            &lt;RadzenCarousel Change=@(args => Console.WriteLine($"Selected index is: {args}"))&gt;
                &lt;Items&gt;
                    &lt;RadzenCarouselItem&gt;
                        Details for Orders
                    &lt;/RadzenCarouselItem&gt;
                    &lt;RadzenCarousel&gt;
                        Details for Employees
                    &lt;/RadzenCarouselItem&gt;
                &lt;/Items&gt;
            &lt;/RadzenCarousel&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.AddItem(Radzen.Blazor.RadzenCarouselItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.RemoveItem(Radzen.Blazor.RadzenCarouselItem)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.Navigate(System.Int32)">
            <summary>
            Navigates to specific index.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.Stop">
            <summary>
            Stops the auto-cycle timer.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.Start">
            <summary>
            Starts the auto-cycle timer.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.Reset">
            <summary>
            Resets the auto-cycle timer.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.SelectedIndex">
            <summary>
            Gets or sets the selected index.
            </summary>
            <value>The selected index.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.SelectedIndexChanged">
            <summary>
            Gets or sets the selected index changed callback.
            </summary>
            <value>The selected index changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.Change">
            <summary>
            Gets or sets the change callback.
            </summary>
            <value>The change callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.Auto">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenCarousel"/> cycle is automatic.
            </summary>
            <value><c>true</c> if cycle automatic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.Interval">
            <summary>
            Gets or sets the auto-cycle interval in milliseconds.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.PagerPosition">
            <summary>
            Gets or sets the pager position. Set to <c>PagerPosition.Bottom</c> by default.
            </summary>
            <value>The pager position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.PagerOverlay">
            <summary>
            Gets or sets a value indicating whether pager overlays the carousel items. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if pager overlay is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.AllowPaging">
            <summary>
            Gets or sets a value indicating whether paging is allowed. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if paging is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.AllowNavigation">
            <summary>
            Gets or sets a value indicating whether previous/next navigation is allowed. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if previous/next navigation is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.ButtonStyle">
            <summary>
            Gets or sets the buttons style
            </summary>
            <value>The buttons style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.ButtonVariant">
            <summary>
            Gets or sets the design variant of the buttons.
            </summary>
            <value>The variant of the buttons.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.ButtonShade">
            <summary>
            Gets or sets the color shade of the buttons.
            </summary>
            <value>The color shade of the buttons.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.ButtonSize">
            <summary>
            Gets or sets the buttons size.
            </summary>
            <value>The buttons size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.NextText">
            <summary>
            Gets or sets the next button text.
            </summary>
            <value>The next button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.PrevText">
            <summary>
            Gets or sets the previous button text.
            </summary>
            <value>The previous button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.NextIcon">
            <summary>
            Gets or sets the next button icon.
            </summary>
            <value>The next button icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarousel.PrevIcon">
            <summary>
            Gets or sets the previous button icon.
            </summary>
            <value>The previous button icon.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenCarousel.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenCarouselItem">
            <summary>
            RadzenCarouselItem component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarouselItem.Class">
            <summary>
            Gets the class list.
            </summary>
            <value>The class list.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarouselItem.Attributes">
            <summary>
            Gets or sets the arbitrary attributes.
            </summary>
            <value>The arbitrary attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarouselItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCarouselItem.Carousel">
            <summary>
            Gets or sets the tabs.
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCarouselItem.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenCarouselItem.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenChart">
            <summary>
            Displays line, area, donut, pie, bar or column series.
            </summary>
            <example>
            <code>
              &lt;RadzenChart&gt;
                  &lt;RadzenColumnSeries Data=@revenue CategoryProperty="Quarter" ValueProperty="Revenue" /&gt;
              &lt;/RadzenChart&gt;
              @code {
                  class DataItem
                  {
                      public string Quarter { get; set; }
                      public double Revenue { get; set; }
                  }
                  DataItem[] revenue = new DataItem[]
                  {
                      new DataItem { Quarter = "Q1", Revenue = 234000 },
                      new DataItem { Quarter = "Q2", Revenue = 284000 },
                      new DataItem { Quarter = "Q3", Revenue = 274000 },
                      new DataItem { Quarter = "Q4", Revenue = 294000 }
                  };
              }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.ColorScheme">
            <summary>
            Gets or sets the color scheme used to render the series.
            </summary>
            <value>The color scheme.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.SeriesClick">
            <summary>
            A callback that will be invoked when the user clicks on a series.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.LegendClick">
            <summary>
            A callback that will be invoked when the user clicks on a legend.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.Width">
            <summary>
            Gets the runtime width of the chart.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.Height">
            <summary>
            Gets the runtime height of the chart.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.MarginTop">
            <summary>
            Gets or sets the top margin of the plot area.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.MarginLeft">
            <summary>
            Gets or sets the left margin of the plot area.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.MarginRight">
            <summary>
            Gets or sets the right margin of the plot area.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.MarginBottom">
            <summary>
            Gets or sets the bottom margin of the plot area.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.ChildContent">
            <summary>
            Gets or sets the child content. Used to specify series and other configuration.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.GetSeries">
            <summary>
            Returns the Series used by the Chart.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.ShouldRenderAxes">
            <summary>
            Returns whether the chart should render axes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.UpdateScales">
            <summary>
            Updates the scales based on the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.Resize(System.Double,System.Double)">
            <summary>
            Invoked via interop when the RadzenChart resizes. Display the series with the new dimensions.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.MouseMove(System.Double,System.Double)">
            <summary>
            Invoked via interop when the user moves the mouse over the RadzenChart. Displays the tooltip.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.ClickTolerance">
            <summary>
            The minimum pixel distance from a data point to the mouse cursor required for the SeriesClick event to fire. Set to 25 by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChart.TooltipTolerance">
            <summary>
            The minimum pixel distance from a data point to the mouse cursor required by the tooltip to show. Set to 25 by default.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.Click(System.Double,System.Double)">
            <summary>
            Invoked via interop when the user clicks the RadzenChart. Raises the <see cref="P:Radzen.Blazor.RadzenChart.SeriesClick" /> handler.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.DisplayTooltipFor(Radzen.Blazor.IChartSeries,System.Object)">
            <summary>
            Displays a Tooltip on a chart without user interaction, given a series, and the data associated with it.
            </summary>
            <param name="series"></param>
            <param name="data"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.Reload">
            <summary>
            Causes all series to refresh. Use it when <see cref="P:Radzen.Blazor.CartesianSeries`1.Data" /> has changed.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenChart.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenChartComponentBase">
            <summary>
            Base class of components that are rendered inside a <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartComponentBase.Chart">
            <summary>
            Used to inject the RadzenChart instance. Invokes <see cref="M:Radzen.Blazor.RadzenChartComponentBase.Initialize" />.
            </summary>
            <value>The chart.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenChartComponentBase.Initialize">
            <summary>
            Perform initialization when <see cref="P:Radzen.Blazor.RadzenChartComponentBase.Chart" /> is set.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenChartComponentBase.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Determines if RadzenChart should render.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenChartComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenChartComponentBase.ValidateParameters">
            <summary>
            Validates the parameters.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenChartComponentBase.DidParameterChange``1(Microsoft.AspNetCore.Components.ParameterView,System.String,``0)">
            <summary>
            Checks if the specified parameter changed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameters">The parameters.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns><c>true</c> if the parameter changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenChartTooltipOptions">
            <summary>
            Contains <see cref="T:Radzen.Blazor.RadzenChart" /> tooltip configuration.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltipOptions.Visible">
            <summary>
            Gets or sets a value indicating whether to show tooltips. By default RadzenChart displays tooltips.
            </summary>
            <value><c>true</c> to display tooltips; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltipOptions.Style">
            <summary>
            Gets or sets the CSS style of the tooltip.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltipOptions.Shared">
            <summary>
            Enable or disable shared tooltips (one tooltip displaying data for all values for the same category). By default set to false (a separate tooltip is shown for each point in the category).
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenChartTooltipOptions.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenChartTooltipOptions.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenCheckBox`1">
            <summary>
            RadzenCheckBox component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenCheckBox @bind-Value=@someValue TValue="bool" Change=@(args => Console.WriteLine($"Is checked: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBox`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBox`1.TriState">
            <summary>
            Gets or sets a value indicating whether is tri-state (true, false or null).
            </summary>
            <value><c>true</c> if tri-state; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBox`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBox`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenCheckBoxList`1">
            <summary>
            RadzenCheckBoxList component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenCheckBoxList @bind-Value=@checkedValues TValue="int" &gt;
                &lt;Items&gt;
                    &lt;RadzenCheckBoxListItem Text="Orders" Value="1" /&gt;
                    &lt;RadzenCheckBoxListItem Text="Employees" Value="2" /&gt;
                &lt;/Items&gt;
            &lt;/RadzenCheckBoxList&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.ValueProperty">
            <summary>
            Gets or sets the value property.
            </summary>
            <value>The value property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.TextProperty">
            <summary>
            Gets or sets the text property.
            </summary>
            <value>The text property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.JustifyContent">
            <summary>
            Gets or sets the content justify.
            </summary>
            <value>The content justify.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.AlignItems">
            <summary>
            Gets or sets the items alignment.
            </summary>
            <value>The items alignment.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.Gap">
            <summary>
            Gets or sets the spacing between items
            </summary>
            <value>The spacing between items.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.Wrap">
            <summary>
            Gets or sets the wrap.
            </summary>
            <value>The wrap.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.DisabledProperty">
            <summary>
            Gets or sets the disabled property.
            </summary>
            <value>The disabled property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.ReadOnlyProperty">
            <summary>
            Gets or sets the read-only property.
            </summary>
            <value>The read-only property.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxList`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.AllowSelectAll">
            <summary>
            Gets or sets a value indicating whether the user can select all values. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if select all values is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.SelectAllText">
            <summary>
            Gets or sets the select all text.
            </summary>
            <value>The select all text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.Data">
            <summary>
            Gets or sets the data used to generate items.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxList`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxList`1.Items">
            <summary>
            Gets or sets the items that will be concatenated with generated items from Data.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxList`1.AddItem(Radzen.Blazor.RadzenCheckBoxListItem{`0})">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxList`1.RemoveItem(Radzen.Blazor.RadzenCheckBoxListItem{`0})">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxList`1.IsSelected(Radzen.Blazor.RadzenCheckBoxListItem{`0})">
            <summary>
            Determines whether the specified item is selected.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the specified item is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxList`1.SelectItem(Radzen.Blazor.RadzenCheckBoxListItem{`0})">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Radzen.Blazor.RadzenCheckBoxListItem`1">
            <summary>
            RadzenCheckBoxListItem component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxListItem`1.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxListItem`1.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxListItem`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxListItem`1.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenCheckBoxListItem`1"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxListItem`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenCheckBoxListItem`1.CheckBoxList">
            <summary>
            Gets or sets the CheckBox list.
            </summary>
            <value>The CheckBox list.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxListItem`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenCheckBoxListItem`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenColorPicker">
            <summary>
            RadzenColorPicker component.
            </summary>
            <example>
            <code>
            &lt;RadzenColorPicker @bind-Value=@color Change=@(args => Console.WriteLine($"Selected color: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.ToggleAriaLabel">
            <summary>
            Gets or sets the toggle popup aria label text.
            </summary>
            <value>The toggle popup aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.Open">
            <summary>
            Gets or sets the open callback.
            </summary>
            <value>The open callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.Close">
            <summary>
            Gets or sets the close callback.
            </summary>
            <value>The close callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.HexText">
            <summary>
            Gets or sets the hexadecimal color label text.
            </summary>
            <value>The hexadecimal text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.RedText">
            <summary>
            Gets or sets the red color label text.
            </summary>
            <value>The red text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.GreenText">
            <summary>
            Gets or sets the green color label text.
            </summary>
            <value>The green text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.BlueText">
            <summary>
            Gets or sets the blue color label text.
            </summary>
            <value>The blue text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.AlphaText">
            <summary>
            Gets or sets the alpha label text.
            </summary>
            <value>The alpha text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.ButtonText">
            <summary>
            Gets or sets the button text.
            </summary>
            <value>The button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.ShowButton">
            <summary>
            Gets or sets a value indicating whether button is shown.
            </summary>
            <value><c>true</c> if button shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.ShowHSV">
            <summary>
            Gets or sets a value indicating whether HSV is shown.
            </summary>
            <value><c>true</c> if HSV is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.ShowRGBA">
            <summary>
            Gets or sets a value indicating whether RGBA is shown.
            </summary>
            <value><c>true</c> if RGBA is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.ShowColors">
            <summary>
            Gets or sets a value indicating whether colors are shown.
            </summary>
            <value><c>true</c> if colors are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPicker.PopupRenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
            <value>The render mode.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenColorPicker.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColorPicker.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColorPicker.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenColorPickerItem">
            <summary>
            RadzenColorPickerItem component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPickerItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColorPickerItem.ColorPicker">
            <summary>
            Gets or sets the color picker.
            </summary>
            <value>The color picker.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenColumn">
            <summary>
            RadzenColumn component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.SizeXS">
            <summary>
            Gets or sets the XS size.
            </summary>
            <value>The XS size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.SizeSM">
            <summary>
            Gets or sets the SM size.
            </summary>
            <value>The SM size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.SizeMD">
            <summary>
            Gets or sets the MD size.
            </summary>
            <value>The MD size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.SizeLG">
            <summary>
            Gets or sets the LG size.
            </summary>
            <value>The LG size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.SizeXL">
            <summary>
            Gets or sets the XL size.
            </summary>
            <value>The XL size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.SizeXX">
            <summary>
            Gets or sets the XX size.
            </summary>
            <value>The XX size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OffsetXS">
            <summary>
            Gets or sets the XS offset.
            </summary>
            <value>The XS offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OffsetSM">
            <summary>
            Gets or sets the SM offset.
            </summary>
            <value>The SM offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OffsetMD">
            <summary>
            Gets or sets the MD offset.
            </summary>
            <value>The MD offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OffsetLG">
            <summary>
            Gets or sets the LG offset.
            </summary>
            <value>The LG offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OffsetXL">
            <summary>
            Gets or sets the XL offset.
            </summary>
            <value>The XL offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OffsetXX">
            <summary>
            Gets or sets the XX offset.
            </summary>
            <value>The XX offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OrderXS">
            <summary>
            Gets or sets the XS order.
            </summary>
            <value>The XS order.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OrderSM">
            <summary>
            Gets or sets the SM order.
            </summary>
            <value>The SM order.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OrderMD">
            <summary>
            Gets or sets the MD order.
            </summary>
            <value>The MD order.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OrderLG">
            <summary>
            Gets or sets the LG order.
            </summary>
            <value>The LG order.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OrderXL">
            <summary>
            Gets or sets the XL order.
            </summary>
            <value>The XL order.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumn.OrderXX">
            <summary>
            Gets or sets the XX order.
            </summary>
            <value>The XX order.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenColumn.GetStyle">
            <summary>
            Gets the final CSS style rendered by the component. Combines it with a <c>style</c> custom attribute.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenColumn.GetComponentStyle">
            <summary>
            Gets the component CSS style.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenColumn.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenColumnOptions">
            <summary>
            Common configuration of <see cref="T:Radzen.Blazor.RadzenColumnSeries`1" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnOptions.Radius">
            <summary>
            Gets or sets the border radius of the bars. 
            </summary>
            <value>The radius. Values greater than <c>0</c> make rounded corners.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnOptions.Margin">
            <summary>
            Gets or sets the margin between columns.
            </summary>
            <value>The margin. By default set to <c>10</c></value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnOptions.Width">
            <summary>
            Gets or sets the width of all columns in pixels. By default it is automatically calculated depending on the chart width.
            </summary>
            <value>The pixel width of the column. By default set to <c>null</c></value>
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnOptions.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnOptions.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenColumnSeries`1">
            <summary>
            Renders column series in <see cref="T:Radzen.Blazor.RadzenChart" />
            </summary>
            <typeparam name="TItem">The type of the series data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.Fill">
            <summary>
            Specifies the fill (background color) of the column series.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.Fills">
            <summary>
            Specifies a list of colors that will be used to set the individual column backgrounds.
            </summary>
            <value>The fills.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.Stroke">
            <summary>
            Specifies the stroke (border color) of the column series.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.Strokes">
            <summary>
            Specifies a list of colors that will be used to set the individual column borders.
            </summary>
            <value>The strokes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke (border).
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.LineType">
            <summary>
            Gets or sets the type of the line used to render the column border.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.FillRange">
            <summary>
            Gets or sets the color range of the fill.
            </summary>
            <value>The color range of the fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.StrokeRange">
            <summary>
            Gets or sets the color range of the stroke.
            </summary>
            <value>The color range of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenColumnSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnSeries`1.TooltipX(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnSeries`1.TooltipY(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnSeries`1.DataAt(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenColumnSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.CompareOperator">
            <summary>
            Specifies the comparison operation used by a <see cref="T:Radzen.Blazor.RadzenCompareValidator" />
            </summary>
        </member>
        <member name="F:Radzen.Blazor.CompareOperator.Equal">
            <summary>
            Check if values are equal.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.CompareOperator.GreaterThan">
            <summary>
            Check if a value is greater than another value.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.CompareOperator.GreaterThanEqual">
            <summary>
            Check if a value is greater than or equal to another value.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.CompareOperator.LessThan">
            <summary>
            Check if a value is less than another value.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.CompareOperator.LessThanEqual">
            <summary>
            Check if a value is less than or equal to another value.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.CompareOperator.NotEqual">
            <summary>
            Check if values are not equal.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenCompareValidator">
            <summary>
            A validator component which compares a component value with a specified value.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
               &lt;RadzenPassword style="display: block" Name="Password" @bind-Value=@model.Password /&gt;
               &lt;RadzenPassword style="display: block" Name="RepeatPassword" @bind-Value=@model.RepeatPassword /&gt;
               &lt;RadzenCompareValidator Value=@model.Password Component="RepeatPassword" Text="Passwords should be the same"  Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            @code {
               class Model
               {
                 public string Password { get; set; }
                 public double Value { get; set; }
                 public string RepeatPassword { get; set; }
               }
               Model model = new Model();
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenCompareValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid. Set to <c>"Value should match"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCompareValidator.Value">
            <summary>
            Specifies the value to compare with.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCompareValidator.Operator">
            <summary>
            Specifies the comparison operator. Set to <c>CompareOperator.Equal</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCompareValidator.ValidateOnComponentValueChange">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenCompareValidator"/> should be validated on value change of the specified Component.
            </summary>
            <value><c>true</c> if should be validated; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenCompareValidator.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenCompareValidator.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenCompareValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenContent">
            <summary>
            RadzenContent component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenContent.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenContent.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenContentContainer">
            <summary>
            RadzenContentContainer component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenContentContainer.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenContextMenu">
            <summary>
            RadzenContextMenu component.
            </summary>
            <example>
            <code>
            @inject ContextMenuService ContextMenuService
            
            &lt;RadzenButton Text="Show context menu" ContextMenu=@(args => ShowContextMenuWithItems(args)) /&gt;
            
            @code {
              void ShowContextMenuWithItems(MouseEventArgs args)
              {
                ContextMenuService.Open(args,
                    new List&lt;ContextMenuItem&gt; {
                        new ContextMenuItem() { Text = "Context menu item 1", Value = 1 },
                        new ContextMenuItem() { Text = "Context menu item 2", Value = 2 },
                        new ContextMenuItem() { Text = "Context menu item 3", Value = 3 },
                 }, OnMenuItemClick);
              }
              
              void OnMenuItemClick(MenuItemEventArgs args)
              {
                Console.WriteLine($"Menu item with Value={args.Value} clicked");
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenContextMenu.UniqueID">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenContextMenu.Service">
            <summary>
            Gets or sets the ContextMenuService.
            </summary>
            <value>The ContextMenuService.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenContextMenu.Open(Microsoft.AspNetCore.Components.Web.MouseEventArgs,Radzen.ContextMenuOptions)">
            <summary>
            Opens the menu.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenContextMenu.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenContextMenu.Reference">
            <summary>
            Gets the reference for the current component.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenContextMenu.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenContextMenu.CloseMenu">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenContextMenu.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenContextMenu.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenCustomValidator">
             <summary>
             A validator component which compares a component value with a specified value.
             Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
             </summary>
             <example>
             <code>
             &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
                &lt;RadzenTextBox Name="Email" @bind-Value=@model.Email /&gt;
                &lt;RadzenCustomValidator Value=@model.Email Component="Email" Text="Email must be unique" Validator="@(() => ValidateNewEmail(model.Email))" Style="position: absolute" /&gt;
             &lt;/RadzenTemplateForm&gt;
             @code {
                class Model
                {
                     public string Email { get; set; }
                }
                Model model = new Model();
            
                string[] emails = new string[] { "andy@smith" };
            
                bool ValidateNewEmail(string email)
                {
                    return !emails.Any(e => e.ToUpper().Equals(email.ToUpper()));
                }
             }
             </code>
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenCustomValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid. Set to <c>"Value should match"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenCustomValidator.Validator">
            <summary>
            Specifies the function which validates the component value. Must return <c>true</c> if the component is valid.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenCustomValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenDataAnnotationValidator">
            <summary>
            A validator component which validates a component value using the data annotations
            defined on the corresponding model property.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="UserModel" Data=@user&gt;
               &lt;RadzenTextBox style="display: block" Name="Name" @bind-Value=@user.Name /&gt;
               &lt;RadzenFieldValidator Component="Name" /&gt;
            &lt;/RadzenTemplateForm&gt;
            @code {
               class UserModel
               {
                  [Required(ErrorMessage = "Name is required.")]
                  [StringLength(50, ErrorMessage = "Name must be less than 50 characters.")]
                  public string Name { get; set; }
               }
               UserModel user = new UserModel();
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataAnnotationValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid.
            The message is generated from the data annotation attributes applied to the model property.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataAnnotationValidator.MessageSeparator">
            <summary>
            Gets or sets the separator used to join multiple validation messages.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataAnnotationValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenDataFilter`1">
            <summary>
            RadzenDataFilter component.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilter`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenDataFilter`1._data">
            <summary>
            The data
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.Auto">
            <summary>
            Gets or sets a value indicating whether this filter is automatic.
            </summary>
            <value><c>true</c> if filter automatic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.Filters">
            <summary>
            Gets or sets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.LogicalFilterOperator">
            <summary>
            Gets or sets the logical filter operator.
            </summary>
            <value>The logical filter operator.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.FilterCaseSensitivity">
            <summary>
            Gets or sets the filter case sensitivity.
            </summary>
            <value>The filter case sensitivity.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.FilterText">
            <summary>
            Gets or sets the filter text.
            </summary>
            <value>The filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.EnumFilterSelectText">
            <summary>
            Gets or sets the enum filter select text.
            </summary>
            <value>The enum filter select text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.AndOperatorText">
            <summary>
            Gets or sets the and operator text.
            </summary>
            <value>The and operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.OrOperatorText">
            <summary>
            Gets or sets the or operator text.
            </summary>
            <value>The or operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.ApplyFilterText">
            <summary>
            Gets or sets the apply filter text.
            </summary>
            <value>The apply filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.ClearFilterText">
            <summary>
            Gets or sets the clear filter text.
            </summary>
            <value>The clear filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.AddFilterText">
            <summary>
            Gets or sets the add filter text.
            </summary>
            <value>The add filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.RemoveFilterText">
            <summary>
            Gets or sets the remove filter text.
            </summary>
            <value>The remove filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.AddFilterGroupText">
            <summary>
            Gets or sets the add filter group text.
            </summary>
            <value>The add filter group text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.EqualsText">
            <summary>
            Gets or sets the equals text.
            </summary>
            <value>The equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.NotEqualsText">
            <summary>
            Gets or sets the not equals text.
            </summary>
            <value>The not equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.LessThanText">
            <summary>
            Gets or sets the less than text.
            </summary>
            <value>The less than text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.LessThanOrEqualsText">
            <summary>
            Gets or sets the less than or equals text.
            </summary>
            <value>The less than or equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.GreaterThanText">
            <summary>
            Gets or sets the greater than text.
            </summary>
            <value>The greater than text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.GreaterThanOrEqualsText">
            <summary>
            Gets or sets the greater than or equals text.
            </summary>
            <value>The greater than or equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.EndsWithText">
            <summary>
            Gets or sets the ends with text.
            </summary>
            <value>The ends with text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.ContainsText">
            <summary>
            Gets or sets the contains text.
            </summary>
            <value>The contains text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.DoesNotContainText">
            <summary>
            Gets or sets the does not contain text.
            </summary>
            <value>The does not contain text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.InText">
            <summary>
            Gets or sets the in operator text.
            </summary>
            <value>The in operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.NotInText">
            <summary>
            Gets or sets the not in operator text.
            </summary>
            <value>The not in operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.StartsWithText">
            <summary>
            Gets or sets the starts with text.
            </summary>
            <value>The starts with text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.IsNotNullText">
            <summary>
            Gets or sets the not null text.
            </summary>
            <value>The not null text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.IsNullText">
            <summary>
            Gets or sets the is null text.
            </summary>
            <value>The null text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.IsEmptyText">
            <summary>
            Gets or sets the is empty text.
            </summary>
            <value>The empty text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.IsNotEmptyText">
            <summary>
            Gets or sets the is not empty text.
            </summary>
            <value>The not empty text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.CustomText">
            <summary>
            Gets or sets the custom filter operator text.
            </summary>
            <value>The custom filter operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.AllowColumnFiltering">
            <summary>
            Gets or sets a value indicating whether the columns can be filtered.
            </summary>
            <value><c>true</c> if columns can be filtered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.UniqueFilters">
            <summary>
            Gets or sets a value indicating whether properties can be reused in the filter.
            </summary>
            <value><c>true</c>, if there is only one filter by property; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.PropertiesCollection">
            <summary>
            Gets the properties collection.
            </summary>
            <value>The properties collection.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilter`1.Filter">
            <summary>
            Recreates View using current Filters.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.ViewChanged">
            <summary>
            Gets or sets the view changed callback.
            </summary>
            <value>The view changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilter`1.FilterDateFormat">
            <summary>
            Gets or sets the filter date format.
            </summary>
            <value>The filter date format.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilter`1.ClearFilters">
            <summary>
            Clear filters.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilter`1.AddFilter(Radzen.CompositeFilterDescriptor)">
            <summary>
            Add filter.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilter`1.RemoveFilter(Radzen.CompositeFilterDescriptor)">
            <summary>
            Remove filter.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenDataFilterProperty`1">
            <summary>
            RadzenDataFilterProperty component.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenDataFilter`1" />
            </summary>
            <typeparam name="TItem">The type of the DataFilter item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.DataFilter">
            <summary>
            Gets or sets the DataFilter.
            </summary>
            <value>The DataFilter.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.OnInitialized">
            <summary>
            Called when initialized.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.GetVisible">
            <summary>
            Gets if the property is visible or not.
            </summary>
            <returns>System.Boolean.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.Property">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.FilterProperty">
            <summary>
            Gets or sets the filter property name.
            </summary>
            <value>The filter property name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.IsSelected">
            <summary>
            Gets or sets a value indicating whether this property is selected in the filter.
            </summary>
            <value><c>true</c>, if already selected; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.FilterTemplate">
            <summary>
            Gets or sets the filter template.
            </summary>
            <value>The filter template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.Type">
            <summary>
            Gets or sets the data type.
            </summary>
            <value>The data type.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.GetFilterProperty">
            <summary>
            Gets the filter property.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.FilterPropertyType">
            <summary>
            Gets the filter property type.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.GetFilterValue">
            <summary>
            Get property filter value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.GetFilterOperator">
            <summary>
            Get property filter operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.SetFilterValue(System.Object)">
            <summary>
            Set property filter value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.ClearFilters">
            <summary>
            Sets to default property filter values and operators.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.FilterOperator">
            <summary>
            Gets or sets the filter operator.
            </summary>
            <value>The filter operator.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataFilterProperty`1.FilterOperators">
            <summary>
            Gets or sets the filter operators.
            </summary>
            <value>The filter operators.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.SetFilterOperator(System.Nullable{Radzen.FilterOperator})">
            <summary>
            Set property filter operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.GetFilterOperators">
            <summary>
            Get possible property filter operators.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataFilterProperty`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenDataGrid`1">
            <summary>
            RadzenDataGrid component.
            </summary>
            <typeparam name="TItem">The type of the DataGrid data item.</typeparam>
            <example>
            <code>
            &lt;RadzenDataGrid @data=@orders TItem="Order" AllowSorting="true" AllowPaging="true" AllowFiltering="true"&gt;
                &lt;Columns&gt;
                    &lt;RadzenDataGridColumn TItem="Order" Property="OrderId" Title="OrderId" /&gt;
                    &lt;RadzenDataGridColumn TItem="Order" Property="OrderDate" Title="OrderDate" /&gt;
                &lt;/Columns&gt;
            &lt;/RadzenDataGrid&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.IsValid">
            <summary>
            Returns the validity of the DataGrid.
            </summary>
            <value><c>true</c> if all validators in the DataGrid a valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterRowActive">
            <summary>
            Returns wether the FilterRow is visible on the DataGrid.
            </summary>
            <value><c>true</c> if all conditions for showing the row with the filter controls are met otherwise <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowVirtualization">
            <summary>
            Gets or sets a value indicating whether this instance is virtualized.
            </summary>
            <value><c>true</c> if this instance is virtualized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.VirtualizationOverscanCount">
            <summary>
            Gets or sets a value that determines how many additional items will be rendered before and after the visible region. This help to reduce the frequency of rendering during scrolling. However, higher values mean that more elements will be present in the page.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Virtualize">
            <summary>
            Gets Virtualize component reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.RefreshDataAsync">
            <summary>
            Clears the cache and refreshes the Virtualize component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ResetLoadData">
            <summary>
            Reset the LoadData internal state
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.LoadColumnFilterData">
            <summary>
            Gets or sets the callback used to load column filter data for DataGrid FilterMode.CheckBoxList filter mode.
            </summary>
            <value>The load filter data event callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.LoadChildData">
            <summary>
            Gets or sets the load child data callback.
            </summary>
            <value>The load child data callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ExpandChildItemAriaLabel">
            <summary>
            Gets or sets the expand child item aria label text.
            </summary>
            <value>The expand child item aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ExpandGroupAriaLabel">
            <summary>
            Gets or sets the expand group aria label text.
            </summary>
            <value>The expand group aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterToggleAriaLabel">
            <summary>
            Gets or sets the date simple filter toggle aria label text.
            </summary>
            <value>The date simple filter toggle aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowCompositeDataCells">
            <summary>
            Gets or sets a value indicating whether DataGrid data cells will follow the header cells structure in composite columns.
            </summary>
            <value><c>true</c> if DataGrid data cells will follow the header cells structure in composite columns; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ShowEmptyMessage">
            <summary>
            Gets or sets a value indicating whether DataGrid data body show empty message.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ShowHeader">
            <summary>
            Gets or sets value if headers are shown.
            </summary>
            <value>If headers are shown value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Responsive">
            <summary>
            Gets or sets a value indicating whether DataGrid is responsive.
            </summary>
            <value><c>true</c> if DataGrid is Responsive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EnumFilterTranslationFunc">
            <summary>
            Allows to define a custom function for enums DisplayAttribute Description property value translation in datagrid
            Enum filters.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenDataGrid`1._groupedPagedView">
            <summary>
            The grouped and paged View
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupedPagedView">
            <summary>
            Gets the view grouped and paged.
            </summary>
            <value>The grouped paged view.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Group">
            <summary>
            Gets or sets the column group callback.
            </summary>
            <value>The column group callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.DateFilterOperatorStyle(Radzen.Blazor.RadzenDataGridColumn{`0},Radzen.FilterOperator)">
            <summary>
            The filter operator style for dates.
            </summary>
            <param name="column">The column.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.KeyDown">
            <summary>
            Gets or sets key down callback.
            </summary>
            <value>The key down callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handles the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnFilterKeyPress(System.EventArgs,Radzen.Blazor.RadzenDataGridColumn{`0})">
            <summary>
            Called when filter key pressed.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ApplyDateFilterByFilterOperator(Radzen.Blazor.RadzenDataGridColumn{`0},Radzen.FilterOperator)">
            <summary>
            Applies the date filter by filter operator.
            </summary>
            <param name="column">The column.</param>
            <param name="filterOperator">The filter operator.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.HeaderTemplate">
            <summary>
            Gives the grid a custom header, allowing the adding of components to create custom tool bars in addtion to column grouping and column picker
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FooterTemplate">
            <summary>
            Gives the grid a custom footer, allowing the adding of components to create custom tool bars or custom pagination
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Columns">
            <summary>
            Gets or sets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.UpdatePickableColumns">
            <summary>
            Updates pickable columns.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.PickedColumnsChanged">
            <summary>
            Gets or sets the picked columns changed callback.
            </summary>
            <value>The picked columns changed callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnFilter(Microsoft.AspNetCore.Components.ChangeEventArgs,Radzen.Blazor.RadzenDataGridColumn{`0},System.Boolean,System.Boolean)">
            <summary>
            Called when filter.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
            <param name="column">The column.</param>
            <param name="force">if set to <c>true</c> [force].</param>
            <param name="isFirst">if set to <c>true</c> [is first].</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnsCollection">
            <summary>
            Gets the columns collection.
            </summary>
            <value>The columns collection.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Sort">
            <summary>
            Gets or sets the column sort callback.
            </summary>
            <value>The column sort callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Filter">
            <summary>
            Gets or sets the column filter callback.
            </summary>
            <value>The column filter callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterCleared">
            <summary>
            Gets or sets the column filter cleared callback.
            </summary>
            <value>The column filter callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterPopupRenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
            <value>The render mode.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ClearFilter(Radzen.Blazor.RadzenDataGridColumn{`0},System.Boolean,System.Boolean)">
            <summary>
            Сlear filter on the specified column
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ApplyFilter(Radzen.Blazor.RadzenDataGridColumn{`0},System.Boolean)">
            <summary>
            Apply filter to the specified column
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.LogicalFilterOperator">
            <summary>
            Gets or sets the logical filter operator.
            </summary>
            <value>The logical filter operator.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterMode">
            <summary>
            Gets or sets the filter mode.
            </summary>
            <value>The filter mode.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ExpandMode">
            <summary>
            Gets or sets the expand mode.
            </summary>
            <value>The expand mode.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ShowExpandColumn">
            <summary>
            Gets or sets whether the expandable indicator column is visible.
            </summary>
            <value>The expandable indicator column visibility.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EditMode">
            <summary>
            Gets or sets the edit mode.
            </summary>
            <value>The edit mode.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterIcon">
            <summary>
            Gets or set the filter icon to use.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterText">
            <summary>
            Gets or sets the filter text.
            </summary>
            <value>The filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EnumFilterSelectText">
            <summary>
            Gets or sets the enum filter select text.
            </summary>
            <value>The enum filter select text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EnumNullFilterText">
            <summary>
            Gets or sets the nullable enum for null value filter text.
            </summary>
            <value>The enum filter select text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AndOperatorText">
            <summary>
            Gets or sets the and operator text.
            </summary>
            <value>The and operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.OrOperatorText">
            <summary>
            Gets or sets the or operator text.
            </summary>
            <value>The or operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ApplyFilterText">
            <summary>
            Gets or sets the apply filter text.
            </summary>
            <value>The apply filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ClearFilterText">
            <summary>
            Gets or sets the clear filter text.
            </summary>
            <value>The clear filter text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EqualsText">
            <summary>
            Gets or sets the equals text.
            </summary>
            <value>The equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.NotEqualsText">
            <summary>
            Gets or sets the not equals text.
            </summary>
            <value>The not equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.LessThanText">
            <summary>
            Gets or sets the less than text.
            </summary>
            <value>The less than text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.LessThanOrEqualsText">
            <summary>
            Gets or sets the less than or equals text.
            </summary>
            <value>The less than or equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GreaterThanText">
            <summary>
            Gets or sets the greater than text.
            </summary>
            <value>The greater than text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GreaterThanOrEqualsText">
            <summary>
            Gets or sets the greater than or equals text.
            </summary>
            <value>The greater than or equals text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EndsWithText">
            <summary>
            Gets or sets the ends with text.
            </summary>
            <value>The ends with text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ContainsText">
            <summary>
            Gets or sets the contains text.
            </summary>
            <value>The contains text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.DoesNotContainText">
            <summary>
            Gets or sets the does not contain text.
            </summary>
            <value>The does not contain text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.InText">
            <summary>
            Gets or sets the in operator text.
            </summary>
            <value>The in operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.NotInText">
            <summary>
            Gets or sets the not in operator text.
            </summary>
            <value>The not in operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.StartsWithText">
            <summary>
            Gets or sets the starts with text.
            </summary>
            <value>The starts with text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.IsNotNullText">
            <summary>
            Gets or sets the not null text.
            </summary>
            <value>The not null text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.IsNullText">
            <summary>
            Gets or sets the is null text.
            </summary>
            <value>The null text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.IsEmptyText">
            <summary>
            Gets or sets the is empty text.
            </summary>
            <value>The empty text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.IsNotEmptyText">
            <summary>
            Gets or sets the is not empty text.
            </summary>
            <value>The not empty text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.CustomText">
            <summary>
            Gets or sets the custom filter operator text.
            </summary>
            <value>The custom filter operator text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterCaseSensitivity">
            <summary>
            Gets or sets the filter case sensitivity.
            </summary>
            <value>The filter case sensitivity.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterDelay">
            <summary>
            Gets or sets the filter delay.
            </summary>
            <value>The filter delay.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterDateFormat">
            <summary>
            Gets or sets the filter date format.
            </summary>
            <value>The filter date format.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowFilterDateInput">
            <summary>
            Gets or sets a value indicating whether input is allowed in filter DatePicker.
            </summary>
            <value><c>true</c> if input is allowed in filter DatePicker; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnWidth">
            <summary>
            Gets or sets the width of all columns.
            </summary>
            <value>The width of the columns.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EmptyText">
            <summary>
            Gets or sets the empty text shown when Data is empty collection.
            </summary>
            <value>The empty text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EmptyTemplate">
            <summary>
            Gets or sets the empty template shown when Data is empty collection.
            </summary>
            <value>The empty template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.EditTemplate">
            <summary>
            Gets or sets the edit template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.IsLoading">
            <summary>
            Gets or sets a value indicating whether this instance loading indicator is shown.
            </summary>
            <value><c>true</c> if this instance loading indicator is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowSorting">
            <summary>
            Gets or sets a value indicating whether sorting is allowed.
            </summary>
            <value><c>true</c> if sorting is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowMultiColumnSorting">
            <summary>
            Gets or sets a value indicating whether multi column sorting is allowed.
            </summary>
            <value><c>true</c> if multi column sorting is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ShowMultiColumnSortingIndex">
            <summary>
            Gets or sets a value indicating whether multi column sorting index is shown.
            </summary>
            <value><c>true</c> if multi column sorting index is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether filtering is allowed.
            </summary>
            <value><c>true</c> if filtering is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowColumnResize">
            <summary>
            Gets or sets a value indicating whether column resizing is allowed.
            </summary>
            <value><c>true</c> if column resizing is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowColumnReorder">
            <summary>
            Gets or sets a value indicating whether column reorder is allowed.
            </summary>
            <value><c>true</c> if column reorder is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowColumnPicking">
            <summary>
            Gets or sets a value indicating whether column picking is allowed.
            </summary>
            <value><c>true</c> if column picking is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ShowCellDataAsTooltip">
            <summary>
            Gets or sets a value indicating whether cell data should be shown as tooltip.
            </summary>
            <value><c>true</c> if cell data is shown as tooltip; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ShowColumnTitleAsTooltip">
            <summary>
            Gets or sets a value indicating whether column title should be shown as tooltip.
            </summary>
            <value><c>true</c> if column title is shown as tooltip; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnsShowingText">
            <summary>
            Gets or sets the column picker columns showing text.
            </summary>
            <value>The column picker columns showing text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnsPickerMaxSelectedLabels">
            <summary>
            Gets or sets the column picker max selected labels.
            </summary>
            <value>The column picker max selected labels.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllColumnsText">
            <summary>
            Gets or sets the column picker all columns text.
            </summary>
            <value>The column picker all columns text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnsText">
            <summary>
            Gets or sets the column picker columns text.
            </summary>
            <value>The column picker columns text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RemoveGroupAriaLabel">
            <summary>
            Gets or sets the remove group button aria label text.
            </summary>
            <value>The remove group button aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.SelectVisibleColumnsAriaLabel">
            <summary>
            Gets or sets the select visible columns aria label text.
            </summary>
            <value>The select visible columns aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.LogicalOperatorAriaLabel">
            <summary>
            Gets or sets the column logical filter value aria label text.
            </summary>
            <value>The the column logical filter value aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterOperatorAriaLabel">
            <summary>
            Gets or sets the column filter value aria label text.
            </summary>
            <value>The the column filter value aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.SecondFilterOperatorAriaLabel">
            <summary>
            Gets or sets the column filter value aria label text.
            </summary>
            <value>The the column filter value aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FilterValueAriaLabel">
            <summary>
            Gets or sets the column filter value aria label text.
            </summary>
            <value>The the column filter value aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.SecondFilterValueAriaLabel">
            <summary>
            Gets or sets the column filter value aria label text.
            </summary>
            <value>The the column filter value aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowPickAllColumns">
            <summary>
            Gets or sets a value indicating whether user can pick all columns in column picker.
            </summary>
            <value><c>true</c> if pick of all columns is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnsPickerAllowFiltering">
            <summary>
            Gets or sets a value indicating whether user can filter columns in column picker.
            </summary>
            <value><c>true</c> if user can filter columns in column picker; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowGrouping">
            <summary>
            Gets or sets a value indicating whether grouping is allowed.
            </summary>
            <value><c>true</c> if grouping is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.HideGroupedColumn">
            <summary>
            Gets or sets a value indicating whether grouped column should be hidden.
            </summary>
            <value><c>true</c> if grouped columns should be hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupFootersAlwaysVisible">
            <summary>
            Gets or sets a value indicating whether group footers are visible even when the group is collapsed.
            </summary>
            <value><c>true</c> if group footers are visible when the group is collapsed otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupHeaderTemplate">
            <summary>
            Gets or sets the group header template.
            </summary>
            <value>The group header template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupHeaderToggleTemplate">
            <summary>
            Gets or sets the group header with option to add custom toggle visibility button template.
            </summary>
            <value>The group header template with option to add custom toggle visibility.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupPanelText">
            <summary>
            Gets or sets the group panel text.
            </summary>
            <value>The group panel text.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnColumnResized(System.Int32,System.Double)">
            <summary>
            Called when column is resized.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnResized">
            <summary>
            Gets or sets the column resized callback.
            </summary>
            <value>The column resized callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnReordering">
            <summary>
            Gets or sets the column reordering callback.
            </summary>
            <value>The column reordering callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ColumnReordered">
            <summary>
            Gets or sets the column reordered callback.
            </summary>
            <value>The column reordered callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.View">
            <summary>
            Gets the view - Data with sorting, filtering and paging applied.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Value">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ValueChanged">
            <summary>
            Gets or sets the value changed callback.
            </summary>
            <value>The value changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowSelect">
            <summary>
            Gets or sets the row select callback.
            </summary>
            <value>The row select callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowDeselect">
            <summary>
            Gets or sets the row deselect callback.
            </summary>
            <value>The row deselect callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowClick">
            <summary>
            Gets or sets the row click callback.
            </summary>
            <value>The row click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowDoubleClick">
            <summary>
            Gets or sets the row double click callback.
            </summary>
            <value>The row double click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.CellClick">
            <summary>
            Gets or sets the cell click callback.
            </summary>
            <value>The cell click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.CellDoubleClick">
            <summary>
            Gets or sets the cell double click callback.
            </summary>
            <value>The cell double click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.CellContextMenu">
            <summary>
            Gets or sets the row click callback.
            </summary>
            <value>The row click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowExpand">
            <summary>
            Gets or sets the row expand callback.
            </summary>
            <value>The row expand callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupRowExpand">
            <summary>
            Gets or sets the group row expand callback.
            </summary>
            <value>The group row expand callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowCollapse">
            <summary>
            Gets or sets the row collapse callback.
            </summary>
            <value>The row collapse callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupRowCollapse">
            <summary>
            Gets or sets the group row collapse callback.
            </summary>
            <value>The group row collapse callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowRender">
            <summary>
            Gets or sets the row render callback. Use it to set row attributes.
            </summary>
            <value>The row render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GroupRowRender">
            <summary>
            Gets or sets the group row render callback. Use it to set group row attributes.
            </summary>
            <value>The group row render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.CellRender">
            <summary>
            Gets or sets the cell render callback. Use it to set cell attributes.
            </summary>
            <value>The cell render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.HeaderCellRender">
            <summary>
            Gets or sets the header cell render callback. Use it to set header cell attributes.
            </summary>
            <value>The cell render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.FooterCellRender">
            <summary>
            Gets or sets the footer cell render callback. Use it to set footer cell attributes.
            </summary>
            <value>The cell render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Render">
            <summary>
            Gets or sets the render callback.
            </summary>
            <value>The render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RenderAsync">
            <summary>
            Gets or sets the render async callback.
            </summary>
            <value>The render async callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.LoadSettings">
            <summary>
            Gets or sets the load settings callback.
            </summary>
            <value>The load settings callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnDataChanged">
            <summary>
            Called when data is changed.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.Reset(System.Boolean,System.Boolean)">
            <summary>
            Resets the DataGrid instance to initial state with no sorting, grouping and/or filtering, column visibility.
            </summary>
            <param name="resetColumnState">if set to <c>true</c> [reset column state].</param>
            <param name="resetRowState">if set to <c>true</c> [reset row state].</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnParametersSetAsync">
            <summary>
            Called when parameters set asynchronous.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllGroupsExpanded">
            <summary>
            Gets or sets a value indicating whether all groups should be expanded when DataGrid is grouped.
            </summary>
            <value><c>true</c> if groups are expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllGroupsExpandedChanged">
            <summary>
            Gets or sets the AllGroupsExpanded changed callback.
            </summary>
            <value>The AllGroupsExpanded changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.KeyProperty">
            <summary>
            Gets or sets the key property.
            </summary>
            <value>The key property.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ItemEquals(`0,`0)">
            <summary>
            Compares two items
            </summary>
            <param name="item">The first item</param>
            <param name="otherItem">The second item</param>
            <returns>Are items equal</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ExpandGroupItem(Radzen.Blazor.RadzenDataGridGroupRow{`0},System.Nullable{System.Boolean})">
            <summary>
            Expand group item.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ReloadSettings(System.Boolean)">
            <summary>
            Force load of the DataGrid Settings.
            This method triggers a reload of the DataGrid settings, optionally forcing a reload even if the settings are already loaded.
            </summary>
            <param name="forceReload">If true, forces a reload of the settings regardless of their current state. Default is false.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ExpandRow(`0)">
            <summary>
            Expands the row to show the content defined in Template property.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.IsRowExpanded(`0)">
            <summary>
            Gets boolean value indicating if the row is expanded or not.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.ExpandRows(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Expands a range of rows.
            </summary>
            <param name="items">The range of rows.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.CollapseAll">
            <summary>
            Collapse all rows that are expanded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.CollapseRows(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Collapse a range of rows.
            </summary>
            <param name="items">The range of rows.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowRowSelectOnRowClick">
            <summary>
            Gets or sets a value indicating whether DataGrid row can be selected on row click.
            </summary>
            <value><c>true</c> if DataGrid row can be selected on row click; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.AllowAlternatingRows">
            <summary>
            Gets or sets a value indicating whether DataGrid should use alternating row styles.
            </summary>
            <value><c>true</c> if DataGrid is using alternating row styles; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.ShowGroupExpandColumn">
            <summary>
            Gets or sets a value indicating whether to show group visibility column
            </summary>
            <value><c>true</c> if want to show left column with group visibility toggle, otherwise <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GridLines">
            <summary>
            Gets or sets the grid lines.
            </summary>
            <value>The grid lines.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.GotoFirstPageOnSort">
            <summary>
            Gets or sets the ability to automatically goto the first page when sorting is changed.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
            <value>The selection mode.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.SelectRow(`0,System.Boolean)">
            <summary>
            Selects the row.
            </summary>
            <param name="item">The item.</param>
            <param name="raiseEvent">Should raise RowSelect event.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowEdit">
            <summary>
            Gets or sets the row edit callback.
            </summary>
            <value>The row edit callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowUpdate">
            <summary>
            Gets or sets the row update callback.
            </summary>
            <value>The row update callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.RowCreate">
            <summary>
            Gets or sets the row create callback.
            </summary>
            <value>The row create callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.EditRow(`0)">
            <summary>
            Edits the row.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.EditRows(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Edits a range of rows.
            </summary>
            <param name="items">The range of rows.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.UpdateRow(`0)">
            <summary>
            Updates the row.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.CancelEditRow(`0)">
            <summary>
            Cancels the edited row.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.CancelEditRows(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Cancels the edit of a range of rows.
            </summary>
            <param name="items">The range of rows.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.IsRowInEditMode(`0)">
            <summary>
            Determines whether row in edit mode.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if row in edit mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.InsertRow(`0)">
            <summary>
            Inserts new row.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.InsertAfterRow(`0,`0)">
            <summary>
            Inserts new row after specific row item.
            </summary>
            <param name="itemToInsert">The item.</param>
            <param name="rowItem">Row item to insert after</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Groups">
            <summary>
            Gets or sets the group descriptors.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Sorts">
            <summary>
            Gets or sets the sort descriptors.
            </summary>
            <value>The sort.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OrderBy(System.String)">
            <summary>
            Orders the DataGrid by property name.
            </summary>
            <param name="property">The property name.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OrderByDescending(System.String)">
            <summary>
            Orders descending the DataGrid by property name.
            </summary>
            <param name="property">The property name.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Query">
            <summary>
            Gets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnPageSizeChanged(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.PageSizeChanged">
            <summary>
            Gets or sets the page size changed callback.
            </summary>
            <value>The page size changed callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.SaveSettings">
            <summary>
            Saves DataGrid settings as JSON string.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.LoadSettingsInternal(Radzen.DataGridSettings,System.Boolean)">
            <summary>
            Load DataGrid settings saved from the GetSettings() method.
            This internal method handles the actual loading or updating of the DataGrid settings.
            </summary>
            <param name="settings">The DataGridSettings object containing the settings to be loaded.</param>
            <param name="forceUpdate">If true, forces an update of the settings even if they haven't changed. Default is false.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.AreObjectsEqual(System.Object,System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="object1">The first object to compare.</param>
            <param name="object2">The second object to compare.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.Settings">
            <summary>
            Gets or sets DataGrid settings.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGrid`1.SettingsChanged">
            <summary>
            Gets or sets the settings changed callback.
            </summary>
            <value>The settings callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGrid`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenDataGridColumn`1">
            <summary>
            RadzenDataGridColumn component.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenDataGrid`1" />
            </summary>
            <typeparam name="TItem">The type of the DataGrid item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Grid">
            <summary>
            Gets or sets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Columns">
            <summary>
            Gets or sets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Parent">
            <summary>
            Gets or sets the parent column.
            </summary>
            <value>The parent column.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.ShowCellDataAsTooltip">
            <summary>
            Gets or sets a value indicating whether cell data should be shown as tooltip.
            </summary>
            <value><c>true</c> if cell data is shown as tooltip; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.AllowCheckBoxListVirtualization">
            <summary>
            Specifies wether CheckBoxList filter list virtualization is enabled. Set to <c>true</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterMode">
            <summary>
            Gets or sets the column filter mode.
            </summary>
            <value>The column filter mode.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.ColumnsCollection">
            <summary>
            Gets the child columns.
            </summary>
            <value>The child columns.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.UniqueID">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.OnInitialized">
            <summary>
            Called when initialized.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.OrderIndex">
            <summary>
            Gets or sets the order index.
            </summary>
            <value>The order index.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetOrderIndex">
            <summary>
            Gets the order index.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetVisible">
            <summary>
            Gets if the column is visible or not.
            </summary>
            <returns>System.Boolean.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.HeaderTooltip">
            <summary>
            Gets or sets the header tooltip.
            </summary>
            <value>The header tooltip.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetTitle">
            <summary>
            Gets the column title.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetTitle(System.String)">
            <summary>
            Sets the column title.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.ColumnPickerTitle">
            <summary>
            Gets or sets the title in column picker.
            Value of Title is used when ColumnPickerTitle is not set
            </summary>
            <value>The column picker title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Property">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.SortProperty">
            <summary>
            Gets or sets the sort property name.
            </summary>
            <value>The sort property name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.GroupProperty">
            <summary>
            Gets or sets the group property name.
            </summary>
            <value>The group property name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterProperty">
            <summary>
            Gets or sets the filter property name.
            </summary>
            <value>The filter property name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterPlaceholder">
            <summary>
            Gets or sets the filter placeholder.
            </summary>
            <value>The filter placeholder value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.CustomFilterExpression">
            <summary>
            Gets or sets the custom filter dynamic Linq dictionary.
            </summary>
            <value>The custom filter dynamic Linq dictionary.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetFilterPlaceholder">
            <summary>
            Gets the filter placeholder.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.SecondFilterValue">
            <summary>
            Gets or sets the second filter value.
            </summary>
            <value>The second filter value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.MinWidth">
            <summary>
            Gets or sets the min-width.
            </summary>
            <value>The min-width.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.MaxWidth">
            <summary>
            Gets or sets the max-width.
            </summary>
            <value>The max-width.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.CssClass">
            <summary>
            Gets or sets the CSS class applied to data cells.
            </summary>
            <value>The CSS class applied to data cells.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.CalculatedCssClass">
            <summary>
            Gets or sets a function that calculates the CSS class based on the <typeparamref name="TItem"/> value.
            </summary>
            <value>The dynamic CSS class applied to data cells.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.HeaderCssClass">
            <summary>
            Gets or sets the header CSS class applied to header cell.
            </summary>
            <value>The header CSS class applied to header cell.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FooterCssClass">
            <summary>
            Gets or sets the footer CSS class applied to footer cell.
            </summary>
            <value>The footer CSS class applied to footer cell.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.GroupFooterCssClass">
            <summary>
            Gets or sets the group footer CSS class applied to group footer cell.
            </summary>
            <value>The group footer CSS class applied to group footer cell.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.HeaderWhiteSpace">
            <summary>
            Gets or sets the header white space style.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.WhiteSpace">
            <summary>
            Gets or sets the white space style.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Filterable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is filterable.
            </summary>
            <value><c>true</c> if filterable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Sortable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is sortable.
            </summary>
            <value><c>true</c> if sortable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Frozen">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is frozen.
            </summary>
            <value><c>true</c> if frozen will disable horizontal scroll for the column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FrozenPosition">
            <summary>
            Gets or sets the frozen position this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/>
            </summary>
            <value><see cref="F:Radzen.FrozenColumnPosition.Left"/> or <see cref="F:Radzen.FrozenColumnPosition.Right"/>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Resizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is resizable.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Reorderable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is reorderable.
            </summary>
            <value><c>true</c> if reorderable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Groupable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is groupable.
            </summary>
            <value><c>true</c> if groupable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Pickable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDataGridColumn`1"/> is pickable - listed when DataGrid AllowColumnPicking is set to true.
            </summary>
            <value><c>true</c> if pickable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.TextAlign">
            <summary>
            Gets or sets the text align.
            </summary>
            <value>The text align.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.EditTemplate">
            <summary>
            Gets or sets the edit template.
            </summary>
            <value>The edit template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.IsInEditMode">
            <summary>
            Allows the column to override whether or not this column's the <see cref="P:Radzen.Blazor.RadzenDataGridColumn`1.EditTemplate" /> is visible at runtime.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.HeaderTemplate">
            <summary>
            Gets or sets the header template.
            </summary>
            <value>The header template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FooterTemplate">
            <summary>
            Gets or sets the footer template.
            </summary>
            <value>The footer template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.GroupFooterTemplate">
            <summary>
            Gets or sets the group footer template.
            </summary>
            <value>The group footer template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterTemplate">
            <summary>
            Gets or sets the filter template.
            </summary>
            <value>The filter template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterValueTemplate">
            <summary>
            Gets or sets the filter value template.
            </summary>
            <value>The filter value template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.SecondFilterValueTemplate">
            <summary>
            Gets or sets the second filter value template.
            </summary>
            <value>The second filter value template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.LogicalFilterOperator">
            <summary>
            Gets or sets the logical filter operator.
            </summary>
            <value>The logical filter operator.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.Type">
            <summary>
            Gets or sets the data type.
            </summary>
            <value>The data type.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FormatProvider">
            <summary>
            Gets or sets the IFormatProvider used for FormatString.
            </summary>
            <value>The IFormatProvider.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetValue(`0)">
            <summary>
            Gets the value for specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetStyle(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the cell style.
            </summary>
            <param name="forCell">if set to <c>true</c> [for cell].</param>
            <param name="isHeaderOrFooterCell">if set to <c>true</c> [is header or footer cell].</param>
            <param name="isForCol">if set to <c>true</c> [is for col element].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetSortProperty">
            <summary>
            Gets the sort property.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetGroupProperty">
            <summary>
            Gets the group property.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetFilterProperty">
            <summary>
            Gets the filter property.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterPropertyType">
            <summary>
            Gets the filter property type.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetSortOrder">
            <summary>
            Get column sort order.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetFilterValue">
            <summary>
            Get column filter value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetFilterOperator">
            <summary>
            Get column filter operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetSecondFilterValue">
            <summary>
            Get column second filter value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetSecondFilterOperator">
            <summary>
            Get column second filter operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetLogicalFilterOperator">
            <summary>
            Get column logical filter operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetCellClass">
            <summary>
            Get body column class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetHeaderClass">
            <summary>
            Get column header class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetFilterValue(System.Object,System.Boolean)">
            <summary>
            Set column filter value.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetFilterValueAsync(System.Object,System.Boolean)">
            <summary>
            Set column filter value and reload grid.
            </summary>
            <param name="value">Filter value.</param>
            <param name="isFirst"><c>true</c> if FilterValue; <c>false</c> for SecondFilterValue</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetCustomFilterExpression">
            <summary>
            Get custom filter linq.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetCustomFilterExpression(System.String)">
            <summary>
            Set column custom filter linq.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetCustomFilterExpressionAsync(System.String)">
            <summary>
            Set column custom filter linq and reload grid.
            </summary>
            <param name="value">Filter value.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.ClearFilters">
            <summary>
            Sets to default column filter values and operators.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterOperator">
            <summary>
            Gets or sets the filter operator.
            </summary>
            <value>The filter operator.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterOperators">
            <summary>
            Gets or sets the filter operators.
            </summary>
            <value>The filter operators.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataGridColumn`1.SecondFilterOperator">
            <summary>
            Gets or sets the second filter operator.
            </summary>
            <value>The second filter operator.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetFilterOperator(System.Nullable{Radzen.FilterOperator})">
            <summary>
            Set column filter operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetSecondFilterOperator(System.Nullable{Radzen.FilterOperator})">
            <summary>
            Set column second filter operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetLogicalFilterOperator(Radzen.LogicalFilterOperator)">
            <summary>
            Set column second logical operator.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.CloseFilter">
            <summary>
            Closes this column filter popup.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.SetWidth(System.String)">
            <summary>
            Set column width.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetWidth">
            <summary>
            Get column width.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetWidthOrGridSetting">
            <summary>
            Get column width if it's set, otherwise get a column width set on the grid.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetFilterOperators">
            <summary>
            Get possible column filter operators.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetFilterOperatorText(Radzen.FilterOperator)">
            <summary>
            Get filter operator text
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.ShowTimeForDateTimeFilter">
            <summary>
            Gets value indicating if the user can specify time in DateTime column filter.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.ShowUpDownForNumericFilter">
            <summary>
            Gets value indicating if up and down buttons are displayed in numeric column filter.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetColumnODataFilter(System.Boolean)">
            <summary>
            Gets an OData expression to filter by this column.
            </summary>
            <param name="second">Whether to use <see cref="P:Radzen.Blazor.RadzenDataGridColumn`1.SecondFilterValue"/> instead of <see cref="P:Radzen.Blazor.RadzenDataGridColumn`1.FilterValue"/></param>
            <returns>An OData expression to filter by this column.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetColumnODataFilter(System.Object,Radzen.FilterOperator)">
            <summary>
            Gets an OData expression to filter by this column.
            </summary>
            <param name="filterValue">The specific value to filter by</param>
            <param name="filterOperator">The operator used to compare to <paramref name="filterValue"/></param>
            <returns>An OData expression to filter by this column.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataGridColumn`1.GetSortIndex">
            <summary>
            Gets the column sort descriptor index indicating order of applied column sort in case of multiple sorting.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenDataGridRow`1">
            <summary>
            RadzenDataGridRow.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenDataList`1">
            <summary>
            RadzenDataList component.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <example>
            <code>
            &lt;RadzenDataList @data=@orders TItem="Order" AllowPaging="true" WrapItems="true"&gt;
                &lt;Template&gt;
                    @context.OrderId
                &lt;/Template&gt;
            &lt;/RadzenDataList&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataList`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDataList`1.ShowEmptyMessage">
            <summary>
            Gets or sets a value indicating whether DataList should show empty message.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataList`1.EmptyText">
            <summary>
            Gets or sets the empty text shown when Data is empty collection.
            </summary>
            <value>The empty text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataList`1.EmptyTemplate">
            <summary>
            Gets or sets the empty template shown when Data is empty collection.
            </summary>
            <value>The empty template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataList`1.WrapItems">
            <summary>
            Gets or sets a value indicating whether to wrap items.
            </summary>
            <value><c>true</c> if wrap items; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataList`1.AllowVirtualization">
            <summary>
            Gets or sets a value indicating whether this instance is virtualized.
            </summary>
            <value><c>true</c> if this instance is virtualized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataList`1.Virtualize">
            <summary>
            Gets Virtualize component reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDataList`1.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDataList`1.IsLoading">
            <summary>
            Gets or sets a value indicating whether this instance loading indicator is shown.
            </summary>
            <value><c>true</c> if this instance loading indicator is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenDatePicker`1">
            <summary>
            RadzenDatePicker component.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <example>
            <code>
            &lt;RadzenDatePicker @bind-Value=@someValue TValue="DateTime" Change=@(args => Console.WriteLine($"Selected date: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ShowCalendarWeek">
            <summary>
            Gets or sets a value indicating whether calendar week will be shown.
            </summary>
            <value><c>true</c> if calendar week is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.CalendarWeekTitle">
            <summary>
            Gets or sets the previous month aria label text.
            </summary>
            <value>The previous month aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ToggleAriaLabel">
            <summary>
            Gets or sets the toggle popup aria label text.
            </summary>
            <value>The toggle popup aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.OkAriaLabel">
            <summary>
            Gets or sets the OK button aria label text.
            </summary>
            <value>The OK button aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.PrevMonthAriaLabel">
            <summary>
            Gets or sets the previous month aria label text.
            </summary>
            <value>The previous month aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.NextMonthAriaLabel">
            <summary>
            Gets or sets the next month aria label text.
            </summary>
            <value>The next month aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ToggleAmPmAriaLabel">
            <summary>
            Gets or sets the toggle Am/Pm aria label text.
            </summary>
            <value>The toggle Am/Pm aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.NameValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.NameValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.Blazor.RadzenDatePicker`1"/> class.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.YearFormatter">
            <summary>
            Gets or sets the year formatter. Set to <c>FormatYear</c> by default.
            If set, this function will take precedence over <see cref="P:Radzen.Blazor.RadzenDatePicker`1.YearFormat"/>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.YearFormat">
            <summary>
            Gets ot sets the year format. Set to <c>yyyy</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.AllowClear">
            <summary>
            Gets or sets a value indicating whether value can be cleared.
            </summary>
            <value><c>true</c> if value can be cleared; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.TabIndex">
            <summary>
            Gets or sets the tab index.
            </summary>
            <value>The tab index.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Name">
            <summary>
            Gets or sets the name of the form component.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.InputClass">
            <summary>
            Gets or sets the input CSS class.
            </summary>
            <value>The input CSS class.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ButtonClass">
            <summary>
            Gets or sets the button CSS class.
            </summary>
            <value>The button CSS class.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Min">
            <summary>
            Gets or sets the Minimum Selectable Date.
            </summary>
            <value>The Minimum Selectable Date.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Max">
            <summary>
            Gets or sets the Maximum Selectable Date.
            </summary>
            <value>The Maximum Selectable Date.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.InitialViewDate">
            <summary>
            Gets or sets the Initial Date/Month View.
            </summary>
            <value>The Initial Date/Month View.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.DateRender">
            <summary>
            Gets or sets the date render callback. Use it to set attributes.
            </summary>
            <value>The date render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Kind">
            <summary>
            Gets or sets the kind of DateTime bind to control
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.CurrentDateChanged">
            <summary>
            Gets or set the current date changed callback.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound (ValueChanged callback has delegate).
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.FormattedValue">
            <summary>
            Gets the formatted value.
            </summary>
            <value>The formatted value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Form">
            <summary>
            Gets or sets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenDatePicker`1.input">
            <summary>
            Gets input reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.ParseDate">
            <summary>
            Parses the date.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ParseInput">
            <summary>
            Parse the input using an function outside the Radzen-library
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Inline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDatePicker`1"/> is inline - only Calender.
            </summary>
            <value><c>true</c> if inline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.TimeOnly">
            <summary>
            Gets or sets a value indicating whether time only can be set.
            </summary>
            <value><c>true</c> if time only can be set; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether read only.
            </summary>
            <value><c>true</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.AllowInput">
            <summary>
            Gets or sets a value indicating whether input is allowed.
            </summary>
            <value><c>true</c> if input is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ShowButton">
            <summary>
            Gets or sets a value indicating whether popup datepicker button is shown.
            </summary>
            <value><c>true</c> if need show button open datepicker popup; <c>false</c> if need hide button, click for input field open datepicker popup.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ShowInput">
            <summary>
            Gets or sets a value indicating whether the input box is shown. Ignored if ShowButton is false.
            </summary>
            <value><c>true</c> to show the input box; <c>false</c> to hide the input box.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDatePicker`1"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.FormFieldContext">
            <summary>
            Gets or sets the FormFieldContext of the component
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ShowDays">
            <summary>
            Gets or sets a value indicating whether days part is shown.
            </summary>
            <value><c>true</c> if days part is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ShowTime">
            <summary>
            Gets or sets a value indicating whether time part is shown.
            </summary>
            <value><c>true</c> if time part is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ShowSeconds">
            <summary>
            Gets or sets a value indicating whether seconds are shown.
            </summary>
            <value><c>true</c> if seconds are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.HoursStep">
            <summary>
            Gets or sets the hours step.
            </summary>
            <value>The hours step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.MinutesStep">
            <summary>
            Gets or sets the minutes step.
            </summary>
            <value>The minutes step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.SecondsStep">
            <summary>
            Gets or sets the seconds step.
            </summary>
            <value>The seconds step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.PadHours">
            <summary>
            Gets or sets a value indicating whether the hour picker is padded with a leading zero.
            </summary>
            <value><c>true</c> if hour component is padded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.PadMinutes">
            <summary>
            Gets or sets a value indicating whether the minute picker is padded with a leading zero.
            </summary>
            <value><c>true</c> if hour component is padded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.PadSeconds">
            <summary>
            Gets or sets a value indicating whether the second picker is padded with a leading zero.
            </summary>
            <value><c>true</c> if hour component is padded; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenDatePicker`1.StepType.Hours">
            <summary>
            The hours
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenDatePicker`1.StepType.Minutes">
            <summary>
            The minutes
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenDatePicker`1.StepType.Seconds">
            <summary>
            The seconds
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ShowTimeOkButton">
            <summary>
            Gets or sets a value indicating whether time ok button is shown.
            </summary>
            <value><c>true</c> if time ok button is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.DateFormat">
            <summary>
            Gets or sets the date format.
            </summary>
            <value>The date format.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.YearRange">
            <summary>
            Gets or sets the year range.
            </summary>
            <value>The year range.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.HourFormat">
            <summary>
            Gets or sets the hour format.
            </summary>
            <value>The hour format.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Placeholder">
            <summary>
            Gets or sets the input placeholder.
            </summary>
            <value>The input placeholder.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.Change">
            <summary>
            Gets or sets the change callback.
            </summary>
            <value>The change callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ValueChanged">
            <summary>
            Gets or sets the value changed callback.
            </summary>
            <value>The value changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.FooterTemplate">
            <summary>
            Gets or sets the footer template.
            </summary>
            <value>The footer template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.CurrentPlaceholder">
            <summary> Gets the current placeholder. Returns empty string if this component is inside a RadzenFormField.</summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.Close">
            <summary>
            Closes this instance popup.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.EditContext">
            <summary>
            Gets or sets the edit context.
            </summary>
            <value>The edit context.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.FieldIdentifier">
            <summary>
            Gets the field identifier.
            </summary>
            <value>The field identifier.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.ValueExpression">
            <summary>
            Gets or sets the value expression.
            </summary>
            <value>The value expression.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenDatePicker`1.PopupRenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
            <value>The render mode.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDatePicker`1.FocusAsync">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.Blazor.RadzenDayView">
            <summary>
            Displays the appointments in a single day in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data="@appointments"&gt;
                &lt;RadzenDayView /&gt;
            &lt;/RadzenScheduler&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.Icon">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.Text">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.TimeFormat">
            <summary>
            Gets or sets the time format.
            </summary>
            <value>The time format. Set to <c>h tt</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
            <value>The end time.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.MinutesPerSlot">
            <summary>
            Gets or sets slot size in minutes. Set to <c>30</c> by default.
            </summary>
            <value>The slot size in minutes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.Title">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.StartDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenDayView.EndDate">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDayView.Next">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDayView.Prev">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenDonutSeries`1">
            <summary>
            Renders donut series in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
            <typeparam name="TItem">The type of the series data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenDonutSeries`1.InnerRadius">
            <summary>
            Gets or sets the inner radius of the donut.
            </summary>
            <value>The inner radius.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDonutSeries`1.TitleTemplate">
            <summary>
            Gets or sets the title template.
            </summary>
            <value>The title template.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenDropDown`1">
            <summary>
            RadzenDropDown component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenDropDown @bind-Value=@customerID TValue="string" Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => Console.WriteLine($"Selected CustomerID: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.ValueTemplate">
            <summary>
            Gets or sets the value template.
            </summary>
            <value>The value template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.EmptyTemplate">
            <summary>
            Gets or sets the empty template.
            </summary>
            <value>The empty template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.OpenOnFocus">
            <summary>
            Gets or sets a value indicating whether popup should open on focus. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if popup should open on focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.ClearSearchAfterSelection">
            <summary>
            Gets or sets a value indicating whether search field need to be cleared after selection. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if need to be cleared; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.FilterPlaceholder">
            <summary>
            Gets or sets the filter placeholder.
            </summary>
            <value>The filter placeholder.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.FilterAutoCompleteType">
            <summary>
            Gets or Sets the filter autocomplete type.
            </summary>
            <value>The filter autocomplete type. Default: Off</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.ItemRender">
            <summary>
            Gets or sets the row render callback. Use it to set row attributes.
            </summary>
            <value>The row render callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.OpenPopup(System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens the popup.
            </summary>
            <param name="key">The key.</param>
            <param name="isFilter">if set to <c>true</c> [is filter].</param>
            <param name="isFromClick">if set to <c>true</c> [is from click].</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.MaxSelectedLabels">
            <summary>
            Gets or sets the number of maximum selected labels.
            </summary>
            <value>The number of maximum selected labels.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.PopupStyle">
            <summary>
            Gets or sets the Popup height.
            </summary>
            <value>The number Popup height.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.Chips">
            <summary>
            Gets or sets a value indicating whether the selected items will be displayed as chips. Set to <c>false</c> by default.
            Requires <see cref="P:Radzen.DropDownBase`1.Multiple" /> to be set to <c>true</c>.
            </summary>
            <value><c>true</c> to display the selected items as chips; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.SelectedItemsText">
            <summary>
            Gets or sets the selected items text.
            </summary>
            <value>The selected items text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.SelectAllText">
            <summary>
            Gets or sets the select all text.
            </summary>
            <value>The select all text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.Open">
            <summary>
            Callback for when a dropdown is opened.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDown`1.Close">
            <summary>
            Callback for when a dropdown is closed.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.SelectAll">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.OnSelectItem(System.Object,System.Boolean)">
            <summary>
            Called when item is selected.
            </summary>
            <param name="item">The item.</param>
            <param name="isFromKey">if set to <c>true</c> [is from key].</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDown`1.OnClose">
            <summary>
            Called when popup is closed.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenDropDownDataGrid`1">
            <summary>
            RadzenDropDownDataGrid component.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <example>
            <code>
            &lt;RadzenDropDownDataGrid @bind-Value=@customerID TValue="string" Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => Console.WriteLine($"Selected CustomerID: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.RowRender">
            <summary>
            Gets or sets the row render callback. Use it to set row attributes.
            </summary>
            <value>The row render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.CellRender">
            <summary>
            Gets or sets the cell render callback. Use it to set cell attributes.
            </summary>
            <value>The cell render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.FooterTemplate">
            <summary>
            Gets or sets the footer template.
            </summary>
            <value>The footer template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.Chips">
            <summary>
            Gets or sets a value indicating whether the selected items will be displayed as chips. Set to <c>false</c> by default.
            Requires <see cref="P:Radzen.DropDownBase`1.Multiple" /> to be set to <c>true</c>.
            </summary>
            <value><c>true</c> to display the selected items as chips; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.GridLines">
            <summary>
            Gets or sets the grid lines.
            </summary>
            <value>The grid lines.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PopupStyle">
            <summary>
            Gets or sets the Popup style.
            </summary>
            <value>The number Popup style.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OnCellRender(Radzen.DataGridCellRenderEventArgs{System.Object})">
            <summary>
            Executes CellRender callback.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OnRowRender(Radzen.RowRenderEventArgs{System.Object})">
            <summary>
            Executes RowRender callback.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.OpenOnFocus">
            <summary>
            Gets or sets a value indicating whether popup should open on focus. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if popup should open on focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OpenPopup(System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens the popup.
            </summary>
            <param name="key">The key.</param>
            <param name="isFilter">if set to <c>true</c> [is filter].</param>
            <param name="isFromClick">if set to <c>true</c> [is from click].</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.ValueTemplate">
            <summary>
            Gets or sets the value template.
            </summary>
            <value>The value template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.Density">
            <summary>
            Gets or sets a value indicating DataGrid density.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.EmptyTemplate">
            <summary>
            Gets or sets the empty template shown when Data is empty collection.
            </summary>
            <value>The empty template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PagerAlwaysVisible">
            <summary>
            Gets or sets a value indicating whether pager is visible even when not enough data for paging.
            </summary>
            <value><c>true</c> if pager is visible even when not enough data for paging otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PagerHorizontalAlign">
            <summary>
            Gets or sets the horizontal align.
            </summary>
            <value>The horizontal align.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AllowColumnResize">
            <summary>
            Gets or sets a value indicating whether column resizing is allowed.
            </summary>
            <value><c>true</c> if column resizing is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.ColumnWidth">
            <summary>
            Gets or sets the width of all columns.
            </summary>
            <value>The width of all columns.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.Responsive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenDropDownDataGrid`1"/> is responsive.
            </summary>
            <value><c>true</c> if responsive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.ShowSearch">
            <summary>
            Gets or sets a value indicating whether search button is shown.
            </summary>
            <value><c>true</c> if search button is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.Add">
            <summary>
            Gets or sets the action to be executed when the Add button is clicked.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.ShowAdd">
            <summary>
            Gets or sets a value indicating whether the create button is shown.
            </summary>
            <value><c>true</c> if the create button is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PreserveRowSelectionOnPaging">
            <summary>
            Gets or sets preserving the selected row index on pageing.
            </summary>
            <value>Row selection preservation on pageing.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PageNumbersCount">
            <summary>
            Gets or sets the page numbers count.
            </summary>
            <value>The page numbers count.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.ShowPagingSummary">
            <summary>
            Gets or sets the pager summary visibility.
            </summary>
            <value>The pager summary visibility.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PagingSummaryFormat">
            <summary>
            Gets or sets the pager summary format.
            </summary>
            <value>The pager summary format.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.FirstPageTitle">
            <summary>
            Gets or sets the pager's first page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.FirstPageAriaLabel">
            <summary>
            Gets or sets the pager's first page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PrevPageTitle">
            <summary>
            Gets or sets the pager's previous page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PrevPageAriaLabel">
            <summary>
            Gets or sets the pager's previous page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.LastPageTitle">
            <summary>
            Gets or sets the pager's last page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.LastPageAriaLabel">
            <summary>
            Gets or sets the pager's last page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.NextPageTitle">
            <summary>
            Gets or sets the pager's next page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.NextPageAriaLabel">
            <summary>
            Gets or sets the pager's next page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PageTitleFormat">
            <summary>
            Gets or sets the pager's numeric page number buttons' title attributes.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.PageAriaLabelFormat">
            <summary>
            Gets or sets the pager's numeric page number buttons' aria-label attributes.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.EmptyText">
            <summary>
            Gets or sets the empty text.
            </summary>
            <value>The empty text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.SearchTextPlaceholder">
            <summary>
            Gets or sets the search input placeholder text.
            </summary>
            <value>The search input placeholder text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AddAriaLabel">
            <summary>
            Gets or sets the add button aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.Columns">
            <summary>
            Gets or sets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.MaxSelectedLabels">
            <summary>
            Gets or sets the number of maximum selected labels.
            </summary>
            <value>The maximum selected labels.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.SelectedItemsText">
            <summary>
            Gets or sets the selected items text.
            </summary>
            <value>The selected items text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.FocusFilterOnPopup">
            <summary>
            Gets or sets whether popup automatically focuses on filter input.
            </summary>
            <value><c>true</c> if filter input should auto focus when opened; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenDropDownDataGrid`1.popup">
            <summary>
            Gets popup element reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Called when [after render asynchronous].
            </summary>
            <param name="firstRender">if set to <c>true</c> [first render].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OnDataChanged">
            <summary>
            Called when data is changed.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.View">
            <summary>
            Gets the view. The data with sorting, filtering and paging applied.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.SelectItemFromValue(System.Object)">
            <summary>
            Selects the item from value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.HandleKeyPress(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OnFilter(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Filter" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.IsLoading">
            <summary>
            Gets or sets a value indicating whether this instance loading indicator is shown.
            </summary>
            <value><c>true</c> if this instance loading indicator is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AllowSorting">
            <summary>
            Gets or sets a value indicating whether sorting is allowed.
            </summary>
            <value><c>true</c> if sorting is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether filtering is allowed.
            </summary>
            <value><c>true</c> if filtering is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AllowFilteringByAllStringColumns">
            <summary>
            Gets or sets a value indicating whether filtering by all string columns is allowed.
            </summary>
            <value><c>true</c> if filtering by all string columns is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AllowFilteringByWord">
            <summary>
            Gets or sets a value indicating whether filtering by each entered word in the search term, sperated by a space, is allowed.
            </summary>
            <value><c>true</c> if filtering by individual words is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AllowFilteringByWordCount">
            <summary>
            Gets or sets the AllowFilteringByWord max count.
            </summary>
            <value>The AllowFilteringByWord max count.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.AllowRowSelectOnRowClick">
            <summary>
            Gets or sets a value indicating whether DataGrid row can be selected on row click.
            </summary>
            <value><c>true</c> if DataGrid row can be selected on row click; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.CloseAndFocus">
            <summary>
            Closes the dropdown popup and sets focus to the input element.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OnChipRemove(System.Object)">
            <summary>
            Event handler for when an item is unselected by clicking a chip
            </summary>
            <param name="item">The item that is to be removed</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.OnAddClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropDownDataGrid`1.DataGrid">
            <summary>
            Handles the reference to the DataGrid component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropDownDataGrid`1.Reset">
            <summary>
            Resets component and deselects row
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenDropZone`1">
            <summary>
            RadzenDropZone component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZone`1.Value">
            <summary>
            Gets or sets the zone value used to compare items in container Selector function.
            </summary>
            <value>The zone value used to compare items in container Selector function.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZone`1.Footer">
            <summary>
            Gets or sets the Footer Templated
            The Footer Template is rendered below the items in the <see cref="T:Radzen.Blazor.RadzenDropZone`1" />
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropZone`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenDropZone`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenDropZoneContainer`1">
            <summary>
            RadzenDropZoneContainer component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZoneContainer`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZoneContainer`1.ItemSelector">
            <summary>
            Gets or sets the selector function for zone items.
            </summary>
            <value>The selector function for zone items.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZoneContainer`1.CanDrop">
            <summary>
            Gets or sets the function that checks if the item can be dropped in specific zone or item.
            </summary>
            <value>The function that checks if the item can be dropped in specific zone.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZoneContainer`1.ItemRender">
            <summary>
            Gets or sets the row render callback. Use it to set row attributes.
            </summary>
            <value>The row render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZoneContainer`1.Template">
            <summary>
            Gets or sets the template for zone items.
            </summary>
            <value>The template for zone items.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDropZoneContainer`1.Drop">
            <summary>
            The event callback raised on item drop.
            </summary>
            <value>The event callback raised on item drop.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropZoneContainer`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenDropZoneItem`1">
            <summary>
            RadzenDropZoneItem component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenDropZoneItem`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenEmailValidator">
            <summary>
            A validator component which checks if a component value is a valid email address.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
              &lt;RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email /&gt;
              &lt;RadzenEmailValidator Component="Email" Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            @code {
             class Model
              {
               public string Email { get; set; }
             }
             
             Model model = new Model();
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenEmailValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid. Set to <c>"Invalid email"</c> by default.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenEmailValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenFieldset">
            <summary>
            RadzenFieldset component.
            </summary>
            <example>
            <code>
            &lt;RadzenFieldset AllowCollapse="true""&gt;
                &lt;HeaderTemplate&gt;
                    Header
                &lt;/HeaderTemplate&gt;
                &lt;ChildContent&gt;
                    Content
                &lt;/ChildContent&gt;
                &lt;SummaryTemplate&gt;
                    Summary
                &lt;/SummaryTemplate&gt;
            &lt;/RadzenFieldset&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenFieldset.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.AllowCollapse">
            <summary>
            Gets or sets a value indicating whether collapsing is allowed. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if collapsing is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.Collapsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenFieldset"/> is collapsed.
            </summary>
            <value><c>true</c> if collapsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.ExpandTitle">
            <summary>
            Gets or sets the title attribute of the expand button.
            </summary>
            <value>The title attribute value of the expand button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.CollapseTitle">
            <summary>
            Gets or sets the title attribute of the collapse button.
            </summary>
            <value>The title attribute value of the collapse button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.ExpandAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the expand button.
            </summary>
            <value>The aria-label attribute value of the expand button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.CollapseAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the collapse button.
            </summary>
            <value>The aria-label attribute value of the collapse button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.HeaderTemplate">
            <summary>
            Gets or sets the header template.
            </summary>
            <value>The header template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.SummaryTemplate">
            <summary>
            Gets or sets the summary template.
            </summary>
            <value>The summary template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.Expand">
            <summary>
            Gets or sets the expand callback.
            </summary>
            <value>The expand callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFieldset.Collapse">
            <summary>
            Gets or sets the collapse callback.
            </summary>
            <value>The collapse callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenFieldset.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenFieldset.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenFileInput`1">
            <summary>
            RadzenFileInput component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenFileInput @bind-Value=@employee.Photo TValue="string" Change=@(args => Console.WriteLine($"File content as base64 string: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.ChooseText">
            <summary>
            Gets or sets the choose button text.
            </summary>
            <value>The choose button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.DeleteText">
            <summary>
            Gets or sets the delete button text.
            </summary>
            <value>The delete button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenFileInput`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="F:Radzen.Blazor.RadzenFileInput`1.fileUpload">
            <summary>
            Gets file input reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenFileInput`1.OnChange(System.Collections.Generic.IEnumerable{Radzen.PreviewFileInfo})">
            <summary>
            Called on file change.
            </summary>
            <param name="files">The file.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenFileInput`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenFileInput`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.Error">
            <summary>
            Gets or sets the error callback.
            </summary>
            <value>The error callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.ImageClick">
            <summary>
            Gets or sets the image click callback.
            </summary>
            <value>The image click callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenFileInput`1.OnImageClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:ImageClick" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.Accept">
            <summary>
            Gets or sets the comma-separated accepted MIME types.
            </summary>
            <value>The comma-separated accepted MIME types.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.MaxFileSize">
            <summary>
            Gets or sets the maximum size of the file.
            </summary>
            <value>The maximum size of the file.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.MaxWidth">
            <summary>
            Gets or sets the maximum width of the file, keeping aspect ratio.
            </summary>
            <value>The maximum width of the file.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.MaxHeight">
            <summary>
            Gets or sets the maximum height of the file, keeping aspect ratio.
            </summary>
            <value>The maximum height of the file.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.ImageStyle">
            <summary>
            Gets or sets the image style.
            </summary>
            <value>The image style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.FileName">
            <summary>
            Gets or sets the image file name.
            </summary>
            <value>The image file name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.FileNameChanged">
            <summary>
            Gets or sets the FileName changed.
            </summary>
            <value>The FileName changed.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.FileSize">
            <summary>
            Gets or sets the image file size.
            </summary>
            <value>The image file size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFileInput`1.FileSizeChanged">
            <summary>
            Gets or sets the FileSize changed.
            </summary>
            <value>The FileSize changed.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenFooter">
            <summary>
            RadzenFooter component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenFooter.Layout">
            <summary>
            The <see cref="T:Radzen.Blazor.RadzenLayout" /> this component is nested in.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenFooter.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.IFormFieldContext">
            <summary>
            Interface that represents the context of the form field.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IFormFieldContext.DisabledChanged">
            <summary>
            Notifies the form field that the disabled state of the component has changed.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.IFormFieldContext.AllowFloatingLabel">
            <summary>
            Gets or sets a value indicating whether the label is floating or fixed on top.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.FormFieldContext">
            <summary>
            Represents the context of the form field.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.FormFieldContext.DisabledChanged">
            <summary>
            Notifies the form field that the disabled state of the component has changed.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.FormFieldContext.AllowFloatingLabel">
            <summary>
            Gets or sets a value indicating whether the label is floating or fixed on top.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenFormField">
            <summary>
            A Blazor component that wraps another component and adds a label, helper text, start and end content.
            </summary>
            <example>
            <code>
            &lt;RadzenFormField Text="Search"&gt;
              &lt;RadzenTextBox @bind-Value="@text" /&gt;
            &lt;/RadzenFormField&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.ChildContent">
            <summary>
            Gets or sets the child content. The child content is wrapped by the form field. Can be used with RadzenTextBox, RadzenTextArea, RadzenPassword, RadzenDropDown, RadzenDropDownList, RadzenNumeric.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.Start">
            <summary>
            Gets or sets the optional content that will be rendered before the child content. Usually used with RadzenIcon.
            </summary>
            <example>
            <code>
            &lt;RadzenFormField Text="Search"&gt;
              &lt;Start&gt;
                &lt;RadzenIcon Icon="search" /&gt;
              &lt;/Start&gt;
              &lt;ChildContent&gt;
                &lt;RadzenTextBox @bind-Value="@text" /&gt;
              &lt;/ChildContent&gt;
            &lt;/RadzenFormField&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.End">
            <summary>
            Gets or sets the optional content that will be rendered after the child content. Usually used with RadzenIcon.
            </summary>
            <example>
            <code>
            &lt;RadzenFormField&gt;
              &lt;End&gt;
                &lt;RadzenIcon Icon="search" /&gt;
              &lt;/End&gt;
              &lt;ChildContent&gt;
                &lt;RadzenTextBox @bind-Value="@text" /&gt;
              &lt;/ChildContent&gt;
            &lt;/RadzenFormField&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.Helper">
            <summary>
            Gets or sets the optional content that will be rendered below the child content. Used with a validator or to display some additional information.
            </summary>
            <example>
            <code>
            &lt;RadzenFormField&gt;
              &lt;Helper&gt;
               &lt;RadzenRequiredValidator Component="Text" /&gt;
              &lt;/Helper&gt;
              &lt;ChildContent&gt;
            .   &lt;RadzenTextBox @bind-Value="@text" Name="Text" /&gt;
              &lt;/ChildContent&gt;
            &lt;/RadzenFormField&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.TextTemplate">
            <summary>
            Gets or sets the custom content for the label using a Razor template.
            When provided, this template will be rendered instead of the plain text specified in the Text parameter.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.Text">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.AllowFloatingLabel">
            <summary>
            Gets or sets a value indicating whether the label is floating or fixed on top.
            </summary>
            <value><c>true</c> if floating is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.Component">
            <summary>
            Gets or sets the name of the form field. Used to associate the label with a component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenFormField.Variant">
            <summary>
            Gets or sets the design variant of the form field.
            </summary>
            <value>The variant of the form field.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.Blazor.RadzenFormField"/> class.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenFormField.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenFormField.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenGoogleMap">
            <summary>
            RadzenGoogleMap component.
            </summary>
            <example>
            <code>
            &lt;RadzenGoogleMap Zoom="3" Center=@(new GoogleMapPosition() { Lat = 42.6977, Lng = 23.3219 }) MapClick=@OnMapClick MarkerClick=@OnMarkerClick"&gt;
                &lt;Markers&gt;
                    &lt;RadzenGoogleMapMarker Title="London" Label="London" Position=@(new GoogleMapPosition() { Lat = 51.5074, Lng = 0.1278 }) /&gt;
                    &lt;RadzenGoogleMapMarker Title="Paris " Label="Paris" Position=@(new GoogleMapPosition() { Lat = 48.8566, Lng = 2.3522 }) /&gt;
                &lt;/Markers&gt;
            &lt;/RadzenGoogleMap&gt;
            @code {
              void OnMapClick(GoogleMapClickEventArgs args)
              {
                Console.WriteLine($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
              }
              
              void OnMarkerClick(RadzenGoogleMapMarker marker)
              {
                Console.WriteLine($"Map {marker.Title} marker clicked. Marker position -> Lat: {marker.Position.Lat}, Lng: {marker.Position.Lng}");
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.Data">
            <summary>
            Gets or sets the data - collection of RadzenGoogleMapMarker.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.MapClick">
            <summary>
            Gets or sets the map click callback.
            </summary>
            <value>The map click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.MarkerClick">
            <summary>
            Gets or sets the marker click callback.
            </summary>
            <value>The marker click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.ApiKey">
            <summary>
            Gets or sets the Google API key.
            </summary>
            <value>The Google API key.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.MapId">
            <summary>
            Gets or sets the Google Map Id.
            </summary>
            <value>The Google Map Id.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.Options">
            <summary>
            Gets or sets the Google map options: https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions.
            </summary>
            <value>The Google map options.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.Zoom">
            <summary>
            Gets or sets the zoom.
            </summary>
            <value>The zoom.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.FitBoundsToMarkersOnUpdate">
            <summary>
            Flag indicating whether map will be zoomed to marker bounds on update or not.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.Center">
            <summary>
            Gets or sets the center map position.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMap.Markers">
            <summary>
            Gets or sets the markers.
            </summary>
            <value>The markers.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMap.AddMarker(Radzen.Blazor.RadzenGoogleMapMarker)">
            <summary>
            Adds the marker.
            </summary>
            <param name="marker">The marker.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMap.RemoveMarker(Radzen.Blazor.RadzenGoogleMapMarker)">
            <summary>
            Removes the marker.
            </summary>
            <param name="marker">The marker.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMap.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMap.OnMapClick(Radzen.GoogleMapClickEventArgs)">
            <summary>
            Handles the <see cref="E:MapClick" /> event.
            </summary>
            <param name="args">The <see cref="T:Radzen.GoogleMapClickEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMap.OnMarkerClick(Radzen.Blazor.RadzenGoogleMapMarker)">
            <summary>
            Called when marker click.
            </summary>
            <param name="marker">The marker.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMap.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMap.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenGoogleMapMarker">
            <summary>
            RadzenGoogleMapMarker component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMapMarker.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMapMarker.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMapMarker.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGoogleMapMarker.Map">
            <summary>
            Gets or sets the map.
            </summary>
            <value>The map.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenGoogleMapMarker.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenGravatar">
            <summary>
            RadzenGravatar component.
            </summary>
            <example>
            <code>
            &lt;RadzenGravatar Email="info@radzen.com" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenGravatar.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGravatar.AlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGravatar.Size">
            <summary>
            Gets or sets the size. Defaulted to 36 (pixels). 
            </summary> 
            <value>The size of the image in pixels.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenGravatar.Url">
            <summary>
            Gets gravatar URL.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenGravatar.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenGridLines">
            <summary>
            Grid line configuration of <see cref="T:Radzen.Blazor.IChartAxis" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenGridLines.Stroke">
            <summary>
            Specifies the color of the grid lines.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenGridLines.StrokeWidth">
            <summary>
            Specifies the pixel width of the grid lines. Set to <c>1</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenGridLines.LineType">
            <summary>
            Specifies the type of line used to render the grid lines.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenGridLines.Visible">
            <summary>
            Specifies whether to display grid lines or not. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenGridLines.ChartAxis">
            <summary>
            The axis which this configuration applies to.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenGridLines.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenHeader">
            <summary>
            RadzenHeader component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHeader.Layout">
            <summary>
            The <see cref="T:Radzen.Blazor.RadzenLayout" /> this component is nested in.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHeader.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenHeading">
            <summary>
            RadzenHeading component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHeading.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenHeading.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenHeading.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenHtml">
            <summary>
            RadzenHtml component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtml.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenHtml"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtml.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditor">
            <summary>
            A component which edits HTML content. Provides built-in upload capabilities.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html /&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.ShowToolbar">
            <summary>
            Specifies whether to show the toolbar. Set it to false to hide the toolbar. Default value is true.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.Mode">
            <summary>
            Gets or sets the mode of the editor.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.UploadHeaders">
            <summary>
            Specifies custom headers that will be submit during uploads.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.Paste">
            <summary>
            A callback that will be invoked when the user pastes content in the editor. Commonly used to filter unwanted HTML.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html Paste=@OnPaste /&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
              void OnPaste(HtmlEditorPasteEventArgs args)
              {
                // Set args.Html to filter unwanted tags.
                args.Html = args.Html.Replace("&lt;br&gt;", "");
              }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.UploadError">
            <summary>
            A callback that will be invoked when there is an error during upload.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.OnError(System.String)">
            <summary>
            Called on upload error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.Execute">
            <summary>
            A callback that will be invoked when the user executes a command of the editor (e.g. by clicking one of the tools).
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor Execute=@OnExecute&gt;
              &lt;RadzenHtmlEditorCustomTool CommandName="InsertToday" Icon="today" Title="Insert today" /&gt;
            &lt;/RadzenHtmlEditor&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
              async Task OnExecute(HtmlEditorExecuteEventArgs args)
              {
                if (args.CommandName == "InsertToday")
                {
                  await args.Editor.ExecuteCommandAsync(HtmlEditorCommands.InsertHtml, DateTime.Today.ToLongDateString());
                }
             }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.UploadUrl">
            <summary>
            Specifies the URL to which RadzenHtmlEditor will submit files.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.FocusAsync">
            <summary>
            Focuses the editor.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.State">
            <summary>
            Represents the current state of the toolbar commands and other functionalities within the RadzenHtmlEditor component.
            Updated dynamically based on user actions or programmatically invoked commands.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.RegisterShortcut(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Registers a shortcut for the specified action.
            </summary>
            <param name="key">The shortcut. Can be combination of keys such as <c>CTRL+B</c>.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.UnregisterShortcut(System.String)">
            <summary>
            Unregisters the specified shortcut.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.OnSelectionChange">
            <summary>
            Invoked by interop when the RadzenHtmlEditor selection changes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.GetHeaders">
            <summary>
            Invoked by interop during uploads. Provides the custom headers.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.ExecuteCommandAsync(System.String,System.String)">
            <summary>
            Executes the requested command with the provided value. Check <see cref="T:Radzen.HtmlEditorCommands" /> for the list of supported commands.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.ExecuteShortcutAsync(System.String)">
            <summary>
            Executes the action associated with the specified shortcut. Used internally by RadzenHtmlEditor.
            </summary>
            <param name="shortcut"></param>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.SourceChanged(System.String)">
            <summary>
            Handles changes to the editor's source content.
            </summary>
            <param name="html">The updated HTML content.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.SaveSelectionAsync">
            <summary>
            Saves the current selection. RadzenHtmlEditor will lose its selection when it loses focus. Use this method to persist the current selection.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.RestoreSelectionAsync">
            <summary>
            Restores the last saved selection.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.GetSelectionAttributes``1(System.String,System.String[])">
            <summary>
            Retrieves the specified attributes of a selection within the content editable area.
            </summary>
            <typeparam name="T">The type of attributes to retrieve.</typeparam>
            <param name="selector">The CSS selector used to target the element.</param>
            <param name="attributes">An array of attribute names to retrieve.</param>
            <returns>A task that represents the asynchronous operation, returning the attributes as an object of type T.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.GetMode">
            <summary>
            Returns the current mode of the editor.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.OnChange(System.String)">
            <summary>
            Invoked via interop when the value of RadzenHtmlEditor changes.
            </summary>
            <param name="html">The HTML.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.OnPaste(System.String)">
            <summary>
            Invoked via interop when the user pastes content in RadzenHtmlEditor. Invokes <see cref="P:Radzen.Blazor.RadzenHtmlEditor.Paste" />.
            </summary>
            <param name="html">The HTML.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditor.UploadComplete">
            <summary>
            Gets or sets the callback which when a file is uploaded.
            </summary>
            <value>The complete callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditor.OnUploadComplete(System.String)">
            <summary>
            Invoked by interop when the upload is complete.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorAlignCenter">
            <summary>
            A RadzenHtmlEditor tool which centers the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorAlignCenter /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorAlignCenter.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorAlignCenter.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Align center"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorAlignLeft">
            <summary>
            A RadzenHtmlEditor tool which aligns the selection to the left.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorAlignLeft /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorAlignLeft.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorAlignLeft.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Align left"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorAlignRight">
            <summary>
            A RadzenHtmlEditor tool which aligns the selection to the right.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorAlignRight /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorAlignRight.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorAlignRight.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Align right"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorBackground">
            <summary>
            A RadzenHtmlEditor tool which sets the background color of the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorBackground /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorBackground.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorBackground.Value">
            <summary>
            Specifies the default background color. Set to <c>"rgb(0, 0, 255)"</c> by default;
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorBackground.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Background color"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorBackgroundItem">
            <summary>
            Adds a custom color to <see cref="T:Radzen.Blazor.RadzenHtmlEditorBackground" />.
            </summary>
            <example>
            <code>
             &lt;RadzenHtmlEditorBackground &gt;
                &lt;RadzenHtmlEditorBackgroundItem Value="red" /&gt;
                &lt;RadzenHtmlEditorBackgroundItem Value="green" /&gt;
             &lt;/RadzenHtmlEditorBackground &gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorBackgroundItem.Value">
            <summary>
            The custom color to add.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorBold">
            <summary>
            A RadzenHtmlEditor tool which bolds the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorBold /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorBold.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorBold.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Bold"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorBold.Shortcut">
            <summary>
            Specifies the shortcut for the command. Set to <c>"Ctrl+B"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorButtonBase">
            <summary>
            Base class that RadzenHtmlEditor color picker tools inherit from.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorButtonBase.Editor">
            <summary>
            The RadzenHtmlEditor component which this tool is part of.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorButtonBase.CommandName">
            <summary>
            Specifies the name of the command. It is available as <see cref="P:Radzen.HtmlEditorExecuteEventArgs.CommandName" /> when
            <see cref="P:Radzen.Blazor.RadzenHtmlEditor.Execute" /> is raised.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorButtonBase.Shortcut">
            <summary>
            Specifies the shortcut for the command. Can be in the form of <c>"Ctrl+X"</c> or <c>"Alt+Shift+Z"</c>.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorButtonBase.OnClick">
            <summary>
            Handles the click event of the button. Executes the command.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorButtonBase.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorButtonBase.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorColor">
            <summary>
            A RadzenHtmlEditor tool which sets the text color of the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorColor /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColor.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColor.Value">
            <summary>
            Specifies the default text color. Set to <c>"rgb(255, 0, 0)"</c> by default;
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColor.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Text color"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorColorBase">
            <summary>
            Base class that RadzenHtmlEditor color picker tools inherit from.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.ShowHSV">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.ShowHSV" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.ShowRGBA">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.ShowRGBA" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.ShowColors">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.ShowColors" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.ShowButton">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.ShowButton" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.HexText">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.HexText" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.RedText">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.RedText" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.GreenText">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.GreenText" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.BlueText">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.BlueText" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.AlphaText">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.AlphaText" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.ButtonText">
            <summary>
            Sets <see cref="P:Radzen.Blazor.RadzenColorPicker.ButtonText" /> of the built-in RadzenColorPicker.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorColorBase.OnChange(System.String)">
            <summary>
            Handles the change event of built-in RadzenColorPicker.
            </summary>
            <param name="value">The new color.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorBase.Value">
            <summary>
            The default value of the color picker.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenHtmlEditorColorBase.value">
            <summary>
            The internal state of the component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorColorBase.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorColorBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorColorItem">
            <summary>
            Adds a custom color to <see cref="T:Radzen.Blazor.RadzenHtmlEditorColor" />.
            </summary>
            <example>
            <code>
             &lt;RadzenHtmlEditorColor &gt;
                &lt;RadzenHtmlEditorColorItem Value="red" /&gt;
                &lt;RadzenHtmlEditorColorItem Value="green" /&gt;
             &lt;/RadzenHtmlEditorColor &gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorColorItem.Value">
            <summary>
            The custom color to add.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorCommandState">
            <summary>
            Represents the state of various commands available in the Radzen HTML editor.
            Used to track the status of editor commands such as formatting, undo/redo, and text alignment.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Undo">
            <summary>
            Indicates whether the undo command is currently available.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Redo">
            <summary>
            Indicates whether the redo command is currently available.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Bold">
            <summary>
            Indicates whether bold formatting is currently applied.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Italic">
            <summary>
            Indicates whether italic formatting is currently applied.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.StrikeThrough">
            <summary>
            Indicates whether strikethrough formatting is currently applied.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Subscript">
            <summary>
            Indicates whether subscript formatting is currently applied.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Superscript">
            <summary>
            Indicates whether superscript formatting is currently applied.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Underline">
            <summary>
            Indicates whether underline formatting is currently applied.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.JustifyRight">
            <summary>
            Indicates whether text is currently right-aligned.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.JustifyLeft">
            <summary>
            Indicates whether text is currently left-aligned.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.JustifyCenter">
            <summary>
            Indicates whether text is currently center-aligned.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.JustifyFull">
            <summary>
            Indicates whether text is currently justified.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.FontName">
            <summary>
            Gets or sets the name of the currently selected font.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.FontSize">
            <summary>
            Gets or sets the size of the currently selected font.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.FormatBlock">
            <summary>
            Gets or sets the current formatting block (e.g., paragraph, heading).
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Unlink">
            <summary>
            Indicates whether the unlink command is currently available.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCommandState.Html">
            <summary>
            Gets or sets the current HTML content of the editor.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorCustomTool">
            <summary>
            A custom tool in RadzenHtmlEditor
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor Execute=@OnExecute&gt;
              &lt;RadzenHtmlEditorCustomTool CommandName="InsertToday" Icon="today" Title="Insert today" /&gt;
            &lt;/RadzenHtmlEditor&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
              async Task OnExecute(HtmlEditorExecuteEventArgs args)
              {
                if (args.CommandName == "InsertToday")
                {
                  await args.Editor.ExecuteCommandAsync(HtmlEditorCommands.InsertHtml, DateTime.Today.ToLongDateString());
                }
             }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.Visible">
            <summary>
            Determines if the tools is visible.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.Icon">
            <summary>
            Specifies the icon of the tool. Set to <c>"settings"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.EnabledModes">
            <summary>
            Specifies the modes that this tool will be enabled in.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.Template">
            <summary>
            The template of the tool. Use to render a custom tool.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.Selected">
            <summary>
            Specifies whether the tool is selected.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.Disabled">
            <summary>
            Specifies whether the tool is disabled.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.CommandName">
            Specifies the name of the command. It is available as <see cref="P:Radzen.HtmlEditorExecuteEventArgs.CommandName" /> when
            <see cref="P:Radzen.Blazor.RadzenHtmlEditor.Execute" /> is raised.
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.Editor">
            <summary>
            The RadzenHtmlEditor component which this tool is part of.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorCustomTool.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorFontName">
            <summary>
            A tool which changes the font of the selected text.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorFontName /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontName.ChildContent">
            <summary>
            Sets the child content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontName.Placeholder">
            <summary>
            Specifies the placeholder displayed to the user. Set to <c>"Font"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontName.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Font name"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontName.Editor">
            <summary>
            The RadzenHtmlEditor component which this tool is part of.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorFontNameItem">
            <summary>
            Adds a custom font to a <see cref="T:Radzen.Blazor.RadzenHtmlEditorFontName" />.
            </summary>
            <example>
            <code>
             &lt;RadzenHtmlEditorFontName&gt;
             &lt;RadzenHtmlEditorFontNameItem Text="Times New Roman" Value='"Times New Roman"' /&gt;
             &lt;/RadzenHtmlEditorFontName&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontNameItem.Text">
            <summary>
            The name of the font e.g. <c>"Times New Roman"</c>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontNameItem.Value">
            <summary>
            The CSS value of the font. Use quotes if it contains spaces.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontNameItem.Parent">
            <summary>
            The RadzenHtmlEditorFontName tool which this tool belongs to.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorFontNameItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorFontSize">
            <summary>
            A tool which changes the font size of the selected text.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorFontSize /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontSize.Editor">
            <summary>
            The RadzenHtmlEditor component which this tool is part of.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontSize.Placeholder">
            <summary>
            Specifies the placeholder displayed to the user. Set to <c>"Font size"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFontSize.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Font size"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorFormatBlock">
            <summary>
            A tool which changes the style of a the selected text by making it a heading or paragraph.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorFormatBlock /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Editor">
            <summary>
            The RadzenHtmlEditor component which this tool is part of.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Placeholder">
            <summary>
            Specifies the placeholder displayed to the user. Set to <c>"Format block"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Text style"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.NormalText">
            <summary>
            Specifies the text displayed for the normal text example. Set to <c>"Normal"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Heading1Text">
            <summary>
            Specifies the text displayed for the h1 example. Set to <c>"Heading 1"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Heading2Text">
            <summary>
            Specifies the text displayed for the h2 example. Set to <c>"Heading 2"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Heading3Text">
            <summary>
            Specifies the text displayed for the h3 example. Set to <c>"Heading 3"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Heading4Text">
            <summary>
            Specifies the text displayed for the h4 example. Set to <c>"Heading 4"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Heading5Text">
            <summary>
            Specifies the text displayed for the h5 example. Set to <c>"Heading 5"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Heading6Text">
            <summary>
            Specifies the text displayed for the h6 example. Set to <c>"Heading 6"</c> by default.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorFormatBlock.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenHtmlEditorFormatBlock.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorImage">
            <summary>
            A tool which inserts and uploads images in a <see cref="T:Radzen.Blazor.RadzenHtmlEditor" />.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorImage /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Insert image"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.SelectText">
            <summary>
            Specifies the text of the label suggesting the user to select a file for upload. Set to <c>"Select image file to upload"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.UploadChooseText">
            <summary>
            Specifies the text of the upload label. Set to <c>"Browse"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.UrlText">
            <summary>
            Specifies the text of the label suggesting the user to enter a web address. Set to <c>"or enter a web address"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.AltText">
            <summary>
            Specifies the text of the label suggesting the user to enter a alternative text (<c>alt</c>) for the image. Set to <c>"Alternative text"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.OkText">
            <summary>
            Specifies the text of button which inserts the image. Set to <c>"OK"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.CancelText">
            <summary>
            Specifies the text of button which cancels image insertion and closes the dialog. Set to <c>"Cancel"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.WidthText">
            <summary>
            Specifies the text of label for image width. Set to <c>"Image Width"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.HeightText">
            <summary>
            Specifies the text of label for image height. Set to <c>"Image Height"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.ShowWidth">
            <summary>
            Specifies whether to show the image width section. Set it to false to hide it. Default value is true.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.ShowHeight">
            <summary>
            Specifies whether to show the image height section. Set it to false to hide it. Default value is true.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.ShowSrc">
            <summary>
            Specifies whether to show the web address section. Set it to false to hide it. Default value is true.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorImage.ShowAlt">
            <summary>
            Specifies whether to show the alternative text section. Set it to false to hide it. Default value is true.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorIndent">
            <summary>
            A RadzenHtmlEditor tool which indents the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorIndent /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorIndent.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorIndent.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Indent"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorItalic">
            <summary>
            A RadzenHtmlEditor tool which makes the selection italic.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorItalic /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorItalic.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorItalic.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Italic"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorItalic.Shortcut">
            <summary>
            Specifies the shortcut for the command. Set to <c>"Ctrl+I"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorJustify">
            <summary>
            A RadzenHtmlEditor tool which justifies the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorJustify /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorJustify.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorJustify.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Justify"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorLink">
            <summary>
            A tool which creates links from the selection of a <see cref="T:Radzen.Blazor.RadzenHtmlEditor" />.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorLink /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorLink.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Insert link"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorLink.UrlText">
            <summary>
            Specifies the text of the label suggesting the user to enter a web address. Set to <c>"Web address"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorLink.OpenInNewWindowText">
            <summary>
            Specifies the text of the checkbox that opens the link in new window. Set to <c>"Open in new window"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorLink.LinkText">
            <summary>
            Specifies the text of the label suggesting the user to change the text of the link. Set to <c>"Text"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorLink.OkText">
            <summary>
            Specifies the text of button which inserts the image. Set to <c>"OK"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorLink.CancelText">
            <summary>
            Specifies the text of button which cancels image insertion and closes the dialog. Set to <c>"Cancel"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorLink.Shortcut">
            <summary>
            Specifies the shortcut for the command. Set to <c>"Ctrl+K"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorOrderedList">
            <summary>
            A RadzenHtmlEditor tool which inserts an ordered list (<c>ol</c>).
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorOrderedList /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorOrderedList.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorOrderedList.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Ordered list"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorOutdent">
            <summary>
            A RadzenHtmlEditor tool which outdents the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorOutdent /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorOutdent.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorOutdent.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Outdent"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorRedo">
            <summary>
            A RadzenHtmlEditor tool which repeats the last undone command.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorRedo /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorRedo.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorRedo.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Redo"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorRemoveFormat">
            <summary>
            A RadzenHtmlEditor tool which removes the styling of the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorRemoveFormat /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorRemoveFormat.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorRemoveFormat.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Remove styling"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorSeparator">
            <summary>
            A RadzenHtmlEditor visual separator.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorLink /&gt;
             &lt;RadzenHtmlEditorSeparator /&gt;
             &lt;RadzenHtmlEditorJustify /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorSource">
            <summary>
            A tool which switches between rendered and source views in <see cref="T:Radzen.Blazor.RadzenHtmlEditor" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorSource.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"View source"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorStrikeThrough">
            <summary>
            A RadzenHtmlEditor tool which applies "strike through" styling to the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorStrikeThrough /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorStrikeThrough.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorStrikeThrough.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Strikethrough"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorSubscript">
            <summary>
            A RadzenHtmlEditor tool which formats the selection as subscript.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorSubscript /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorSubscript.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorSubscript.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Subscript"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorSuperscript">
            <summary>
            A RadzenHtmlEditor tool which formats the selection as superscript.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorSuperscript /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorSuperscript.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorSuperscript.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Superscript"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorUnderline">
            <summary>
            A RadzenHtmlEditor tool which underlines the selection.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorUnderline /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!";
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUnderline.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUnderline.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Underline"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUnderline.Shortcut">
            <summary>
            Specifies the shortcut for the command. Set to <c>"Ctrl+U"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorUndo">
            <summary>
            A RadzenHtmlEditor tool which reverts the last edit operation.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorUndo /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUndo.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUndo.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Undo"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorUnlink">
            <summary>
            A RadzenHtmlEditor tool which removes a link.
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorUnlink /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUnlink.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUnlink.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Remove link"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenHtmlEditorUnorderedList">
            <summary>
            A RadzenHtmlEditor tool which inserts a bullet list (<c>ul</c>).
            </summary>
            <example>
            <code>
            &lt;RadzenHtmlEditor @bind-Value=@html&gt;
             &lt;RadzenHtmlEditorUnorderedList /&gt;
            &lt;/RadzenHtmlEdito&gt;
            @code {
              string html = "@lt;strong&gt;Hello&lt;/strong&gt; world!"; 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUnorderedList.CommandName">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenHtmlEditorUnorderedList.Title">
            <summary>
            Specifies the title (tooltip) displayed when the user hovers the tool. Set to <c>"Bullet list"</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenIcon">
            <summary>
            RadzenIcon component. Displays icon from Material Symbols variable font.
            </summary>
            <example>
            <code>
            &lt;RadzenIcon Icon="3d_rotation" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenIcon.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenIcon.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenIcon.IconStyle">
            <summary>
            Specifies the display style of the icon.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenIcon.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenImage">
            <summary>
            RadzenImage component.
            </summary>
            <example>
            <code>
            &lt;RadzenImage Path="someimage.png" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenImage.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenImage.AlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenImage.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenImage.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Radzen.Blazor.RadzenLabel">
            <summary>
            RadzenLabel component.
            </summary>
            <example>
            <code>
            &lt;RadzenLabel Text="CompanyName" Component="CompanyName" /&gt;
            &lt;RadzenTextBox Name="CompanyName" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenLabel.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLabel.Component">
            <summary>
            Gets or sets the component name for the label.
            </summary>
            <value>The component name for the label.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLabel.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenLabel.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenLayout">
            <summary>
            RadzenLayout component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenLayout.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenLayout.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenLegend">
            <summary>
            Class RadzenLegend.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLegend.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLegend.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenLegend"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenLegend.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenLegend.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Shoulds the refresh chart.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenLengthValidator">
            <summary>
            A validator component which checks if then component value length is within a specified range.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
               &lt;RadzenTextBox style="display: block" Name="FirstName" @bind-Value=@model.FirstName /&gt;
               &lt;RadzenLengthValidator Component="FirstName" Min="3" Text="First name should be at least 3 characters" Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            @code {
               class Model
               {
                  public string FirstName { get; set; }
               }
               Model model = new Model(); 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenLengthValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid. Set to <c>"Invalid length"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLengthValidator.Min">
            <summary>
            Specifies the minimum accepted length. The component value length should be greater than the minimum in order to be valid.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLengthValidator.Max">
            <summary>
            Specifies the maximum accepted length. The component value length should be less than the maximum in order to be valid.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenLengthValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenLineSeries`1">
            <summary>
            Renders line series in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
            <typeparam name="TItem">The type of the series data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenLineSeries`1.Stroke">
            <summary>
            Specifies the color of the line.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLineSeries`1.StrokeWidth">
            <summary>
            Specifies the pixel width of the line. Set to <c>2</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLineSeries`1.LineType">
            <summary>
            Specifies the line type.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLineSeries`1.Smooth">
            <summary>
            Specifies whether to render a smooth line. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLineSeries`1.Interpolation">
            <summary>
            Specifies how to render lines between data points. Set to <see cref="T:Radzen.Blazor.Rendering.Line"/> by default
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLineSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenLineSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenLineSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenLineSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenLink">
            <summary>
            RadzenLink component.
            </summary>
            <example>
            <code>
            &lt;RadzenLink Path="https://www.radzen.com" Text="Go to url" Target="_blank" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.Match">
            <summary>
            Gets or sets the navigation link match.
            </summary>
            <value>The navigation link match.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLink.Disabled">
            <summary>
            Gets or sets whether the link is disabled.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenLink.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenLink.GetPath">
            <summary>
            Gets the path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenLink.GetTarget">
            <summary>
            Gets the target.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenListBox`1">
            <summary>
            RadzenListBox component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenListBox @bind-Value=@customerID TValue="string" Data=@customers TextProperty="CompanyName" ValueProperty="CustomerID" Change=@(args => Console.WriteLine($"Selected CustomerID: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenListBox`1.SelectAllText">
            <summary>
            Gets or sets the select all text.
            </summary>
            <value>The select all text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenListBox`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenListBox`1.ItemRender">
            <summary>
            Gets or sets the row render callback. Use it to set row attributes.
            </summary>
            <value>The row render callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenListBox`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handles the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenListBox`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenListBox`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenListBox`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenListBox`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenListBox`1.SelectAll">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenLogin">
             <summary>
             RadzenLogin component. Must be placed in RadzenTemplateForm.
             </summary>
             <example>
             <code>
             &lt;RadzenTemplateForm Data=@("Login")&gt;
                     &lt;RadzenLogin AllowRegister="true" AllowResetPassword="true"
                                     Login=@OnLogin
                                     ResetPassword=@OnResetPassword
                                     Register=@OnRegister /&gt;
             &lt;/RadzenTemplateForm&gt;
             @code {
               void OnLogin(LoginArgs args, string name)
               {
                 Console.WriteLine($"{name} -> Username: {args.Username} and password: {args.Password}");
               }
            
               void OnRegister(string name)
               {
                 Console.WriteLine($"{name} -> Register");
               }
            
               void OnResetPassword(string value, string name)
               {
                 Console.WriteLine($"{name} -> ResetPassword for user: {value}");
               }
             }
             </code>
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.AutoComplete">
            <summary>
            Gets or sets a value indicating whether automatic complete of inputs is enabled.
            </summary>
            <value><c>true</c> if automatic complete of inputs is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.UserNameAutoCompleteType">
            <summary>
            Gets or sets a value indicating the type of built-in autocomplete
            the browser should use.
            <see cref="T:Radzen.Blazor.AutoCompleteType" />
            </summary>
            <value>
            The type of built-in autocomplete.
            </value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.PasswordAutoCompleteType">
            <summary>
            Gets or sets a value indicating the type of built-in autocomplete
            the browser should use.
            <see cref="T:Radzen.Blazor.AutoCompleteType" />
            </summary>
            <value>
            The type of built-in autocomplete.
            </value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.FormFieldVariant">
            <summary>
            Gets or sets the design variant of the form field.
            </summary>
            <value>The variant of the form field.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenLogin.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.RememberMe">
            <summary> Sets the initial value of the remember me switch.</summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.Login">
            <summary>
            Gets or sets the login callback.
            </summary>
            <value>The login callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.Register">
            <summary>
            Gets or sets the register callback.
            </summary>
            <value>The register callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.ResetPassword">
            <summary>
            Gets or sets the reset password callback.
            </summary>
            <value>The reset password callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.AllowRegister">
            <summary>
            Gets or sets a value indicating whether register is allowed.
            </summary>
            <value><c>true</c> if register is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.AllowRememberMe">
            <summary>
            Asks the user whether to remember their credentials. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.AllowResetPassword">
            <summary>
            Gets or sets a value indicating whether reset password is allowed.
            </summary>
            <value><c>true</c> if reset password is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.ShowLoginButton">
            <summary>
            Gets or sets a value indicating whether default login button is shown.
            </summary>
            <value><c>true</c> if default login button is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.LoginText">
            <summary>
            Gets or sets the login text.
            </summary>
            <value>The login text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.RegisterText">
            <summary>
            Gets or sets the register text.
            </summary>
            <value>The register text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.RememberMeText">
            <summary> Gets or sets the remember me text.</summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.RegisterMessageText">
            <summary>
            Gets or sets the register message text.
            </summary>
            <value>The register message text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.ResetPasswordText">
            <summary>
            Gets or sets the reset password text.
            </summary>
            <value>The reset password text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.UserText">
            <summary>
            Gets or sets the user text.
            </summary>
            <value>The user text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.UserRequired">
            <summary>
            Gets or sets the user required text.
            </summary>
            <value>The user required text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.PasswordText">
            <summary>
            Gets or sets the password text.
            </summary>
            <value>The password text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenLogin.PasswordRequired">
            <summary>
            Gets or sets the password required.
            </summary>
            <value>The password required.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenLogin.OnLogin">
            <summary>
            Called when login.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenLogin.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenLogin.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenLogin.OnReset(System.EventArgs)">
            <summary>
            Handles the <see cref="E:Reset" /> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenLogin.OnRegister">
            <summary>
            Called when register.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenMarkdown">
            <summary>
            A component which renders markdown content.
            </summary>
            <example>
            &lt;RadzenMarkdown&gt;
            # Hello, world!
            - This is a list item
            - This is another list item
            > This is a blockquote
            &lt;/RadzenMarkdown&gt;
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkdown.ChildContent">
            <summary>
            Gets or sets the markdown content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkdown.AllowHtml">
            <summary>
            Gets or sets a value indicating whether to allow HTML content in the markdown. Certain dangerous HTML tags (script, style, object, iframe) and attributes are removed.
            Set to <c>true</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkdown.AllowedHtmlTags">
            <summary>
            Gets or sets a list of allowed HTML tags. If set, only these tags will be allowed in the markdown content. By default would use a list of safe HTML tags.
            Considered only if <see cref="P:Radzen.Blazor.RadzenMarkdown.AllowHtml"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkdown.AllowedHtmlAttributes">
            <summary>
            Gets or sets a list of allowed HTML attributes. If set, only these attributes will be allowed in the markdown content. By default would use a list of safe HTML attributes.
            Considered only if <see cref="P:Radzen.Blazor.RadzenMarkdown.AllowHtml"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkdown.Text">
            <summary>
            Gets or sets the markdown content as a string. Overrides <see cref="P:Radzen.Blazor.RadzenMarkdown.ChildContent"/> if set.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkdown.AutoLinkHeadingDepth">
            <summary>
            The maximum heading depth to create anchor links for. Set to <c>0</c> to disable auto-linking.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMarkdown.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenMarkers">
            <summary>
            Class RadzenMarkers.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkers.Visible">
            <summary>
            Gets or sets whether marker is visible.
            </summary>
            <value>Visibility.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkers.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkers.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkers.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkers.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkers.MarkerType">
            <summary>
            Gets or sets the type of the marker.
            </summary>
            <value>The type of the marker.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMarkers.Series">
            <summary>
            Sets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenMarkers.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Shoulds the refresh chart.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenMask">
            <summary>
            RadzenMask component.
            </summary>
            <example>
            <code>
            &lt;RadzenMask Mask="(***) ***-****" Pattern="[^0-9]" Placeholder="(000) 000-0000" @bind-Value=@phone Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenMask.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMask.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMask.Mask">
            <summary>
            Gets or sets the mask.
            </summary>
            <value>The mask.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMask.Pattern">
            <summary>
            Gets or sets the pattern that will be used to replace all invalid characters with regular expression.
            </summary>
            <value>The invalid characters pattern.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMask.CharacterPattern">
            <summary>
            Gets or sets the pattern that will be used to match all valid characters with regular expression. If both Pattern and CharacterPattern are set CharacterPattern will be used.
            </summary>
            <value>The valid characters pattern.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenMask.OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Change" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenMask.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenMask.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenMediaQuery">
             <summary>
             RadzenMediaQuery fires its <see cref="P:Radzen.Blazor.RadzenMediaQuery.Change" /> event when the media query specified via <see cref="P:Radzen.Blazor.RadzenMediaQuery.Query" /> matches or not.
             </summary>
             <example>
             &lt; RadzenMediaQuery Query="(max-width: 768px)" Change=@OnChange /&gt;
             @code {
              void OnChange(bool matches)
              {
                 // matches is true if the media query applies; otherwise false.
              }
            }
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenMediaQuery.Query">
            <summary>
            The CSS media query this component will listen for.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenMediaQuery.Change">
            <summary>
            A callback that will be invoked when the status of the media query changes - to either match or not.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMediaQuery.OnChange(System.Boolean)">
            <summary>
            Invoked by interop when media query changes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMediaQuery.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Called by the Blazor runtime. Initializes the media query on the client-side.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMediaQuery.Dispose">
            <summary>
            Detaches client-side event listeners.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenMenu">
            <summary>
            RadzenMenu component.
            </summary>
            <example>
            <code>
            &lt;RadzenMenu&gt;
                &lt;RadzenMenuItem Text="Data"&gt;
                    &lt;RadzenMenuItem Text="Orders" Path="orders" /&gt;
                    &lt;RadzenMenuItem Text="Employees" Path="employees" /&gt;
                &lt;/RadzenMenuItemItem&gt;
            &lt;/RadzenMenu&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenu.Responsive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenMenu"/> is responsive.
            </summary>
            <value><c>true</c> if responsive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenu.ClickToOpen">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenMenu"/> should open item on click or on hover.
            </summary>
            <value><c>true</c> if open item on click; otherwise, <c>false</c> and items will open on hover.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenu.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMenu.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenu.AddItem(Radzen.Blazor.RadzenMenuItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenu.ToggleAriaLabel">
            <summary>
            Gets or sets the add button aria-label attribute.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenu.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenMenu.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenMenuItem">
            <summary>
            RadzenMenuItem component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenuItem.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Disabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.ImageStyle">
            <summary>
            Gets or sets the image style.
            </summary>
            <value>The image style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Match">
            <summary>
            Gets or sets the navigation link match.
            </summary>
            <value>The navigation link match.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.ParentItem">
            <summary>
            Gets or sets the parent item.
            </summary>
            <value>The parent item.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItem.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenuItem.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenuItem.AddItem(Radzen.Blazor.RadzenMenuItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenuItem.Toggle">
            <summary>
            Toggle the menu item.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenuItem.Close">
            <summary>
            Close the menu item.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenMenuItem.Open">
            <summary>
            Open the menu item.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenMonthView">
            <summary>
            Displays the appointments in a month day in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data="@appointments"&gt;
                &lt;RadzenMonthView /&gt;
            &lt;/RadzenScheduler&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenMonthView.Icon">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMonthView.Title">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMonthView.Text">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMonthView.MaxAppointmentsInSlot">
            <summary>
            Specifies the maximum appointnments to render in a slot.
            </summary>
            <value>The maximum appointments in slot.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMonthView.MoreText">
            <summary>
            Specifies the text displayed when there are more appointments in a slot than <see cref="P:Radzen.Blazor.RadzenMonthView.MaxAppointmentsInSlot" />.
            </summary>
            <value>The more text. Set to <c>"+ {0} more"</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMonthView.StartDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMonthView.EndDate">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenMonthView.Next">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenMonthView.Prev">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenMultiDayView">
            <summary>
            Displays the appointments in a multi-day view in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
            <code>
            &lt;RadzenScheduler Data="@appointments"&gt;
                &lt;RadzenMultiDayView /&gt;
            &lt;/RadzenScheduler&gt;
            </code>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.Icon">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.Text">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.TimeFormat">
            <summary>
            Gets or sets the time format.
            </summary>
            <value>The time format. Set to <c>h tt</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.HeaderFormat">
            <summary>
            Gets or sets the format used to display the header text.
            </summary>
            <value>The header text format. Set to <c>ddd</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
            <value>The end time.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.MinutesPerSlot">
            <summary>
            Gets or sets slot size in minutes. Set to <c>30</c> by default.
            </summary>
            <value>The slot size in minutes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.NumberOfDays">
            <summary>
            Gets or sets number of days to view. Set to <c>2</c> by default.
            </summary>
            <value>The number of days.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.AdvanceDays">
            <summary>
            Gets or sets number of days to advance when using prev / next. Set to <c>1</c> by default.
            </summary>
            <value>The number of days to advance.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.StartDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.EndDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenMultiDayView.Title">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenMultiDayView.Next">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenMultiDayView.Prev">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenNumeric`1">
            <summary>
            RadzenNumeric component.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <example>
            <code>
            &lt;RadzenNumeric TValue="int" Min="1" Max="10" Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenNumeric`1.input">
            <summary>
            Gets input reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenNumeric`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenNumeric`1.UpdateValueWithStepNumeric``1(``0,System.Boolean,System.Decimal)">
            <summary>
            Use native numeric type to process the step up/down while checking for possible overflow errors
            and clamping to Min/Max values
            </summary>
            <typeparam name="TNum"></typeparam>
            <param name="valueToUpdate"></param>
            <param name="stepUp"></param>
            <param name="decimalStep"></param>
            <returns></returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.FormattedValue">
            <summary>
            Gets or sets the formatted value.
            </summary>
            <value>The formatted value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.MaxLength">
            <summary>
            Gets or sets the maximum allowed text length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.ShowUpDown">
            <summary>
            Gets or sets a value indicating whether up down buttons are shown.
            </summary>
            <value><c>true</c> if up down buttons are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.TextAlign">
            <summary>
            Gets or sets the text align.
            </summary>
            <value>The text align.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenNumeric`1.OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Change" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.ConvertValue">
            <summary>
            Gets or sets the function which returns TValue from string.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.Min">
            <summary>
            Determines the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.Max">
            <summary>
            Determines the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenNumeric`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.UpAriaLabel">
            <summary>
            Gets or sets the up button aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumeric`1.DownAriaLabel">
            <summary>
            Gets or sets the down button aria-label attribute.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenNumeric`1.FocusAsync">
            <summary>
            Sets the focus on the input element.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenNumericRangeValidator">
            <summary>
            A validator component which checks if a component value is within a specified range.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
               &lt;RadzenNumeric style="display: block" Name="Quantity" @bind-Value=@model.Quantity /&gt;
               &lt;RadzenNumericRangeValidator Component="Quantity" Min="1" Max="10" Text="Quantity should be between 1 and 10" Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            @code {
               class Model
               {
                  public decimal Quantity { get; set; }
               }
               Model model = new Model();
            }
            </code>
            </example>>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumericRangeValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid. Set to <c>"Not in the valid range"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumericRangeValidator.Min">
            <summary>
            Specifies the minimum value. The component value should be greater than the minimum in order to be valid.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumericRangeValidator.Max">
            <summary>
            Specifies the maximum value. The component value should be less than the maximum in order to be valid.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenNumericRangeValidator.AllowNull">
            <summary>
            Specifies if value can be null. If true, a null component value will be accepted.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenNumericRangeValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenPager">
            <summary>
            RadzenPager component.
            </summary>
            <example>
            <code>
            &lt;RadzenPager Count="100" PageSize="10" PageNumbersCount="5" PageChanged=@(args => Console.WriteLine($"Skip: {args.Skip}, Top: {args.Top}")) /&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.FirstPageTitle">
            <summary>
            Gets or sets the pager's first page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.FirstPageAriaLabel">
            <summary>
            Gets or sets the pager's first page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PrevPageLabel">
            <summary>
            Gets or sets the pager's optional previous page button's label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PrevPageTitle">
            <summary>
            Gets or sets the pager's previous page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PrevPageAriaLabel">
            <summary>
            Gets or sets the pager's previous page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.LastPageTitle">
            <summary>
            Gets or sets the pager's last page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.LastPageAriaLabel">
            <summary>
            Gets or sets the pager's last page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.NextPageLabel">
            <summary>
            Gets or sets the pager's optional next page button's label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.NextPageTitle">
            <summary>
            Gets or sets the pager's next page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.NextPageAriaLabel">
            <summary>
            Gets or sets the pager's next page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageTitleFormat">
            <summary>
            Gets or sets the pager's numeric page number buttons' title attributes.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageAriaLabelFormat">
            <summary>
            Gets or sets the pager's numeric page number buttons' aria-label attributes.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.HorizontalAlign">
            <summary>
            Gets or sets the horizontal align.
            </summary>
            <value>The horizontal align.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.Density">
            <summary>
            Gets or sets a value indicating Pager density.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageSize">
            <summary>
            Gets or sets the page size.
            </summary>
            <value>The page size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageSizeChanged">
            <summary>
            Gets or sets the page size changed callback.
            </summary>
            <value>The page size changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageSizeOptions">
            <summary>
            Gets or sets the page size options.
            </summary>
            <value>The page size options.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageSizeText">
            <summary>
            Gets or sets the page size description text.
            </summary>
            <value>The page size description text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.ShowPagingSummary">
            <summary>
            Gets or sets the pager summary visibility.
            </summary>
            <value>The pager summary visibility.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PagingSummaryFormat">
            <summary>
            Gets or sets the pager summary format.
            </summary>
            <value>The pager summary format.</value>
            <remarks>
            <see cref="P:Radzen.Blazor.RadzenPager.PagingSummaryTemplate" /> has preference
            </remarks>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PagingSummaryTemplate">
            <summary>
            Gets or sets the pager summary template.
            </summary>
            <remarks>Has preference over <see cref="P:Radzen.Blazor.RadzenPager.PagingSummaryFormat" /></remarks>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageNumbersCount">
            <summary>
            Gets or sets the page numbers count.
            </summary>
            <value>The page numbers count.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.Count">
            <summary>
            Gets or sets the total items count.
            </summary>
            <value>The total items count.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.CurrentPage">
            <summary>
            Gets the current page.
            </summary>
            <value>The current page.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.GetVisible">
            <summary>
            Gets the visible.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.AlwaysVisible">
            <summary>
            Gets or sets a value indicating whether pager is visible even when not enough data for paging.
            </summary>
            <value><c>true</c> if pager is visible even when not enough data for paging otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPager.PageChanged">
            <summary>
            Gets or sets the page changed callback.
            </summary>
            <value>The page changed callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.OnParametersSetAsync">
            <summary>
            Called when parameters set asynchronous.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.OnPageSizeChanged(System.Object)">
            <summary>
            Called when page size changed.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:Radzen.Blazor.RadzenPager.skip">
            <summary>
            Gets or sets number of recrods to skip.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenPager.numberOfPageLinks">
            <summary>
            Gets or sets number of page links.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenPager.startPage">
            <summary>
            Gets or sets start page.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenPager.endPage">
            <summary>
            Gets or sets end page.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenPager.numberOfPages">
            <summary>
            Gets or sets number of pages.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.CalculatePager">
            <summary>
            Calculates the pager.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.GetPage">
            <summary>
            Gets the page.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.GoToPage(System.Int32,System.Boolean)">
            <summary>
            Goes to specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="forceReload">if set to <c>true</c> [force reload].</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.FirstPage(System.Boolean)">
            <summary>
            Goes to first page.
            </summary>
            <param name="forceReload">if set to <c>true</c> [force reload].</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.PrevPage">
            <summary>
            Goes to previous page.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.NextPage">
            <summary>
            Goes to next page.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.LastPage">
            <summary>
            Goes to last page.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handles the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPager.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenPanel">
            <summary>
            RadzenPanel component.
            </summary>
            <example>
            <code>
            &lt;RadzenPanel AllowCollapse="true""&gt;
                &lt;HeaderTemplate&gt;
                    Header
                &lt;/HeaderTemplate&gt;
                &lt;ChildContent&gt;
                    Content
                &lt;/ChildContent&gt;
                &lt;SummaryTemplate&gt;
                    Summary
                &lt;/SummaryTemplate&gt;
            &lt;/RadzenPanel&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanel.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.AllowCollapse">
            <summary>
            Gets or sets a value indicating whether collapsing is allowed. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if collapsing is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.Collapsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenPanel"/> is collapsed.
            </summary>
            <value><c>true</c> if collapsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.HeaderTemplate">
            <summary>
            Gets or sets the header template.
            </summary>
            <value>The header template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.SummaryTemplate">
            <summary>
            Gets or sets the summary template.
            </summary>
            <value>The summary template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.FooterTemplate">
            <summary>
            Gets or sets the footer template.
            </summary>
            <value>The footer template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.Expand">
            <summary>
            Gets or sets the expand callback.
            </summary>
            <value>The expand callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.Collapse">
            <summary>
            Gets or sets the collapse callback.
            </summary>
            <value>The collapse callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.ExpandTitle">
            <summary>
            Gets or sets the title attribute of the expand button.
            </summary>
            <value>The title attribute value of the expand button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.CollapseTitle">
            <summary>
            Gets or sets the title attribute of the collapse button.
            </summary>
            <value>The title attribute value of the collapse button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.ExpandAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the expand button.
            </summary>
            <value>The aria-label attribute value of the expand button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanel.CollapseAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the collapse button.
            </summary>
            <value>The aria-label attribute value of the collapse button.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanel.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPanel.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenPanelMenu">
            <summary>
            RadzenPanelMenu component.
            </summary>
            <example>
            <code>
            &lt;RadzenPanelMenu&gt;
                &lt;RadzenPanelMenuItem Text="Data"&gt;
                    &lt;RadzenPanelMenuItem Text="Orders" Path="orders" /&gt;
                    &lt;RadzenPanelMenuItem Text="Employees" Path="employees" /&gt;
                &lt;/RadzenPanelMenuItemItem&gt;
            &lt;/RadzenPanelMenu&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenu.Multiple">
            <summary>
            Gets or sets a value indicating whether multiple items can be expanded.
            </summary>
            <value><c>true</c> if multiple items can be expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenu.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenu.Match">
            <summary>
            Gets or sets a value representing the URL matching behavior.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenu.DisplayStyle">
            <summary>
            Gets or sets the display style.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenu.ShowArrow">
            <summary>
            Gets or sets the show arrow.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenu.AddItem(Radzen.Blazor.RadzenPanelMenuItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenu.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenu.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenPanelMenuItem">
            <summary>
            RadzenPanelMenuItem component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenuItem.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.ExpandedChanged">
            <summary>
            Gets or sets the expanded changed callback.
            </summary>
            <value>The expanded changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Match">
            <summary>
            Gets or sets the navigation link match.
            </summary>
            <value>The navigation link match.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenPanelMenuItem"/> is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenPanelMenuItem"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenPanelMenuItem"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.ParentItem">
            <summary>
            Gets or sets the parent item.
            </summary>
            <value>The parent item.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPanelMenuItem.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenuItem.AddItem(Radzen.Blazor.RadzenPanelMenuItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenuItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenuItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenuItem.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPanelMenuItem.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenPassword">
            <summary>
            RadzenPassword component.
            </summary>
            <example>
            <code>
            &lt;RadzenPassword Placeholder="Enter password..." Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenPassword.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPassword.OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Change" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPassword.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenPassword.DefaultAutoCompleteAttribute">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPassword.GetId">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenPickList`1">
            <summary>
            RadzenCard component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.AllowMoveAll">
            <summary>
            Gets or sets a value indicating whether it is allowed to move all items.
            </summary>
            <value><c>true</c> if c allowed to move all items; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.AllowMoveAllSourceToTarget">
            <summary>
            Gets or sets a value indicating whether it is allowed to move all items from source to target.
            </summary>
            <value><c>true</c> if c allowed to move all items from source to target; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.AllowMoveAllTargetToSource">
            <summary>
            Gets or sets a value indicating whether it is allowed to move all items from target to source.
            </summary>
            <value><c>true</c> if c allowed to move all items from target to source; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.Multiple">
            <summary>
            Gets or sets a value indicating whether multiple selection is allowed.
            </summary>
            <value><c>true</c> if multiple selection is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.AllowSelectAll">
            <summary>
            Gets or sets a value indicating whether selecting all items is allowed.
            </summary>
            <value><c>true</c> if selecting all items is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.Disabled">
            <summary>
            Gets or sets a value indicating whether component is disabled.
            </summary>
            <value><c>true</c> if component is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SourceHeader">
            <summary>
            Gets or sets the source header
            </summary>
            <value>The source header.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.TargetHeader">
            <summary>
            Gets or sets the target header
            </summary>
            <value>The target header.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.Placeholder">
            <summary>
            Gets or sets the common placeholder
            </summary>
            <value>The common placeholder.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SourcePlaceholder">
            <summary>
            Gets or sets the source placeholder
            </summary>
            <value>The source placeholder.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.TargetPlaceholder">
            <summary>
            Gets or sets the target placeholder
            </summary>
            <value>The target placeholder.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.TextProperty">
            <summary>
            Gets or sets the text property
            </summary>
            <value>The text property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.DisabledProperty">
            <summary>
            Gets or sets the disabled property
            </summary>
            <value>The disabled property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.Template">
            <summary>
            Gets or sets the source template
            </summary>
            <value>The source template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SelectAllText">
            <summary>
            Gets or sets the select all text.
            </summary>
            <value>The select all text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ItemRender">
            <summary>
            Gets or sets the row render callback. Use it to set row attributes.
            </summary>
            <value>The row render callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.AllowFiltering">
            <summary>
            Gets or sets value if filtering is allowed.
            </summary>
            <value>The allow filtering value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ShowHeader">
            <summary>
            Gets or sets value if headers are shown.
            </summary>
            <value>If headers are shown value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ButtonGap">
            <summary>
            Gets or sets the buttons spacing
            </summary>
            <value>The buttons spacing.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.Orientation">
            <summary>
            Gets or sets the orientation
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ButtonJustifyContent">
            <summary>
            Gets or sets the buttons style
            </summary>
            <value>The buttons style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ButtonStyle">
            <summary>
            Gets or sets the buttons style
            </summary>
            <value>The buttons style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ButtonVariant">
            <summary>
            Gets or sets the design variant of the buttons.
            </summary>
            <value>The variant of the buttons.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ButtonShade">
            <summary>
            Gets or sets the color shade of the buttons.
            </summary>
            <value>The color shade of the buttons.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.ButtonSize">
            <summary>
            Gets or sets the buttons size.
            </summary>
            <value>The buttons size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SourceToTargetTitle">
            <summary>
            Gets or sets the source to target title
            </summary>
            <value>The source to target title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SelectedSourceToTargetTitle">
            <summary>
            Gets or sets the selected source to target title
            </summary>
            <value>The selected source to target title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.TargetToSourceTitle">
            <summary>
            Gets or sets the target to source title
            </summary>
            <value>The target to source title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SelectedTargetToSourceTitle">
            <summary>
            Gets or sets the selected target to source  title
            </summary>
            <value>The selected target to source title.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SourceToTargetIcon">
            <summary>
            Gets or sets the source to target icon
            </summary>
            <value>The source to target icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SelectedSourceToTargetIcon">
            <summary>
            Gets or sets the selected source to target icon
            </summary>
            <value>The selected source to target icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.TargetToSourceIcon">
            <summary>
            Gets or sets the target to source icon
            </summary>
            <value>The target to source icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SelectedTargetToSourceIcon">
            <summary>
            Gets or sets the selected target to source  icon
            </summary>
            <value>The selected target to source icon.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPickList`1.GetStyle">
            <summary>
            Gets the final CSS style rendered by the component. Combines it with a <c>style</c> custom attribute.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPickList`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.Source">
            <summary>
            Gets or sets the source collection.
            </summary>
            <value>The source collection.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.SourceChanged">
            <summary>
            Gets or sets the source changed.
            </summary>
            <value>The source changed.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.Target">
            <summary>
            Gets or sets the target collection.
            </summary>
            <value>The target collection.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPickList`1.TargetChanged">
            <summary>
            Gets or sets the target changed.
            </summary>
            <value>The target changed.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPickList`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenPickList`1.GetSelectedSources">
            <summary>
            Returns a collection of TItem that are selected in the source list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenPickList`1.GetSelectedTargets">
            <summary>
            Returns a collection of TItem that are selected in the target list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenPieSeries`1">
            <summary>
            Renders pie series in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
            <typeparam name="TItem">The type of the series data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.X">
            <summary>
            Specifies the x coordinate of the pie center. Not set by default which centers pie horizontally.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.Y">
            <summary>
            Specifies the y coordinate of the pie center. Not set by default which centers pie vertically.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.Radius">
            <summary>
            Specifies the radius of the pie. Not set by default - the pie takes as much size of the chart as possible.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.Fills">
            <summary>
            The fill colors of the pie segments. Used as the background of the segments.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.Strokes">
            <summary>
            The stroke colors of the pie segments.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.StrokeWidth">
            <summary>
            The stroke width of the segments in pixels. By default set to <c>0</c>.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.StartAngle">
            <summary>
            Gets or sets the start angle from which segments are rendered (clockwise). Set to <c>90</c> by default.
            Top is <c>90</c>, right is <c>0</c>, bottom is <c>270</c>, left is <c>180</c>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.TotalAngle">
            <summary>
            Gets or sets the total angle of the pie in degrees. Set to <c>360</c> by default which renders a full circle.
            Set to <c>180</c> to render a half circle or
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.CurrentRadius">
            <summary>
            Returns the current radius - either a specified <see cref="P:Radzen.Blazor.RadzenPieSeries`1.Radius" /> or automatically calculated one.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.CenterX">
            <summary>
            Gets the current X coordinate of the center.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.CenterY">
            <summary>
            Gets the current Y coordinate of the center.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenPieSeries`1.PositiveItems">
            <summary>
            Stores Data filtered to items greater than zero as an IList of <typeparamref name="TItem"/>.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.MeasureLegend">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.RenderLegendItem(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.DataAt(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.TooltipClass(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.TooltipX(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.TooltipY(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.DegToRad(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.ToCartesian(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts radial coordinates to to cartesian.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="radius">The radius.</param>
            <param name="degrees">The degrees.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.Segment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates SVG path that renders the specified segment.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="radius">The radius.</param>
            <param name="innerRadius">The inner radius.</param>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenPieSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenProfileMenu">
            <summary>
            RadzenProfileMenu component.
            </summary>
            <example>
            <code>
            &lt;RadzenProfileMenu&gt;
                &lt;RadzenProfileMenuItem Text="Data"&gt;
                    &lt;RadzenProfileMenuItem Text="Orders" Path="orders" /&gt;
                    &lt;RadzenProfileMenuItem Text="Employees" Path="employees" /&gt;
                &lt;/RadzenProfileMenuItemItem&gt;
            &lt;/RadzenProfileMenu&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenProfileMenu.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenu.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenu.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenu.ShowIcon">
            <summary>
            Show/Hide the "arrow down" icon
            </summary>
            <value>Show the "arrow down" icon.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenProfileMenu.Toggle(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Toggles the menu open/close state.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenProfileMenu.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenProfileMenu.AddItem(Radzen.Blazor.RadzenProfileMenuItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Radzen.Blazor.RadzenProfileMenuItem">
            <summary>
            RadzenProfileMenuItem component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenProfileMenuItem.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Match">
            <summary>
            Gets or sets the navigation link match.
            </summary>
            <value>The navigation link match.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Menu">
            <summary>
            Gets or sets the menu.
            </summary>
            <value>The menu.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenProfileMenuItem.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenProfileMenuItem.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenProgressBar">
            <summary>
            RadzenProgressBar component.
            </summary>
            <example>
            <code>
            &lt;RadzenProgressBar @bind-Value="@value" Max="200" /&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenProgressBar.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The  template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.Unit">
            <summary>
            Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.Min">
            <summary>
            Determines the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.Max">
            <summary>
            Determines the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.ShowValue">
            <summary>
            Gets or sets a value indicating whether value is shown.
            </summary>
            <value><c>true</c> if value is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.ValueChanged">
            <summary>
            Gets or sets the value changed callback.
            </summary>
            <value>The value changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.ProgressBarStyle">
            <summary>
            Gets or sets the progress bar style.
            </summary>
            <value>The progress bar style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBar.NormalizedValue">
            <summary>
            Progress in range from 0 to 1.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenProgressBarCircular">
            <summary>
            RadzenProgressBarCircular component.
            </summary>
            <example>
            <code>
            &lt;RadzenProgressBarCircular @bind-Value="@value" Max="200" /&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenProgressBarCircular.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenProgressBarCircular.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenRadialGaugeScale">
            <summary>
            RadzenRadialGaugeScale component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Gauge">
            <summary>
            Gets or sets the gauge.
            </summary>
            <value>The gauge.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.TickLength">
            <summary>
            Gets or sets the length of the tick.
            </summary>
            <value>The length of the tick.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.MinorTickLength">
            <summary>
            Gets or sets the length of the minor tick.
            </summary>
            <value>The length of the minor tick.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.TickLabelOffset">
            <summary>
            Gets or sets the tick label offset.
            </summary>
            <value>The tick label offset.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Formatter">
            <summary>
            Gets or sets the formatter function.
            </summary>
            <value>The formatter function.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.TickPosition">
            <summary>
            Gets or sets the tick position.
            </summary>
            <value>The tick position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.ShowFirstTick">
            <summary>
            Gets or sets a value indicating whether to show first tick.
            </summary>
            <value><c>true</c> if first tick is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.ShowLastTick">
            <summary>
            Gets or sets a value indicating whether to show last tick.
            </summary>
            <value><c>true</c> if last tick is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.ShowTickLabels">
            <summary>
            Gets or sets a value indicating whether to show tick labels.
            </summary>
            <value><c>true</c> if tick labels are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Min">
            <summary>
            Determines the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Max">
            <summary>
            Determines the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.MinorStep">
            <summary>
            Gets or sets the minor step.
            </summary>
            <value>The minor step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>The margin.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.CurrentRadius">
            <summary>
            Gets the current radius.
            </summary>
            <value>The current radius.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScale.CurrentCenter">
            <summary>
            Gets the current center.
            </summary>
            <value>The current center.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadialGaugeScale.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenRadialGaugeScalePointer">
            <summary>
            RadzenRadialGaugeScalePointer component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.ShowValue">
            <summary>
            Gets or sets a value indicating whether to show value.
            </summary>
            <value><c>true</c> if value is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScalePointer.Gauge">
            <summary>
            Gets or sets the gauge.
            </summary>
            <value>The gauge.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadialGaugeScalePointer.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenRadialGaugeScalePointer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenRadialGaugeScaleRange">
            <summary>
            RadzenRadialGaugeScaleRange component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScaleRange.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScaleRange.To">
            <summary>
            Gets or sets to position.
            </summary>
            <value>To.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScaleRange.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScaleRange.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScaleRange.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScaleRange.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadialGaugeScaleRange.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenRadioButtonList`1">
            <summary>
            RadzenRadioButtonList component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenRadioButtonList @bind-Value=@value TValue="int" Orientation="Orientation.Vertical" &gt;
                &lt;Items&gt;
                    &lt;RadzenRadioButtonListItem Text="Orders" Value="1" /&gt;
                    &lt;RadzenRadioButtonListItem Text="Employees" Value="2" /&gt;
                &lt;/Items&gt;
            &lt;/RadzenRadioButtonList&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.ValueProperty">
            <summary>
            Gets or sets the value property.
            </summary>
            <value>The value property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.TextProperty">
            <summary>
            Gets or sets the text property.
            </summary>
            <value>The text property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.JustifyContent">
            <summary>
            Gets or sets the content justify.
            </summary>
            <value>The content justify.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.AlignItems">
            <summary>
            Gets or sets the items alignment.
            </summary>
            <value>The items alignment.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.Gap">
            <summary>
            Gets or sets the spacing between items
            </summary>
            <value>The spacing between items.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.Wrap">
            <summary>
            Gets or sets the wrap.
            </summary>
            <value>The wrap.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.DisabledProperty">
            <summary>
            Gets or sets the disabled property.
            </summary>
            <value>The disabled property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.VisibleProperty">
            <summary>
            Gets or sets the visible property.
            </summary>
            <value>The visible property.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonList`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonList`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonList`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonList`1.AddItem(Radzen.Blazor.RadzenRadioButtonListItem{`0})">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonList`1.RemoveItem(Radzen.Blazor.RadzenRadioButtonListItem{`0})">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonList`1.IsSelected(Radzen.Blazor.RadzenRadioButtonListItem{`0})">
            <summary>
            Determines whether the specified item is selected.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the specified item is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonList`1.SelectItem(Radzen.Blazor.RadzenRadioButtonListItem{`0})">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonList`1.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenRadioButtonListItem`1">
            <summary>
            RadzenRadioButtonListItem component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonListItem`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonListItem`1.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonListItem`1.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonListItem`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonListItem`1.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenRadioButtonListItem`1"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRadioButtonListItem`1.List">
            <summary>
            Gets or sets the list.
            </summary>
            <value>The list.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonListItem`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenRadioButtonListItem`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenRating">
            <summary>
            RadzenRating component.
            </summary>
            <example>
            <code>
            &lt;RadzenRating Stars="10" Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenRating.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenRating.Stars">
            <summary>
            Gets or sets the number of stars.
            </summary>
            <value>The number of stars.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRating.ClearAriaLabel">
            <summary>
            Gets or sets the clear aria label text.
            </summary>
            <value>The clear aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRating.RateAriaLabel">
            <summary>
            Gets or sets the rate aria label text.
            </summary>
            <value>The rate aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRating.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenRegexValidator">
            <summary>
            A validator component which matches a component value against a specified regular expression pattern.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
               &lt;RadzenTextBox style="display: block" Name="ZIP" @bind-Value=@model.Zip /&gt;
               &lt;RadzenRegexValidator Component="ZIP" Text="ZIP code must be 5 digits" Pattern="\d{5}" Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            @code {
               class Model
               {
                  public string Zip { get; set; }
               }
               Model model = new Model(); 
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenRegexValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid. Set to <c>"Value should match"</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenRegexValidator.Pattern">
            <summary>
            Specifies the regular expression pattern which the component value should match in order to be valid.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenRegexValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenRequiredValidator">
            <summary>
            A validator component which checks if a component has value.
            Must be placed inside a <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
              &lt;RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email /&gt;
              &lt;RadzenRequiredValidator Component="Email" Text="Email is required" Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            @code {
             class Model
             {
               public string Email { get; set; }
             }
             
             Model model = new Model();
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenRequiredValidator.Text">
            <summary>
            Gets or sets the message displayed when the component is invalid. Set to <c>"Required"</c> by default.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenRequiredValidator.Validate(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenRequiredValidator.DefaultValue">
            <summary>
            Specifies a default value. If the component value is equal to <c>DefaultValue</c> it is considered invalid.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenRow">
            <summary>
            RadzenCard component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenRow.Gap">
            <summary>
            Gets or sets the gap.
            </summary>
            <value>The gap.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenRow.RowGap">
            <summary>
            Gets or sets the row gap.
            </summary>
            <value>The row gap.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenRow.GetStyle">
            <summary>
            Gets the final CSS style rendered by the component. Combines it with a <c>style</c> custom attribute.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenRow.GetComponentStyle">
            <summary>
            Gets the component CSS style.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenRow.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenScheduler`1">
            <summary>
            Displays a collection of <see cref="T:Radzen.Blazor.AppointmentData" /> in day, week or month view.
            </summary>
            <typeparam name="TItem">The type of the value item.</typeparam>
            <example>
            <code>
            &lt;RadzenScheduler Data="@data" TItem="DataItem" StartProperty="Start" EndProperty="End" TextProperty="Text"&gt;
                &lt;RadzenMonthView /&gt;
            &lt;/RadzenScheduler&gt;
            @code {
                class DataItem
                {
                    public DateTime Start { get; set; }
                    public DateTime End { get; set; }
                    public string Text { get; set; }
                }
                DataItem[] data = new DataItem[]
                {
                    new DataItem
                    {
                        Start = DateTime.Today,
                        End = DateTime.Today.AddDays(1),
                        Text = "Birthday"
                    },
                };
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.ChildContent">
            <summary>
            Gets or sets the child content of the scheduler. Use to specify what views to render.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.Template">
            <summary>
            Gets or sets the template used to render appointments.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data="@data" TItem="DataItem" StartProperty="Start" EndProperty="End" TextProperty="Text"&gt;
               &lt;Template Context="data"&gt;
                  &lt;strong&gt;@data.Text&lt;/strong&gt;
               &lt;/Template&gt;
               &lt;ChildContent&gt;
                  &lt;RadzenMonthView /&gt;
                &lt;/ChildContent&gt;
            &lt;/RadzenScheduler&gt;
            </code>
            </example>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.NavigationTemplate">
            <summary>
            Gets or sets the additional content to be rendered in place of the default navigation buttons in the scheduler.
            This property allows for complete customization of the navigation controls, replacing the native date navigation buttons (such as year, month, and day) with user-defined content or buttons.
            Use this to add custom controls or interactive elements that better suit your application's requirements.
            This requires that the <c>ShowHeader</c> parameter to be set to true (enabled by default).
            </summary>
            <value>The custom navigation template to replace default navigation buttons.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.Data">
            <summary>
            Gets or sets the data of RadzenScheduler. It will display an appointment for every item of the collection which is within the current view date range.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.StartProperty">
            <summary>
            Specifies the property of <typeparamref name="TItem" /> which will set <see cref="P:Radzen.Blazor.AppointmentData.Start" />.
            </summary>
            <value>The name of the property. Must be a <c>DateTime</c> property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.EndProperty">
            <summary>
            Specifies the property of <typeparamref name="TItem" /> which will set <see cref="P:Radzen.Blazor.AppointmentData.End" />.
            </summary>
            <value>The name of the property. Must be a <c>DateTime</c> property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.SelectedIndex">
            <summary>
            Specifies the initially selected view.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.TodayText">
            <summary>
            Gets or sets the text of the today button. Set to <c>Today</c> by default.
            </summary>
            <value>The today text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.NextText">
            <summary>
            Gets or sets the text of the next button. Set to <c>Next</c> by default.
            </summary>
            <value>The next text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.PrevText">
            <summary>
            Gets or sets the text of the previous button. Set to <c>Previous</c> by default.
            </summary>
            <value>The previous text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.Date">
            <summary>
            Gets or sets the initial date displayed by the selected view. Set to <c>DateTime.Today</c> by default.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.CurrentDate">
            <summary>
            Gets or sets the current date displayed by the selected view. Initially set to <see cref="P:Radzen.Blazor.RadzenScheduler`1.Date" />. Changes during navigation.
            </summary>
            <value>The current date.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.TextProperty">
            <summary>
            Specifies the property of <typeparamref name="TItem" /> which will set <see cref="P:Radzen.Blazor.AppointmentData.Text" />.
            </summary>
            <value>The name of the property. Must be a <c>DateTime</c> property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.ShowHeader">
            <summary>
            Specifies whether to Show or Hide the Scheduler Header. Defaults to true />.
            </summary>
            <value>Show / hide header</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.SlotSelect">
            <summary>
            A callback that will be invoked when the user clicks a slot in the current view. Commonly used to add new appointments.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments SlotSelect=@OnSlotSelect&gt;
            &lt;/RadzenScheduler&gt;
            @code {
             void OnSlotSelect(SchedulerSlotSelectEventArgs args)
             {
             }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.TodaySelect">
            <summary>
            A callback that will be invoked when the user clicks the Today button.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments TodaySelect=@OnTodaySelect&gt;
            &lt;/RadzenScheduler&gt;
            @code {
            void OnTodaySelect(SchedulerTodaySelectEventArgs args)
            {
                args.Today = DateTime.Today.AddDays(1);
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.MonthSelect">
            <summary>
            A callback that will be invoked when the user clicks a month header button.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments MonthSelect=@OnMonthSelect&gt;
            &lt;/RadzenScheduler&gt;
            @code {
            void OnMonthSelect(SchedulerMonthSelectEventArgs args)
            {
                var selectedMonth = args.MonthStart.Month;
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.DaySelect">
            <summary>
            A callback that will be invoked when the user clicks a day header button or the day number in a MonthView.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments DaySelect=@OnDaySelect&gt;
            &lt;/RadzenScheduler&gt;
            @code {
            void OnDaySelect(SchedulerDaySelectEventArgs args)
            {
                var selectedDay = args.Day;
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.AppointmentSelect">
            <summary>
            A callback that will be invoked when the user clicks an appointment in the current view. Commonly used to edit existing appointments.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments AppointmentSelect=@OnAppointmentSelect&gt;
            &lt;/RadzenScheduler&gt;
            @code {
             void OnAppointmentSelect(SchedulerAppointmentSelectEventArgs&lt;TItem&gt; args)
             {
             }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.AppointmentMouseEnter">
            <summary>
            A callback that will be invoked when the user moves the mouse over an appointment in the current view.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.AppointmentMouseLeave">
            <summary>
            A callback that will be invoked when the user moves the mouse out of an appointment in the current view.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.MoreSelect">
            <summary>
            A callback that will be invoked when the user clicks the more text in the current view. Commonly used to view additional appointments.
            Invoke the <see cref="M:Radzen.SchedulerMoreSelectEventArgs.PreventDefault"/> method to prevent the default action (showing the additional appointments).
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments MoreSelect=@OnMoreSelect&gt;
            &lt;/RadzenScheduler&gt;
            @code {
             void OnMoreSelect(SchedulerMoreSelectEventArgs args)
             {
                args.PreventDefault();
             }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.AppointmentRender">
             <summary>
             An action that will be invoked when the current view renders an appointment. Never call <c>StateHasChanged</c> when handling AppointmentRender.
             </summary>
             <example>
             <code>
             &lt;RadzenScheduler Data=@appointments AppointmentRender=@OnAppointmentRendert&gt;
             &lt;/RadzenScheduler&gt;
             @code {
               void OnAppintmentRender(SchedulerAppointmentRenderEventArgs&lt;TItem&gt; args)
               {
                 if (args.Data.Text == "Birthday")
                 {
                    args.Attributes["style"] = "color: red;"
                 }
            .  }
             }
             </code>
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.SlotRender">
            <summary>
            An action that will be invoked when the current view renders an slot. Never call <c>StateHasChanged</c> when handling SlotRender.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments SlotRender=@OnSlotRender&gt;
            &lt;/RadzenScheduler&gt;
            @code {
              void OnSlotRender(SchedulerSlotRenderEventArgs args)
              {
                if (args.View.Text == "Month" &amp;&amp; args.Start.Date == DateTime.Today)
                {
                   args.Attributes["style"] = "background: red;";
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.LoadData">
            <summary>
            A callback that will be invoked when the scheduler needs data for the current view. Commonly used to filter the
            data assigned to <see cref="P:Radzen.Blazor.RadzenScheduler`1.Data" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.AppointmentMove">
            <summary>
            A callback that will be invoked when an appointment is being dragged and then dropped on a different slot.
            Commonly used to change it to a different timeslot.
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data=@appointments AppointmentMove=@OnAppointmentMove&gt;
            &lt;/RadzenScheduler&gt;
            @code {
              async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs moved)
              {
                var draggedAppointment = appointments.SingleOrDefault(x => x == (Appointment)moved.Appointment.Data);
                if (draggedAppointment != null)
                {
                    draggedAppointment.Start = draggedAppointment.Start + moved.TimeSpan;
                    draggedAppointment.End = draggedAppointment.End + moved.TimeSpan;
                    await scheduler.Reload();
                }
              }
            }
            </code>
            </example>
            <value></value>
        </member>
        <member name="P:Radzen.Blazor.RadzenScheduler`1.SelectedView">
            <summary>
            Gets the SelectedView.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.GetAppointmentAttributes(Radzen.Blazor.AppointmentData)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.GetSlotAttributes(System.DateTime,System.DateTime,System.Func{System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData}})">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.RenderAppointment(Radzen.Blazor.AppointmentData)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SelectSlot(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SelectSlot(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SelectMonth(System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SelectDay(System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SelectMore(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{Radzen.Blazor.AppointmentData})">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SelectAppointment(Radzen.Blazor.AppointmentData)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.AddView(Radzen.Blazor.ISchedulerView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SelectView(Radzen.Blazor.ISchedulerView)">
            <summary>
            Selects the specified <see cref="T:Radzen.Blazor.ISchedulerView"/>. The view must already be present in this scheduler.
            If the specified view is already selected, no action will be performed.
            </summary>
            <param name="view">The <see cref="T:Radzen.Blazor.ISchedulerView"/> to select</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.Reload">
            <summary>
            Causes the current scheduler view to render. Enumerates the items of <see cref="P:Radzen.Blazor.RadzenScheduler`1.Data" /> and creates instances of <see cref="T:Radzen.Blazor.AppointmentData" /> to
            display in the current view. Use it when <see cref="P:Radzen.Blazor.RadzenScheduler`1.Data" /> has changed.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.IsSelected(Radzen.Blazor.ISchedulerView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.RemoveView(Radzen.Blazor.ISchedulerView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.IsAppointmentInRange(Radzen.Blazor.AppointmentData,System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.GetAppointmentsInRange(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.Resize(System.Double,System.Double)">
            <summary>
            Invoked from client-side via interop when the scheduler size changes.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenScheduler`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSecurityCode">
            <summary>
            RadzenRating component.
            </summary>
            <example>
            <code>
            &lt;RadzenRating Stars="10" Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenSecurityCode.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSecurityCode.Count">
            <summary>
            Gets or sets the number of input.
            </summary>
            <value>The number of input.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSecurityCode.Type">
            <summary>
            Gets or sets the number of input.
            </summary>
            <value>The number of input.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSecurityCode.Gap">
            <summary>
            Gets or sets the spacing between inputs
            </summary>
            <value>The spacing between inputs.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSecurityCode.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSecurityCode.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSecurityCode.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSecurityCode.OnValueChange(System.String)">
            <summary>
            Called when value changed.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSecurityCode.FocusAsync">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.Blazor.RadzenSelectBar`1">
            <summary>
            RadzenSelectBar component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenSelectBar @bind-Value=@values TValue="IEnumerable&lt;int&gt;" Multiple="true"&gt;
                &lt;Items&gt;
                    &lt;RadzenSelectBarItem Text="Orders" Value="1" /&gt;
                    &lt;RadzenSelectBarItem Text="Employees" Value="2" /&gt;
                    &lt;RadzenSelectBarItem Text="Customers" Value="3" /&gt;
                &lt;/Items&gt;
            &lt;/RadzenSelectBar&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.Size">
            <summary>
            Gets or sets the size. Set to <c>ButtonSize.Medium</c> by default.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.Orientation">
            <summary>
            Gets or sets the orientation. Set to <c>Orientation.Horizontal</c> by default.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.ValueProperty">
            <summary>
            Gets or sets the value property.
            </summary>
            <value>The value property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.TextProperty">
            <summary>
            Gets or sets the text property.
            </summary>
            <value>The text property.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBar`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBar`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.Multiple">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSelectBar`1"/> is multiple.
            </summary>
            <value><c>true</c> if multiple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBar`1.AddItem(Radzen.Blazor.RadzenSelectBarItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBar`1.RemoveItem(Radzen.Blazor.RadzenSelectBarItem)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBar`1.IsSelected(Radzen.Blazor.RadzenSelectBarItem)">
            <summary>
            Determines whether the specified item is selected.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the specified item is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBar`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBar`1.SelectItem(Radzen.Blazor.RadzenSelectBarItem)">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBar`1.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenSelectBarItem">
            <summary>
            RadzenSelectBarItem component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.ImageStyle">
            <summary>
            Gets or sets the image style.
            </summary>
            <value>The image style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSelectBarItem"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSelectBarItem.SelectBar">
            <summary>
            Gets or sets the select bar.
            </summary>
            <value>The select bar.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBarItem.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSelectBarItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSeriesAnnotation`1">
            <summary>
            Displays a text label for the specified data item from the series.
            </summary>
            <example>
            <code>
              &lt;RadzenChart&gt;
                  &lt;RadzenLineSeries Data=@revenue CategoryProperty="Quarter" ValueProperty="Revenue"&gt;
                     &lt;RadzenSeriesAnnotation Data="@revenue[1] Text="Q2 Revenue" /&gt;
                  &lt;/RadzenLineSeries&gt;
              &lt;/RadzenChart&gt;
              @code {
                  class DataItem
                  {
                      public string Quarter { get; set; }
                      public double Revenue { get; set; }
                  }
                  DataItem[] revenue = new DataItem[]
                  {
                      new DataItem { Quarter = "Q1", Revenue = 234000 },
                      new DataItem { Quarter = "Q2", Revenue = 284000 },
                      new DataItem { Quarter = "Q3", Revenue = 274000 },
                      new DataItem { Quarter = "Q4", Revenue = 294000 }
                  };
              }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesAnnotation`1.Data">
            <summary>
            The data item from the series this annotation applies to.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesAnnotation`1.Text">
            <summary>
            The text to display in the annotation.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesAnnotation`1.OffsetX">
            <summary> Horizontal offset from the default position. </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesAnnotation`1.OffsetY">
            <summary> Vertical offset from the default position. </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesAnnotation`1.Fill">
            <summary> The color of the annotation text. </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesAnnotation`1.Visible">
            <summary> Determines whether the annotation is visible. Set to <c>true</c> by default.</summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesAnnotation`1.Series">
            <summary> The series this annotation applies to. Set to <c>true</c> by default.</summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesAnnotation`1.Render(Radzen.Blazor.ScaleBase,Radzen.Blazor.ScaleBase)">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesAnnotation`1.ShouldRefreshChart(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesAnnotation`1.Contains(System.Double,System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesAnnotation`1.RenderTooltip(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesAnnotation`1.GetTooltipPosition(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesAnnotation`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.Blazor.RadzenSeriesDataLabels">
            <summary>
            Displays the series values as text labels.
            </summary>
            <example>
            <code>
              &lt;RadzenChart&gt;
                  &lt;RadzenLineSeries Data=@revenue CategoryProperty="Quarter" ValueProperty="Revenue"&gt;
                     &lt;RadzenSeriesDataLabels /&gt;
                  &lt;/RadzenLineSeries&gt;
              &lt;/RadzenChart&gt;
              @code {
                  class DataItem
                  {
                      public string Quarter { get; set; }
                      public double Revenue { get; set; }
                  }
                  DataItem[] revenue = new DataItem[]
                  {
                      new DataItem { Quarter = "Q1", Revenue = 234000 },
                      new DataItem { Quarter = "Q2", Revenue = 284000 },
                      new DataItem { Quarter = "Q3", Revenue = 274000 },
                      new DataItem { Quarter = "Q4", Revenue = 294000 }
                  };
              }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesDataLabels.OffsetX">
            <summary> Horizontal offset from the default position. </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesDataLabels.OffsetY">
            <summary> Vertical offset from the default position. </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesDataLabels.Visible">
            <summary>Determines the visibility of the data labels. Set to <c>true</c> by default.</summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesDataLabels.Fill">
            <summary>Defines the fill color of the component.</summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesDataLabels.GetSeriesDataLabelClass">
            <summary>
            Gets the CSS class for the data labels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesDataLabels.GetTooltipPosition(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSeriesMeanLine">
            <summary>
            Displays the mean of a chart series.
            </summary>
            <example>
            <code>
              &lt;RadzenChart&gt;
                  &lt;RadzenLineSeries Data=@revenue CategoryProperty="Quarter" ValueProperty="Revenue"&gt;
                     &lt;RadzenSeriesMeanLine /&gt;
                  &lt;/RadzenLineSeries&gt;
              &lt;/RadzenChart&gt;
              @code {
                  class DataItem
                  {
                      public string Quarter { get; set; }
                      public double Revenue { get; set; }
                  }
                  DataItem[] revenue = new DataItem[]
                  {
                      new DataItem { Quarter = "Q1", Revenue = 234000 },
                      new DataItem { Quarter = "Q2", Revenue = 284000 },
                      new DataItem { Quarter = "Q3", Revenue = 274000 },
                      new DataItem { Quarter = "Q4", Revenue = 294000 }
                  };
              }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesMeanLine.Value">
            <ihnheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesMeanLine.Name">
            <ihnheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSeriesMedianLine">
            <summary>
            Displays the median of a chart series.
            </summary>
            <example>
            <code>
              &lt;RadzenChart&gt;
                  &lt;RadzenLineSeries Data=@revenue CategoryProperty="Quarter" ValueProperty="Revenue"&gt;
                     &lt;RadzenSeriesMedianLine /&gt;
                  &lt;/RadzenLineSeries&gt;
              &lt;/RadzenChart&gt;
              @code {
                  class DataItem
                  {
                      public string Quarter { get; set; }
                      public double Revenue { get; set; }
                  }
                  DataItem[] revenue = new DataItem[]
                  {
                      new DataItem { Quarter = "Q1", Revenue = 234000 },
                      new DataItem { Quarter = "Q2", Revenue = 284000 },
                      new DataItem { Quarter = "Q3", Revenue = 274000 },
                      new DataItem { Quarter = "Q4", Revenue = 294000 }
                  };
              }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesMedianLine.Value">
            <ihnheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesMedianLine.Name">
            <ihnheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSeriesModeLine">
            <summary>
            Displays the mode of a chart series.
            </summary>
            <example>
            <code>
              &lt;RadzenChart&gt;
                  &lt;RadzenLineSeries Data=@revenue CategoryProperty="Quarter" ValueProperty="Revenue"&gt;
                     &lt;RadzenSeriesModeLine /&gt;
                  &lt;/RadzenLineSeries&gt;
              &lt;/RadzenChart&gt;
              @code {
                  class DataItem
                  {
                      public string Quarter { get; set; }
                      public double Revenue { get; set; }
                  }
                  DataItem[] revenue = new DataItem[]
                  {
                      new DataItem { Quarter = "Q1", Revenue = 234000 },
                      new DataItem { Quarter = "Q2", Revenue = 284000 },
                      new DataItem { Quarter = "Q3", Revenue = 274000 },
                      new DataItem { Quarter = "Q4", Revenue = 294000 }
                  };
              }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesModeLine.Value">
            <ihnheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSeriesModeLine.Name">
            <ihnheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSeriesTrendLine">
            <summary>
            Displays the trend of a chart series.
            </summary>
            <example>
            <code>
              &lt;RadzenChart&gt;
                  &lt;RadzenLineSeries Data=@revenue CategoryProperty="Quarter" ValueProperty="Revenue"&gt;
                     &lt;RadzenSeriesTrendLine /&gt;
                  &lt;/RadzenLineSeries&gt;
              &lt;/RadzenChart&gt;
              @code {
                  class DataItem
                  {
                      public string Quarter { get; set; }
                      public double Revenue { get; set; }
                  }
                  DataItem[] revenue = new DataItem[]
                  {
                      new DataItem { Quarter = "Q1", Revenue = 234000 },
                      new DataItem { Quarter = "Q2", Revenue = 284000 },
                      new DataItem { Quarter = "Q3", Revenue = 274000 },
                      new DataItem { Quarter = "Q4", Revenue = 294000 }
                  };
              }
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesTrendLine.GetTooltipPosition(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSidebar">
            <summary>
            RadzenSidebar component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebar.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebar.Responsive">
            <summary>
            Toggles the responsive mode of the component. If set to <c>true</c> (the default) the component will be 
            expanded on larger displays and collapsed on touch devices. Set to <c>false</c> if you want to disable this behavior.
            Responsive mode is only available when RadzenSidebar is inside <see cref="T:Radzen.Blazor.RadzenLayout" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebar.Layout">
            <summary>
            The <see cref="T:Radzen.Blazor.RadzenLayout" /> this component is nested in.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSidebar.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSidebar.Toggle">
            <summary>
            Toggles this instance expanded state.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSidebar.GetStyle">
            <summary>
            Gets the style.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebar.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSidebar"/> is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebar.ExpandedChanged">
            <summary>
            Gets or sets the expanded changed callback.
            </summary>
            <value>The expanded changed callback.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSidebar.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSidebar.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSidebarToggle">
            <summary>
            RadzenSidebarToggle component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebarToggle.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebarToggle.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSidebarToggle.OnClick(System.EventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSidebarToggle.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSidebarToggle.ToggleAriaLabel">
            <summary>
            Gets or sets the add button aria-label attribute.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenSlider`1">
            <summary>
            RadzenSlider component.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <example>
            <code>
            &lt;RadzenSlider @bind-Value=@value TValue="int" Min="0" Max="100" Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenSlider`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSlider`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSlider`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSlider`1.OnValueChange(System.Decimal,System.Boolean)">
            <summary>
            Called when value changed.
            </summary>
            <param name="value">The value.</param>
            <param name="isMin">if set to <c>true</c> [is minimum].</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSlider`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSlider`1.Orientation">
            <summary>
            Specifies the orientation. Set to <c>Orientation.Horizontal</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSlider`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSlider`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSlider`1.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSlider`1.Range">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSlider`1"/> is range.
            </summary>
            <value><c>true</c> if range; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSlider`1.Min">
            <summary>
            Determines the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSlider`1.Max">
            <summary>
            Determines the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenSparkline">
            <summary>
            A sparkline is a small chart that provides a simple way to visualize trends in data.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSparkline.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Radzen.Blazor.RadzenSparkline" />.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSparkline.UpdateScales">
            <summary>
            Updates the scales based on the configuration.
            </summary>
            <returns>True if the chart should refresh; otherwise false;</returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenSpeechToTextButton">
            <summary>
            RadzenSpeechToTextButton component. Enables speech to text functionality.
            <para>This is only supported on select browsers. See https://caniuse.com/?search=SpeechRecognition</para>
            <example>
            <code>
            &lt;RadzenSpeechToTextButton Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.ButtonStyle">
            <summary>
            Gets or sets the button style.
            </summary>
            <value>The button style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.Icon">
            <summary>
            Gets or sets the icon displayed while not recording.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.StopIcon">
            <summary>
            Gets or sets the icon displayed while recording.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.Title">
            <summary>
            Gets or sets the message displayed when user hovers the button and it is not recording.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.StopTitle">
            <summary>
            Gets or sets the message displayed when user hovers the button and it is recording.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.Change">
            <summary>
            Callback which provides results from the speech recognition API.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSpeechToTextButton.Language">
            <summary>
            Gets or sets the icon displayed while recording.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSpeechToTextButton.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSpeechToTextButton.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSpeechToTextButton.StopRecording">
            <summary>
            Provides interface for javascript to stop speech to text recording on this component if another component starts recording.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSpeechToTextButton.OnResult(System.String)">
            <summary>
            Provides interface for javascript to pass speech results back to this component.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Radzen.Blazor.RadzenSplitButton">
            <summary>
            RadzenSplitButton component.
            </summary>
            <example>
            <code>
            &lt;RadzenSplitButton Click=@(args => Console.WriteLine($"Value is: {args.Value}"))&gt;
                &lt;ChildContent&gt;
                    &lt;RadzenSplitButtonItem Text="Orders" Value="1" /&gt;
                    &lt;RadzenSplitButtonItem Text="Employees" Value="2" /&gt;
                    &lt;RadzenSplitButtonItem Text="Customers" Value="3" /&gt;
                &lt;/ChildContent&gt;
            &lt;/RadzenSelectBar&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.ButtonContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.ButtonStyle">
            <summary>
            Gets or sets the button style.
            </summary>
            <value>The button style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Variant">
            <summary>
            Gets or sets the design variant of the button.
            </summary>
            <value>The variant of the button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Shade">
            <summary>
            Gets or sets the color shade of the button.
            </summary>
            <value>The color shade of the button.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.IsBusy">
            <summary>
            Gets or sets a value indicating whether this instance busy text is shown.
            </summary>
            <value><c>true</c> if this instance busy text is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.BusyText">
            <summary>
            Gets or sets the busy text.
            </summary>
            <value>The busy text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.IsDisabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSplitButton"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.AlwaysOpenPopup">
            <summary>
            Gets or sets the value indication behaviour to always open popup with item on click and not invoke <see cref="P:Radzen.Blazor.RadzenSplitButton.Click"/> event.
            </summary>
            <value><c>true</c> to alway open popup with items; othersie, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.OpenAriaLabel">
            <summary>
            Gets or sets the open button aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.DropDownIcon">
            <summary>
            Gets or sets the icon of the drop down.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.TabIndex">
            <summary>
            Gets or sets the index of the tab.
            </summary>
            <value>The index of the tab.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.Click">
            <summary>
            Gets or sets the click callback.
            </summary>
            <value>The click callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.ButtonType">
            <summary>
            Gets or sets the type of the button.
            </summary>
            <value>The type of the button.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButton.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButton.Close">
            <summary>
            Closes this instance popup.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.PopupID">
            <summary>
            Gets the popup identifier.
            </summary>
            <value>The popup identifier.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButton.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButton.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButton.AddItem(Radzen.Blazor.RadzenSplitButtonItem)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButton.RemoveItem(Radzen.Blazor.RadzenSplitButtonItem)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButton.ButtonAriaLabel">
            <summary>
            Gets or sets the add button aria-label attribute.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenSplitButtonItem">
            <summary>
            RadzenSplitButtonItem component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButtonItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButtonItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButtonItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButtonItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButtonItem.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSplitButtonItem"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitButtonItem.SplitButton">
            <summary>
            Gets or sets the split button.
            </summary>
            <value>The split button.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButtonItem.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:Click" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitButtonItem.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSplitter">
            <summary>
            RadzenSplitter component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitter.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitter.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitter.AddPane(Radzen.Blazor.RadzenSplitterPane)">
            <summary>
            Adds the pane.
            </summary>
            <param name="pane">The pane.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitter.RemovePane(Radzen.Blazor.RadzenSplitterPane)">
            <summary>
            Removes the pane.
            </summary>
            <param name="pane">The pane.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitter.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitter.IsResizing">
            <summary>
            Value indicating if the splitter is resizing.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitter.OnPaneResizing">
            <summary>
            Called on pane resizing.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitter.OnPaneResized(System.Int32,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double})">
            <summary>
            Called when pane resized.
            </summary>
            <param name="paneIndex">Index of the pane.</param>
            <param name="sizeNew">The size new.</param>
            <param name="paneNextIndex">Index of the pane next.</param>
            <param name="sizeNextNew">The size next new.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitter.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitter.Collapse">
            <summary>
            Gets or sets the collapse callback.
            </summary>
            <value>The collapse callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitter.Expand">
            <summary>
            Gets or sets the expand callback.
            </summary>
            <value>The expand callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitter.Resize">
            <summary>
            Gets or sets the resize callback.
            </summary>
            <value>The resize callback.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenSplitterPane">
            <summary>
            RadzenSplitterPane component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.Collapsible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSplitterPane"/> is collapsible.
            </summary>
            <value><c>true</c> if collapsible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.Collapsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSplitterPane"/> is collapsed.
            </summary>
            <value><c>true</c> if collapsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.Resizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenSplitterPane"/> is resizable.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.Max">
            <summary>
            Determines the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.Min">
            <summary>
            Determines the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.BarVisible">
            <summary>
            Gets or sets the visibility of the splitter bar.
            </summary>
            <value>The visibility of the splitter bar.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSplitterPane.Splitter">
            <summary>
            Gets or sets the splitter.
            </summary>
            <value>The splitter.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitterPane.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitterPane.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitterPane.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSplitterPane.GetComponentBarCssClass">
            <summary>
            Gets the component bar CSS class.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenSSRSViewer">
            <summary>
            RadzenSSRSViewer component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewer.UseProxy">
            <summary>
            Gets or sets a value indicating whether to use proxy.
            </summary>
            <value><c>true</c> if proxy is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewer.ReportServer">
            <summary>
            Gets or sets the report server URL.
            </summary>
            <value>The report server URL.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewer.LocalServer">
            <summary>
            Gets or sets the local server URL.
            </summary>
            <value>The local server URL.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewer.ReportName">
            <summary>
            Gets or sets the name of the report.
            </summary>
            <value>The name of the report.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewer.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewer.ReportUrl">
            <summary>
            Gets the report URL.
            </summary>
            <value>The report URL.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSSRSViewer.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSSRSViewer.AddParameter(Radzen.Blazor.RadzenSSRSViewerParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSSRSViewer.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewer.Load">
            <summary>
            Gets or sets the load callback.
            </summary>
            <value>The load callback.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenSSRSViewerParameter">
            <summary>
            RadzenSSRSViewerParameter component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewerParameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewerParameter.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSSRSViewerParameter.Viewer">
            <summary>
            Gets or sets the viewer.
            </summary>
            <value>The viewer.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenStack">
            <summary>
            RadzenStack component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStack.Wrap">
            <summary>
            Gets or sets the wrap.
            </summary>
            <value>The wrap.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStack.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStack.Gap">
            <summary>
            Gets or sets the spacing
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStack.Reverse">
            <summary>
            Gets or sets the reverse
            </summary>
            <value>The reverse.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenStack.GetStyle">
            <summary>
            Gets the final CSS style rendered by the component. Combines it with a <c>style</c> custom attribute.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenStack.GetComponentStyle">
            <summary>
            Gets the component CSS style.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenStack.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenStackedAreaSeries`1">
            <summary>
            Renders stacked area series in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedAreaSeries`1.Stroke">
            <summary>
            Specifies the color of the line.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedAreaSeries`1.Fill">
            <summary>
            Specifies the fill (background color) of the area series.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedAreaSeries`1.StrokeWidth">
            <summary>
            Gets or sets the pixel width of the line. Set to <c>2</c> by default.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedAreaSeries`1.LineType">
            <summary>
            Specifies the line type.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedAreaSeries`1.Smooth">
            <summary>
            Specifies whether to render a smooth line. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedAreaSeries`1.Interpolation">
            <summary>
            Specifies how to render lines between data points. Set to <see cref="F:Radzen.Blazor.Interpolation.Line"/> by default
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedAreaSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedAreaSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedAreaSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedAreaSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedAreaSeries`1.TooltipY(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedAreaSeries`1.TransformValueScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenStackedBarSeries`1">
            <summary>
            Renders bar series in <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
            <typeparam name="TItem">The type of the series data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.Fill">
            <summary>
            Specifies the fill (background color) of the bar series.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.Fills">
            <summary>
            Specifies a list of colors that will be used to set the individual bar backgrounds.
            </summary>
            <value>The fills.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.Stroke">
            <summary>
            Specifies the stroke (border color) of the bar series.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.Strokes">
            <summary>
            Specifies a list of colors that will be used to set the individual bar borders.
            </summary>
            <value>The strokes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke (border).
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.LineType">
            <summary>
            Gets or sets the type of the line used to render the bar border.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.FillRange">
            <summary>
            Gets or sets the color range of the fill.
            </summary>
            <value>The color range of the fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.StrokeRange">
            <summary>
            Gets or sets the color range of the stroke.
            </summary>
            <value>The color range of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedBarSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.TransformCategoryScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.TransformValueScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.GetCategories">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.TooltipX(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.TooltipValue(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.TooltipTitle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.DataAt(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.TooltipY(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedBarSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenStackedColumnSeries`1">
            <summary>
            Renders column series in <see cref="T:Radzen.Blazor.RadzenChart" />
            </summary>
            <typeparam name="TItem">The type of the series data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.Fill">
            <summary>
            Specifies the fill (background color) of the column series.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.Fills">
            <summary>
            Specifies a list of colors that will be used to set the individual column backgrounds.
            </summary>
            <value>The fills.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.Stroke">
            <summary>
            Specifies the stroke (border color) of the column series.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.Strokes">
            <summary>
            Specifies a list of colors that will be used to set the individual column borders.
            </summary>
            <value>The strokes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke (border).
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.LineType">
            <summary>
            Gets or sets the type of the line used to render the column border.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.FillRange">
            <summary>
            Gets or sets the color range of the fill.
            </summary>
            <value>The color range of the fill.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.StrokeRange">
            <summary>
            Gets or sets the color range of the stroke.
            </summary>
            <value>The color range of the stroke.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStackedColumnSeries`1.Color">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedColumnSeries`1.TooltipStyle(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedColumnSeries`1.Contains(System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedColumnSeries`1.TooltipX(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedColumnSeries`1.TooltipY(`0)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedColumnSeries`1.DataAt(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedColumnSeries`1.GetDataLabels(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenStackedColumnSeries`1.TransformValueScale(Radzen.Blazor.ScaleBase)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSteps">
            <summary>
            RadzenSteps component.
            </summary>
            <example>
            <code>
            &lt;RadzenSteps Change=@(args => Console.WriteLine($"Selected index is: {args}"))&gt;
                &lt;Steps&gt;
                    &lt;RadzenStepsItem Text="Orders"&gt;
                        Details for Orders
                    &lt;/RadzenStepsItem&gt;
                    &lt;RadzenStepsItem Text="Employees"&gt;
                        Details for Employees
                    &lt;/RadzenStepsItem&gt;
                &lt;/Steps&gt;
            &lt;/RadzenTabs&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.ShowStepsButtons">
            <summary>
            Gets or sets a value indicating whether to show steps buttons.
            </summary>
            <value><c>true</c> if steps buttons are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.EditContext">
            <summary>
            Gets or sets the edit context.
            </summary>
            <value>The edit context.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.StepsCollection">
            <summary>
            Gets the steps collection.
            </summary>
            <value>The steps collection.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSteps.NextStep">
            <summary>
            Goes to next step.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenSteps.PrevStep">
            <summary>
            Goes to previous step.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.SelectedIndex">
            <summary>
            Gets or sets the selected index.
            </summary>
            <value>The selected index.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.SelectedIndexChanged">
            <summary>
            Gets or sets the selected index changed callback.
            </summary>
            <value>The selected index changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.Change">
            <summary>
            Gets or sets the change callback.
            </summary>
            <value>The change callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.CanChange">
            <summary>
            A callback that will be invoked when the user tries to change the step.
            Invoke the <see cref="M:Radzen.Blazor.StepsCanChangeEventArgs.PreventDefault"/> method to prevent this change.
            </summary>
            <example>
            <code>
            &lt;RadzenSteps CanChange=@OnCanChange&gt;
            &lt;/RadzenSteps&gt;
            @code {
             void OnCanChange(RadzenStepsCanChangeEventArgs args)
             {
                args.PreventDefault();
             }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.NextText">
            <summary>
            Gets or sets the next button text.
            </summary>
            <value>The next button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.PreviousText">
            <summary>
            Gets or sets the previous button text.
            </summary>
            <value>The previous button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.NextTitle">
            <summary>
            Gets or sets the next button title attribute.
            </summary>
            <value>The next button title attribute.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.PreviousTitle">
            <summary>
            Gets or sets the previous button title attribute.
            </summary>
            <value>The previous button title attribute.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.NextAriaLabel">
            <summary>
            Gets the next button aria-label attribute.
            </summary>
            <value>The next button aria-label attribute.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.PreviousAriaLabel">
            <summary>
            Gets the previous button aria-label attribute.
            </summary>
            <value>The previous button aria-label attribute.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.Steps">
            <summary>
            Gets or sets the steps.
            </summary>
            <value>The steps.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenSteps.AllowStepSelect">
            <summary>
            
            </summary>
            <value><c>true</c> user can jump to any step if enabled; <c>false</c> user can change steps only with step buttons (previous/next).</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSteps.AddStep(Radzen.Blazor.RadzenStepsItem)">
            <summary>
            Adds the step.
            </summary>
            <param name="step">The step.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSteps.RemoveStep(Radzen.Blazor.RadzenStepsItem)">
            <summary>
            Removes the step.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenSteps.IsSelected(System.Int32,Radzen.Blazor.RadzenStepsItem)">
            <summary>
            Determines whether the specified index is selected.
            </summary>
            <param name="index">The index.</param>
            <param name="step">The step.</param>
            <returns><c>true</c> if the specified index is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenSteps.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenSteps.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenStepsItem">
            <summary>
            RadzenStepsItem component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.Title">
            <summary>
            Gets or sets the title attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.AriaLabel">
            <summary>
            Gets or sets the aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.NextText">
            <summary>
            Gets or sets text of the next button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.NextTitle">
            <summary>
            Gets or sets the title attribute of the next button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.NextAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the next button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.PreviousText">
            <summary>
            Gets or sets text of the previous button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.PreviousTitle">
            <summary>
            Gets or sets the title attribute of the previous button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.PreviousAriaLabel">
            <summary>
            Gets or sets the aria-label attribute of the previous button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenStepsItem"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.RadzenComponent" /> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenStepsItem"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenStepsItem.Steps">
            <summary>
            Gets or sets the steps.
            </summary>
            <value>The steps.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenStepsItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenStepsItem.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenSwitch">
            <summary>
            RadzenSwitch component.
            </summary>
            <example>
            <code>
            &lt;RadzenSwitch @bind-Value=@value Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenSwitch.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSwitch.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenSwitch.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSwitch.Toggle">
            <summary>
            Toggles this instance checked state.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTable">
            <summary>
            Display a styled table with data.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTable.GridLines">
            <summary>
            Gets or sets the grid lines style.
            </summary>
            <value>The grid lines.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTable.AllowAlternatingRows">
            <summary>
            Gets or sets a value indicating whether RadzenTable should use alternating row styles.
            </summary>
            <value><c>true</c> if RadzenTable is using alternating row styles; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenTable.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTable.GetTableCssClass">
            <summary>
            Gets the table CSS classes.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTableBody">
            <summary>
            RadzenTableBody component.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTableCell">
            <summary>
            Represents a cell in <see cref="T:Radzen.Blazor.RadzenTable"/>
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTableCell.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTableHeader">
            <summary>
            RadzenTableHeader component.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTableHeaderCell">
            <summary>
            RadzenTableRow component.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTableHeaderRow">
            <summary>
            RadzenTableRow component.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTableRow">
            <summary>
            RadzenTableRow component.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTableRow.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTabs">
            <summary>
            RadzenTabs component.
            </summary>
            <example>
            <code>
            &lt;RadzenTabs RenderMode="TabRenderMode.Client" Change=@(args => Console.WriteLine($"Selected index is: {args}"))&gt;
                &lt;Tabs&gt;
                    &lt;RadzenTabsItem Text="Orders"&gt;
                        Details for Orders
                    &lt;/RadzenTabsItem&gt;
                    &lt;RadzenTabsItem Text="Employees"&gt;
                        Details for Employees
                    &lt;/RadzenTabsItem&gt;
                &lt;/Tabs&gt;
            &lt;/RadzenTabs&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabs.RenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
            <value>The render mode.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabs.TabPosition">
            <summary>
            Gets or sets the tab position.
            </summary>
            <value>The tab position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabs.SelectedIndex">
            <summary>
            Gets or sets the selected index.
            </summary>
            <value>The selected index.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabs.SelectedIndexChanged">
            <summary>
            Gets or sets the selected index changed callback.
            </summary>
            <value>The selected index changed callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabs.Change">
            <summary>
            Gets or sets the change callback.
            </summary>
            <value>The change callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabs.Tabs">
            <summary>
            Gets or sets the tabs.
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.AddTab(Radzen.Blazor.RadzenTabsItem)">
            <summary>
            Adds the tab.
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabs.SelectedTab">
            <summary>
            Gets the currently selected RadzenTabsItem based on the selectedIndex.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.RemoveItem(Radzen.Blazor.RadzenTabsItem)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTabs.ShouldRender">
            <summary>
            Should render.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTabsItem">
            <summary>
            RadzenTabsItem component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Attributes">
            <summary>
            Gets or sets the arbitrary attributes.
            </summary>
            <value>The arbitrary attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenTabsItem"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenTabsItem"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenTabsItem"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Class">
            <summary>
            Gets the class list.
            </summary>
            <value>The class list.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTabsItem.Tabs">
            <summary>
            Gets or sets the tabs.
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenTabsItem.OnInitializedAsync">
            <summary>
            On initialized as an asynchronous operation.
            </summary>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenTabsItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTabsItem.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTemplateForm`1">
             <summary>
             A component which represents a <c>form</c>. Provides validation support.
             </summary>
             <example>
             <code>
             &lt;RadzenTemplateForm TItem="Model" Data=@model&gt;
               &lt;RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email /&gt;
               &lt;RadzenRequiredValidator Component="Email" Text="Email is required" Style="position: absolute" /&gt;
             &lt;/RadzenTemplateForm&gt;
             @code {
              class Model
              {
                public string Email { get; set; }
              }
            
              Model model = new Model();
             }
             </code>
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.IsValid">
            <summary>
            Returns the validity of the form.
            </summary>
            <value><c>true</c> if all validators in the form a valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.Data">
            <summary>
            Specifies the model of the form. Required to support validation.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.Submit">
             <summary>
             A callback that will be invoked when the user submits the form and <see cref="P:Radzen.Blazor.RadzenTemplateForm`1.IsValid" /> is <c>true</c>.
             </summary>
             <example>
             <code>
             &lt;RadzenTemplateForm TItem="Model" Submit=@OnSubmit Data=@model&gt;
               &lt;RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email /&gt;
               &lt;RadzenRequiredValidator Component="Email" Text="Email is required" Style="position: absolute" /&gt;
             &lt;/RadzenTemplateForm&gt;
             @code {
              class Model
               {
                public string Email { get; set; }
              }
            
              Model model = new Model();
            
              void OnSubmit(Model value)
              {
            
              }
             }
             </code>
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.OnInvalidSubmit">
            <summary>
            Obsolete. Use <see cref="P:Radzen.Blazor.RadzenTemplateForm`1.InvalidSubmit" /> instead.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.InvalidSubmit">
             <summary>
             A callback that will be invoked when the user submits the form and <see cref="P:Radzen.Blazor.RadzenTemplateForm`1.IsValid" /> is <c>false</c>.
             </summary>
             <example>
             <code>
             &lt;RadzenTemplateForm TItem="Model" InvalidSubmit=@OnInvalidSubmit Data=@model&gt;
               &lt;RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email /&gt;
               &lt;RadzenRequiredValidator Component="Email" Text="Email is required" Style="position: absolute" /&gt;
             &lt;/RadzenTemplateForm&gt;
             @code {
              class Model
              {
                public string Email { get; set; }
              }
            
              Model model = new Model();
            
              void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
              {
            
              }
             }
             </code>
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.Method">
            <summary>
            Specifies the form <c>method</c> attribute. Used together with <see cref="P:Radzen.Blazor.RadzenTemplateForm`1.Action" />.
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Method="post" Action="/register" Data=@model&gt;
              &lt;RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email /&gt;
              &lt;RadzenRequiredValidator Component="Email" Text="Email is required" Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.Action">
            <summary>
            Specifies the form <c>action</c> attribute. When set the form submits to the specified URL.
            </summary>
            <example>
            <code>
            &lt;RadzenTemplateForm TItem="Model" Method="post" Action="/register" Data=@model&gt;
              &lt;RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email /&gt;
              &lt;RadzenRequiredValidator Component="Email" Text="Email is required" Style="position: absolute" /&gt;
            &lt;/RadzenTemplateForm&gt;
            </code>
            </example>
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.Blazor.RadzenTemplateForm`1"/> class.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.OnSubmit">
            <summary>
            Handles the submit event of the form.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.AddComponent(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.RemoveComponent(Radzen.IRadzenFormComponent)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.FindComponent(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenTemplateForm`1.EditContext">
            <summary>
            Gets or sets the edit context.
            </summary>
            <value>The edit context.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTemplateForm`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.TextStyle">
            <summary>
            The display style of the text. It overrides the tag name and provides predefined styling.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.DisplayH1">
            <summary>Display as largest header.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.DisplayH2">
            <summary>Display as second largest header.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.DisplayH3">
            <summary>Display as third largest header.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.DisplayH4">
            <summary>Display as fourth largest header.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.DisplayH5">
            <summary>Display as fifth largest header.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.DisplayH6">
            <summary>Display as sixth largest header.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.H1">
            <summary>Display as H1 element.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.H2">
            <summary>Display as H2 element.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.H3">
            <summary>Display as H3 element.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.H4">
            <summary>Display as H4 element.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.H5">
            <summary>Display as H5 element.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.H6">
            <summary>Display as H6 element.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.Subtitle1">
            <summary>Display as subtitle.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.Subtitle2">
            <summary>Display as a smaller subtitle.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.Body1">
            <summary>Display as a paragraph.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.Body2">
            <summary>Display as a smaller paragraph.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.Button">
            <summary>Display as button text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.Caption">
            <summary>Display as a caption.</summary>
        </member>
        <member name="F:Radzen.Blazor.TextStyle.Overline">
            <summary>Display as overline.</summary>
        </member>
        <member name="T:Radzen.Blazor.TagName">
            <summary>
            The tag name of the element that will be rendered.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.Div">
            <summary>Use &lt;div&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.Span">
            <summary>Use &lt;span&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.P">
            <summary>Use &lt;p&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.H1">
            <summary>Use &lt;h1&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.H2">
            <summary>Use &lt;h2&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.H3">
            <summary>Use &lt;h3&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.H4">
            <summary>Use &lt;h4&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.H5">
            <summary>Use &lt;h5&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.H6">
            <summary>Use &lt;h6&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.A">
            <summary>Use &lt;a&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.Button">
            <summary>Use &lt;button&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.Pre">
            <summary>Use &lt;pre&gt; to render the text.</summary>
        </member>
        <member name="F:Radzen.Blazor.TagName.Auto">
            <summary>The tag name will be determined depending on the TextStyle.</summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenText">
            <summary>
            A component which displays text or makup with predefined styling.
            </summary>
            <example>
              <code>
            &lt;RadzenText TextStyle="TextStyle.H1"&gt;
             Hello World
            &lt;/RadzenText&gt;
              </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenText.Text">
            <summary>
            The text that will be displayed.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenText.ChildContent">
            <summary>
            The child content (markup) that will be displayed. Setting the <see cref="P:Radzen.Blazor.RadzenText.Text"/> property will override it.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenText.TextStyle">
            <summary>
            The style of the text. Set to <see cref="F:Radzen.Blazor.TextStyle.Body1"/> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenText.TextAlign">
            <summary>
            The horozontal alignment of the text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenText.TagName">
            <summary>
            The tag name of the element that will be rendered. Set to <see cref="F:Radzen.Blazor.TagName.Auto"/> which uses a default tag name depending on the current <see cref="P:Radzen.Blazor.RadzenText.TextStyle" />.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenText.Anchor">
            <summary>
            Gets or sets the anchor name. If set an additional anchor will be rendered. Clicking on the anchor will scroll the page to the element with the same id.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenText.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTextArea">
            <summary>
            RadzenTextArea component.
            </summary>
            <example>
            <code>
            &lt;RadzenTextArea Cols="30" Rows="3" @bind-Value=@value Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTextArea.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTextArea.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTextArea.Rows">
            <summary>
            Gets or sets the number of rows.
            </summary>
            <value>The number of rows.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTextArea.Cols">
            <summary>
            Gets or sets the number of cols.
            </summary>
            <value>The number of cols.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenTextArea.OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Change" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenTextArea.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTextArea.GetId">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTextBox">
            <summary>
            An input component for single line text entry.
            </summary>
            <example>
            <code>
            &lt;RadzenTextBox @bind-Value=@value Change=@(args => Console.WriteLine($"Value: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTextBox.ReadOnly">
            <summary>
            Gets or sets a value indicating whether is read only.
            </summary>
            <value><c>true</c> if is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTextBox.MaxLength">
            <summary>
            Gets or sets the maximum allowed text length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTextBox.Trim">
            <summary>
            Specifies whether to remove any leading or trailing whitespace from the value. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if trimming is enabled; otherwise, <c>false</c>. </value>
        </member>
        <member name="M:Radzen.Blazor.RadzenTextBox.OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles change event of the built-in <c>input</c> elementt.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTextBox.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTextBox.GetId">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTheme">
            <summary>
            Registers and manages the current theme. Requires <see cref="P:Radzen.Blazor.RadzenTheme.ThemeService" /> to be registered in the DI container.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTheme.Theme">
            <summary>
            Gets or sets the theme.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTheme.PreloadIconFont">
            <summary>
            When set to true the icon font will be preloadd.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTheme.Wcag">
            <summary>
            Enables WCAG contrast requirements. If set to true additional CSS file will be loaded.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTheme.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTheme.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenTicks">
            <summary>
            Tick configuration of <see cref="T:Radzen.Blazor.IChartAxis" />. 
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTicks.Stroke">
            <summary>
            Specifies the color of the ticks lines.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTicks.StrokeWidth">
            <summary>
            Specifies the width of the tick lines. Set to <c>1</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTicks.LineType">
            <summary>
            Specifies the type of line used to render the ticks.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTicks.ChartAxis">
            <summary>
            The axis which this configuration applies to.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTicks.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenTimeline">
            <summary>
            RadzenTimeline component is a graphical representation used to display a chronological sequence of events or data points.
            </summary>
            <example>
            <code>
            &lt;RadzenTimeline&gt;
            &lt;Items&gt;
                &lt;RadzenTimelineItem&gt;
                    &lt;ChildContent&gt;
                        Checkpoint 1
                    &lt;/ChildContent&gt;
                &lt;/RadzenTimelineItem&gt;
                &lt;RadzenTimelineItem&gt;
                    &lt;ChildContent&gt;
                        Checkpoint 2
                    &lt;/ChildContent&gt;
                &lt;/RadzenTimelineItem&gt;
            &lt;/Items&gt;
            &lt;/RadzenTimeline&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeline.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeline.Orientation">
            <summary>
            Specifies the orientation - whether items flow in horizontal or vertical direction. Set to <c>Orientation.Vertical</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeline.LinePosition">
            <summary>
            Specifies the line position. Set to <c>LinePosition.Center</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeline.Reverse">
            <summary>
            Specifies if the LinePosition is reversed.
            </summary>
            <value><c>true</c> if reverse; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeline.AlignItems">
            <summary>
            Specifies the alignment of LabelContent, PointContent and ChildContent inside TimelineItems. Set to <c>AlignItems.Center</c> by default.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeline.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTimelineItem">
            <summary>
            RadzenTimeline item.
            </summary>
            <example>
            <code>
            &lt;RadzenTimelineItem PointStyle="PointStyle.Primary"&gt;
                &lt;LabelContent&gt;
                    NOV 2022
                &lt;/LabelContent&gt;
                &lt;ChildContent&gt;
                    Celebrating the official release of Radzen Blazor Studio.
                &lt;/ChildContent&gt;
            &lt;/RadzenTimelineItem&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.LabelContent">
            <summary>
            Gets or sets the label content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.PointContent">
            <summary>
            Gets or sets the content inside a point on the timeline.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.PointSize">
            <summary>
            Specifies the Point size from ExtraSmall to Large. Set to <c>PointSize.Medium</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.PointStyle">
            <summary>
            Gets or sets the Point style. Set to <c>PointStyle.Base</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.PointVariant">
            <summary>
            Specifies if the Point variant is filled, flat, outlined or text only. Set to <c>Variant.Filled</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimelineItem.PointShadow">
            <summary>
            Specifies the Shadow level from <c>0</c> (no shadow) to <c>10</c>. Set to <c>1</c> by default.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTimelineItem.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTimeSpanPicker`1">
            <summary>
            RadzenTimeSpanPicker component.
            </summary>
            <typeparam name="TValue"><see cref="T:System.TimeSpan"/> and nullable <see cref="T:System.TimeSpan"/> are supported.</typeparam>
            <example>
            <code>
            &lt;RadzenTimeSpanPicker @bind-Value="@someValue" TValue="TimeSpan" Change=@(args => Console.WriteLine($"Selected time span: {args}")) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Value">
            <summary>
            Specifies the value of the component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Min">
            <summary>
            Specifies the minimum time span allowed.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Max">
            <summary>
            Specifies the maximum time span allowed.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.AllowClear">
            <summary>
            Specifies whether the value can be cleared.
            </summary>
            <value><c>true</c> if value can be cleared; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.AllowInput">
            <summary>
            Specifies whether input in the input field is allowed.
            Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if input is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Disabled">
            <summary>
            Specifies whether the input field is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ReadOnly">
            <summary>
            Specifies whether the input field is read only.
            </summary>
            <value><c>true</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ShowPopupButton">
            <summary>
            Specifies whether to display popup icon button in the input field.
            </summary>
            <value><c>true</c> to display the button to open the popup;
            <c>false</c> to hide the button to open the popup, clicking the input field opens the popup instead.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.PopupButtonClass">
            <summary>
            Specifies the popup toggle button CSS classes, separated with spaces.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.InputClass">
            <summary>
            Specifies the input CSS classes, separated with spaces.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Name">
            <summary>
            Specifies the name of the input field.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.TabIndex">
            <summary>
            Specifies the tab index.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.TimeSpanFormat">
            <summary>
            Specifies the time span format in the input field.
            For more details, see the documentation of
            <see href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings">standard</see>
            and <see href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings">custom</see>
            time span format strings.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ParseInput">
            <summary>
            Specifies custom function to parse the input.
            If it's not defined or the function it returns <c>null</c>, a built-in parser us used instead.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Placeholder">
            <summary>
            Specifies the input placeholder.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.TogglePopupAriaLabel">
            <summary>
            Specifies the aria label for the toggle popup button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.PopupRenderMode">
            <summary>
            Specifies the render mode of the popup.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Inline">
            <summary>
            Specifies whether the component is inline or shows a popup.
            </summary>
            <value><c>true</c> if inline; <c>false</c> if shows a popup.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ShowConfirmationButton">
            <summary>
            Specifies whether to display the confirmation button in the panel to accept changes.
            </summary>
            <value><c>true</c> if the confirmation button is shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.PadTimeValues">
            <summary>
            Specifies whether the time fields in the panel, except for the days field, are padded with leading zeros.
            </summary>
            <value><c>true</c> if fields are padded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.FieldPrecision">
            <summary>
            Specifies the most precise time unit field in the picker panel. Set to <see cref="F:Radzen.TimeSpanUnit.Second"/> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.DaysStep">
            <summary>
            Specifies the step of the days field in the picker panel.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.HoursStep">
            <summary>
            Specifies the step of the hours field in the picker panel.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.MinutesStep">
            <summary>
            Specifies the step of the minutes field in the picker panel.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.SecondsStep">
            <summary>
            Specifies the step of the seconds field in the picker panel.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.MillisecondsStep">
            <summary>
            Specifies the step of the milliseconds field in the picker panel.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.MicrosecondsStep">
            <summary>
            Specifies the step of the microseconds field in the picker panel.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ConfirmationButtonText">
            <summary>
            Specifies the text of the confirmation button. Used only if <see cref="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ShowConfirmationButton"/> is <code>true</code>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.PositiveButtonText">
            <summary>
            Specifies the text of the positive value button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.NegativeButtonText">
            <summary>
            Specifies the text of the negative value button.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.PositiveValueText">
            <summary>
            Specifies the text displayed next to the fields in the panel when the value is positive and there's no sign picker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.NegativeValueText">
            <summary>
            Specifies the text displayed next to the fields in the panel when the value is negative and there's no sign picker.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.DaysUnitText">
            <summary>
            Specifies the days label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.HoursUnitText">
            <summary>
            Specifies the hours label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.MinutesUnitText">
            <summary>
            Specifies the minutes label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.SecondsUnitText">
            <summary>
            Specifies the seconds label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.MillisecondsUnitText">
            <summary>
            Specifies the milliseconds label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.MicrosecondsUnitText">
            <summary>
            Specifies the microseconds label text.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ValueExpression">
            <summary>
            Specifies the value expression used while creating the <see cref="P:Radzen.Blazor.RadzenTimeSpanPicker`1.FieldIdentifier"/>.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ValueChanged">
            <summary>
            Specifies the callback of the value change.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Change">
            <summary>
            Specifies the callback of the underlying nullable <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.Form">
            <summary>
            Specifies the form this component belongs to.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.EditContext">
            <summary>
            Specifies the edit context of this component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.FormFieldContext">
            <summary>
            Specifies the <see cref="T:Radzen.Blazor.RadzenFormField"/> context of this component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.HasValue">
            <summary>
            Indicates whether this instance has a confirmed value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.IsBound">
            <summary>
            Indicates whether this instance is bound <see cref="P:Radzen.Blazor.RadzenTimeSpanPicker`1.ValueChanged"/> callback has delegate).
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.FormattedValue">
            <summary>
            Gets the formatted value.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTimeSpanPicker`1.FieldIdentifier">
            <summary>
            Gets the field identifier.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.RadzenTimeSpanPicker`1.input">
            <summary>
            Gets the input reference.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.Close">
            <summary>
            Closes this instance popup.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.FocusAsync">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.GetValue">
            <summary>
            Gets the value of the component.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenTimeSpanPicker`1.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenToc">
            <summary>
            Displays a table of contents for a page.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenToc.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenToc.Orientation">
            <summary>
            Gets or sets the orientation of the table of contents.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenToc.Selector">
            <summary>
            Gets or sets the CSS selector of the element to monitor for scroll events. By default the entire page is monitored.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenToc.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenToc.ScrollIntoView(System.String)">
            <summary>
            Invoked when the current toc item changes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenToc.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenToc.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTocItem">
            <summary>
            Represents a table of contents item.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTocItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTocItem.Text">
            <summary>
            Gets or sets the text displayed in the table of contents.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTocItem.Template">
            <summary>
            Gets or sets the custom content of the item.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTocItem.Selector">
            <summary>
            Gets or sets the CSS selector of the element to scroll to.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTocItem.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTocItem.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenToggleButton">
            <summary>
            RadzenButton component.
            </summary>
            <example>
            <code>
            &lt;RadzenToggleButton Click=@(args => Console.WriteLine("Button clicked")) Text="ToggleButton" /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.Placeholder">
            <summary>
            Gets or sets the placeholder.
            </summary>
            <value>The placeholder.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.ToggleIcon">
            <summary>
            Gets or sets the toggle icon.
            </summary>
            <value>The toggle icon.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenToggleButton._form">
            <summary>
            The form
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.EditContext">
            <summary>
            Gets or sets the edit context.
            </summary>
            <value>The edit context.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.Form">
            <summary>
            Gets or sets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.ValueChanged">
            <summary>
            Gets or sets the value changed.
            </summary>
            <value>The value changed.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenToggleButton._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.Change">
            <summary>
            Gets or sets the change.
            </summary>
            <value>The change.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.FieldIdentifier">
            <summary>
            Gets the field identifier.
            </summary>
            <value>The field identifier.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.ValueExpression">
            <summary>
            Gets or sets the value expression.
            </summary>
            <value>The value expression.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Sets the parameters asynchronous.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.ValidationStateChanged(System.Object,Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs)">
            <summary>
            Validations the state changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:ContextMenu" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.FormFieldContext">
            <summary> Provides support for RadzenFormField integration. </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.CurrentPlaceholder">
            <summary> Gets the current placeholder. Returns empty string if this component is inside a RadzenFormField.</summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.FocusAsync">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.Toggle">
            <summary>
            Toggles this instance checked state.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.RadzenToggleButton.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.ToggleButtonStyle">
            <summary>
            Gets or sets the ToggleButton style.
            </summary>
            <value>The ToggleButton style.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenToggleButton.ToggleShade">
            <summary>
            Gets or sets the ToggleButton shade.
            </summary>
            <value>The ToggleButton shade.</value>
        </member>
        <member name="T:Radzen.Blazor.RadzenTree">
            <summary>
            A component which displays a hierarchy of items. Supports inline definition and data-binding.
            </summary>
            <example>
              <code>
            &lt;RadzenTree&gt;
                &lt;RadzenTreeItem Text="BMW"&gt;
                    &lt;RadzenTreeItem Text="M3" /&gt;
                    &lt;RadzenTreeItem Text="M5" /&gt;
                &lt;/RadzenTreeItem&gt;
                &lt;RadzenTreeItem Text="Audi"&gt;
                    &lt;RadzenTreeItem Text="RS4" /&gt;
                    &lt;RadzenTreeItem Text="RS6" /&gt;
                &lt;/RadzenTreeItem&gt;
                &lt;RadzenTreeItem Text="Mercedes"&gt;
                    &lt;RadzenTreeItem Text="C63 AMG" /&gt;
                    &lt;RadzenTreeItem Text="S63 AMG" /&gt;
                &lt;/RadzenTreeItem&gt;
            &lt;/RadzenTree&gt;
              </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.SelectItemAriaLabel">
            <summary>
            Gets or sets the open button aria-label attribute.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTree.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.Change">
            <summary>
            A callback that will be invoked when the user selects an item.
            </summary>
            <example>
            <code>
            &lt;RadzenTree Change=@OnChange&gt;
                &lt;RadzenTreeItem Text="BMW"&gt;
                    &lt;RadzenTreeItem Text="M3" /&gt;
                    &lt;RadzenTreeItem Text="M5" /&gt;
                &lt;/RadzenTreeItem&gt;
                &lt;RadzenTreeItem Text="Audi"&gt;
                    &lt;RadzenTreeItem Text="RS4" /&gt;
                    &lt;RadzenTreeItem Text="RS6" /&gt;
                &lt;/RadzenTreeItem&gt;
                &lt;RadzenTreeItem Text="Mercedes"&gt;
                    &lt;RadzenTreeItem Text="C63 AMG" /&gt;
                    &lt;RadzenTreeItem Text="S63 AMG" /&gt;
                &lt;/RadzenTreeItem&gt;
            &lt;/RadzenTree&gt;
            @code {
              void OnChange(TreeEventArgs args) 
              {
            
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.Expand">
            <summary>
            A callback that will be invoked when the user expands an item.
            </summary>
            <example>
            <code>
            &lt;RadzenTree Expand=@OnExpand&gt;
                &lt;RadzenTreeItem Text="BMW"&gt;
                    &lt;RadzenTreeItem Text="M3" /&gt;
                    &lt;RadzenTreeItem Text="M5" /&gt;
                &lt;/RadzenTreeItem&gt;
                &lt;RadzenTreeItem Text="Audi"&gt;
                    &lt;RadzenTreeItem Text="RS4" /&gt;
                    &lt;RadzenTreeItem Text="RS6" /&gt;
                &lt;/RadzenTreeItem&gt;
                &lt;RadzenTreeItem Text="Mercedes"&gt;
                    &lt;RadzenTreeItem Text="C63 AMG" /&gt;
                    &lt;RadzenTreeItem Text="S63 AMG" /&gt;
                &lt;/RadzenTreeItem&gt;
            &lt;/RadzenTree&gt;
            @code {
              void OnExpand(TreeExpandEventArgs args) 
              {
            
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.Collapse">
            <summary>
            A callback that will be invoked when the user collapse an item.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.ItemRender">
            <summary>
            A callback that will be invoked when item is rendered.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.ItemContextMenu">
            <summary>
            Gets or sets the context menu callback.
            </summary>
            <value>The context menu callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.Data">
            <summary>
            Specifies the collection of data items which RadzenTree will create its items from.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.Value">
            <summary>
            Specifies the selected value. Use with <c>@bind-Value</c> to sync it with a property.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.ValueChanged">
            <summary>
            A callback which will be invoked when <see cref="P:Radzen.Blazor.RadzenTree.Value" /> changes.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.AllowCheckBoxes">
            <summary>
            Specifies whether RadzenTree displays check boxes. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if check boxes are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.AllowCheckChildren">
            <summary>
            Specifies what happens when a parent item is checked. If set to <c>true</c> checking parent items also checks all of its children.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.AllowCheckParents">
            <summary>
            Specifies what happens with a parent item when one of its children is checked. If set to <c>true</c> checking a child item will affect the checked state of its parents.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.SingleExpand">
            <summary>
            Specifies whether siblings items are collapsed. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.CheckedValues">
            <summary>
            Gets or sets the checked values. Use with <c>@bind-CheckedValues</c> to sync it with a property.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.ItemContentCssClass">
            <summary>
            Gets or sets the CSS classes added to the item content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.ItemIconCssClass">
            <summary>
            Gets or sets the CSS classes added to the item icon.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.ItemLabelCssClass">
            <summary>
            Gets or sets the CSS classes added to the item label.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTree.CheckedValuesChanged">
            <summary>
            A callback which will be invoked when <see cref="P:Radzen.Blazor.RadzenTree.CheckedValues" /> changes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTree.ClearSelection">
            <summary>
            Clear the current selection to allow re-selection by mouse click
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTree.Reload(Radzen.Blazor.RadzenTreeItem)">
            <summary>
            Forces the specified <paramref name="item"/> or, if
            <paramref name="item"/> is <c>null</c>, all items in the tree to be
            re-evaluated such that items lazily created via <see cref="P:Radzen.Blazor.RadzenTree.Expand"/>
            are realised if the underlying data model has been changed from
            somewhere else.
            </summary>
            <param name="item">The item to be reloaded or <c>null</c> to refresh
            the root nodes of the tree.</param>
            <returns>A task to wait for the operation to complete.</returns>
        </member>
        <member name="M:Radzen.Blazor.RadzenTree.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTree.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTreeItem">
            <summary>
            A component which is an item in a <see cref="T:Radzen.Blazor.RadzenTree" />
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Attributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the component.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Template">
            <summary>
            Gets or sets the template. Use it to customize the appearance of a tree item.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Text">
            <summary>
            Gets or sets the text displayed by the tree item.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Checkable">
            <summary>
            Gets or sets value indicating if the tree item checkbox can be checked.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Expanded">
            <summary>
            Specifies whether this item is expanded. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Value">
            <summary>
            Gets or sets the value of the tree item.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.HasChildren">
            <summary>
            Gets or sets a value indicating whether this instance has children.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Selected">
            <summary>
            Specifies whether this item is selected or not. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Tree">
            <summary>
            The RadzenTree which this item is part of.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.ParentItem">
            <summary>
            The RadzenTreeItem which contains this item.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.Data">
            <summary>
            The children data.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.ContentCssClass">
            <summary>
            Gets or sets the CSS classes added to the content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.IconCssClass">
            <summary>
            Gets or sets the CSS classes added to the icon.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeItem.LabelCssClass">
            <summary>
            Gets or sets the CSS classes added to the label.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenTreeItem.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTreeItem.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenTreeItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenTreeLevel">
            <summary>
            Configures a level of nodes in a <see cref="T:Radzen.Blazor.RadzenTree" /> during data-binding.
            </summary>
            <example>
            <code>
            &lt;RadzenTree Data=@rootEmployees&gt;
                &lt;RadzenTreeLevel TextProperty="LastName" ChildrenProperty="Employees1"  HasChildren=@(e =&gt; (e as Employee).Employees1.Any()) /&gt;
            &lt;/RadzenTree&gt;
            @code {
             IEnumerable&lt;Employee&gt; rootEmployees; 
             protected override void OnInitialized()
             {
                rootEmployees = NorthwindDbContext.Employees.Where(e => e.ReportsTo == null);
             }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.TextProperty">
            <summary>
            Specifies the name of the property which provides values for the <see cref="P:Radzen.Blazor.RadzenTreeItem.Text" /> property of the child items.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.CheckableProperty">
            <summary>
            Specifies the name of the property which provides values for the <see cref="P:Radzen.Blazor.RadzenTreeItem.Checkable" /> property of the child items.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.ChildrenProperty">
            <summary>
            Specifies the name of the property which returns child data. The value returned by that property should be IEnumerable
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.HasChildren">
            <summary>
            Determines if a child item has children or not. Set to <c>value =&gt; true</c> by default.
            </summary>
            <example>
            <code>
                &lt;RadzenTreeLevel HasChildren=@(e =&gt; (e as Employee).Employees1.Any()) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.Expanded">
            <summary>
            Determines if a child item is expanded or not. Set to <c>value =&gt; false</c> by default.
            </summary>
            <example>
            <code>
                &lt;RadzenTreeLevel Expanded=@(e =&gt; (e as Employee).Employees1.Any()) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.Selected">
            <summary>
            Determines if a child item is selected or not. Set to <c>value =&gt; false</c> by default.
            </summary>
            <example>
            <code>
                &lt;RadzenTreeLevel Selected=@(e =&gt; (e as Employee).LastName == "Fuller") /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.Text">
            <summary>
            Determines the text of a child item.
            </summary>
            <example>
            <code>
                &lt;RadzenTreeLevel Text=@(e =&gt; (e as Employee).LastName) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.Checkable">
            <summary>
            Determines the if the checkbox of the child item can be checked.
            </summary>
            <example>
            <code>
                &lt;RadzenTreeLevel Checkable=@(e =&gt; (e as Employee).LastName != null) /&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.Template">
            <summary>
            Gets or sets the template.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenTreeLevel.Tree">
            <summary>
            The RadzenTree which this item is part of.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.RadzenUpload">
             <summary>
             RadzenUpload component.
             </summary>
             <example>
             <code>
             &lt;RadzenUpload Url="upload/single" Progress=@(args => OnProgress(args, "Single file upload"))/&gt;
             @code {
              void OnProgress(UploadProgressArgs args, string name)
              {
                this.info = $"% '{name}' / {args.Loaded} of {args.Total} bytes.";
                this.progress = args.Progress;
                if (args.Progress == 100)
                {
                    console.Clear();
            
                    foreach (var file in args.Files)
                    {
                        console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
                    }
                }
              }
             }
             </code>
             </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.ImageAlternateText">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.InputAttributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the input.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="F:Radzen.Blazor.RadzenUpload.fileUpload">
            <summary>
            Gets file input reference.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Auto">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenUpload"/> upload is automatic.
            </summary>
            <value><c>true</c> if upload automatic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.ChooseText">
            <summary>
            Gets or sets the choose button text.
            </summary>
            <value>The choose button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.DeleteText">
            <summary>
            Gets or sets the choose button text.
            </summary>
            <value>The choose button text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.ParameterName">
            <summary>
            Gets or sets the parameter name. If not set 'file' parameter name will be used for single file and 'files' for multiple files.
            </summary>
            <value>The parameter name.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Accept">
            <summary>
            Gets or sets the accepted MIME types.
            </summary>
            <value>The accepted MIME types.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Multiple">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenUpload"/> is multiple.
            </summary>
            <value><c>true</c> if multiple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.MaxFileCount">
            <summary>
            Gets or sets the maximum number of files.
            </summary>
            <value>The maximum number of files.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.RadzenUpload"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.ChooseClassList">
            <summary>
            Gets the choose class list.
            </summary>
            <value>The choose class list.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.ButtonClassList">
            <summary>
            Gets the button class list.
            </summary>
            <value>The button class list.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.Upload">
            <summary>
            Uploads this instance selected files.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.GetHeaders">
            <summary>
            Gets the headers.
            </summary>
            <returns>IDictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Change">
            <summary>
            Gets or sets the change callback.
            </summary>
            <value>The change callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Progress">
            <summary>
            Gets or sets the progress callback.
            </summary>
            <value>The progress callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Complete">
            <summary>
            Gets or sets the complete callback.
            </summary>
            <value>The complete callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.Error">
            <summary>
            Gets or sets the error callback.
            </summary>
            <value>The error callback.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenUpload.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.ClearFiles">
            <summary>
            Clear selected file(s) from the upload selection
            </summary>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.RemoveFile(System.String,System.Boolean)">
            <summary>
            Called on file remove.
            </summary>
            <param name="fileName">The name of the file to remove.</param>
            <param name="ignoreCase">Specify true is file name casing should be ignored (default: false)</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.OnRemove(Radzen.PreviewFileInfo,System.Boolean)">
            <summary>
            Called on file remove.
            </summary>
            <param name="file">The file.</param>
            <param name="fireChangeEvent">If the linked <see cref="P:Radzen.Blazor.RadzenUpload.Change" /> event should be fired as a result of this removal (default: true)</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.OnChange(System.Collections.Generic.IEnumerable{Radzen.PreviewFileInfo})">
            <summary>
            Called on file change.
            </summary>
            <param name="files">The files.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.OnProgress(System.Int32,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Radzen.FileInfo},System.Boolean)">
            <summary>
            Called on progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="loaded">The loaded.</param>
            <param name="total">The total.</param>
            <param name="files">The files.</param>
            <param name="cancel">The cancelled state.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.OnComplete(System.String,System.Boolean)">
            <summary>
            Called when upload is complete.
            </summary>
            <param name="response">The response.</param>
            <param name="cancelled">Flag indicating if the upload was cancelled</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.OnError(System.String)">
            <summary>
            Called on upload error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenUpload.CreateUploadChangeEventArgs(System.Collections.Generic.IEnumerable{Radzen.FileInfo})">
            <summary>
            Creates the upload change event args.
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Radzen.Blazor.RadzenWeekView">
            <summary>
            Displays the appointments in a week day in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
            <code>
            &lt;RadzenScheduler Data="@appointments"&gt;
                &lt;RadzenWeekView /&gt;
            &lt;/RadzenScheduler&gt;
            </code>
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.Icon">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.Text">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.TimeFormat">
            <summary>
            Gets or sets the time format.
            </summary>
            <value>The time format. Set to <c>h tt</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.HeaderFormat">
            <summary>
            Gets or sets the format used to display the header text.
            </summary>
            <value>The header text format. Set to <c>ddd</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
            <value>The end time.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.MinutesPerSlot">
            <summary>
            Gets or sets slot size in minutes. Set to <c>30</c> by default.
            </summary>
            <value>The slot size in minutes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.StartDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.EndDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenWeekView.Title">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenWeekView.Next">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenWeekView.Prev">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenYearPlannerView">
            <summary>
            Displays the appointments in a month day in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data="@appointments"&gt;
                &lt;RadzenMonthView /&gt;
            &lt;/RadzenScheduler&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.Icon">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.Title">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.Text">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.MaxAppointmentsInSlot">
            <summary>
            Specifies the maximum appointnments to render in a slot.
            </summary>
            <value>The maximum appointments in slot.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.MoreText">
            <summary>
            Specifies the text displayed when there are more appointments in a slot than <see cref="P:Radzen.Blazor.RadzenYearPlannerView.MaxAppointmentsInSlot" />.
            </summary>
            <value>The more text. Set to <c>"+ {0} more"</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.StartDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.EndDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearPlannerView.StartMonth">
            <summary>
            Gets or sets the start month for the year views />.
            </summary>
            <value>The start month.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenYearPlannerView.Next">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenYearPlannerView.Prev">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenYearTimelineView">
            <summary>
            Displays the appointments in a month day in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data="@appointments"&gt;
                &lt;RadzenMonthView /&gt;
            &lt;/RadzenScheduler&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.Icon">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.Title">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.Text">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.MaxAppointmentsInSlot">
            <summary>
            Specifies the maximum appointnments to render in a slot.
            </summary>
            <value>The maximum appointments in slot.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.MoreText">
            <summary>
            Specifies the text displayed when there are more appointments in a slot than <see cref="P:Radzen.Blazor.RadzenYearTimelineView.MaxAppointmentsInSlot" />.
            </summary>
            <value>The more text. Set to <c>"+ {0} more"</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.StartDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.EndDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearTimelineView.StartMonth">
            <summary>
            Gets or sets the start month for the year views />.
            </summary>
            <value>The start month.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenYearTimelineView.Next">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenYearTimelineView.Prev">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.RadzenYearView">
            <summary>
            Displays the appointments in a month day in <see cref="T:Radzen.Blazor.RadzenScheduler`1" />
            </summary>
            <example>
            <code>
            &lt;RadzenScheduler Data="@appointments"&gt;
                &lt;RadzenMonthView /&gt;
            &lt;/RadzenScheduler&gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.Icon">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.Title">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.Text">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.MoreText">
            <summary>
            Specifies the text displayed when there are more appointments in a slot than MaxAppointmentsInSlot.
            </summary>
            <value>The more text. Set to <c>"+ {0} more"</c> by default.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.NoDayEventsText">
            <summary>
            Specifies the text displayed when the user clicks on a day with no events in the year view
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.StartDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.EndDate">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenYearView.StartMonth">
            <summary>
            Gets or sets the start month for the year views />.
            </summary>
            <value>The start month.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenYearView.Next">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.RadzenYearView.Prev">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.Rendering.AxisMeasurer">
            <summary>
            Measures the sises of the chart axes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.AxisMeasurer.YAxis(Radzen.Blazor.ScaleBase,Radzen.Blazor.AxisBase,Radzen.Blazor.RadzenAxisTitle)">
            <summary>
            Calculates the length of the Y axis.
            </summary>
            <param name="scale">The scale.</param>
            <param name="axis">The axis.</param>
            <param name="title">The title.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.AxisMeasurer.XAxis(Radzen.Blazor.ScaleBase,Radzen.Blazor.AxisBase,Radzen.Blazor.RadzenAxisTitle)">
            <summary>
            Calculates the length of the X axis.
            </summary>
            <param name="scale">The scale.</param>
            <param name="axis">The axis.</param>
            <param name="title">The title.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.ChartDataLabel">
            <summary>
            Represents a data label in RadzenChart.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.ChartDataLabel.Position">
            <summary>
            The position of the label.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.ChartDataLabel.Text">
            <summary>
            The text of the label.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.ChartDataLabel.TextAnchor">
            <summary>
            The text anchor of the label.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.ChartDataLabel.Fill">
            <summary>
            Defines the fill color of the component.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Rendering.ClassList">
            <summary>
            Utility for managing a list of CSS classes.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.Create(System.String)">
            <summary>
            Creates the specified class name.
            </summary>
            <param name="className">Name of the class.</param>
            <returns>ClassList.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.Add(System.String,System.Boolean)">
            <summary>
            Adds the specified class name if the condition is true.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="condition">if set to <c>true</c> the class name is added.</param>
            <remarks>
            The class name is added only if it is not null or empty.
            </remarks>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.Add(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Checks if the provided attributes contain a class name and adds it to the list.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.Add(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Checks if the provided attributes contain a class name and adds it to the list.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier,Microsoft.AspNetCore.Components.Forms.EditContext)">
            <summary>
            Adds the class returned by the EditContext for the specified field identifier
            </summary>
            <param name="field">The field.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.AddDisabled(System.Boolean)">
            <summary>
            Adds the disabled class if the condition is true.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.AddButtonSize(Radzen.ButtonSize)">
            <summary>
            Adds the specified size as button size class.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.AddVariant(Radzen.Variant)">
            <summary>
            Adds the specified variant as variant CSS class.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.AddButtonStyle(Radzen.ButtonStyle)">
            <summary>
             Adds the specified button style as shade CSS class.
            </summary>
            <param name="style"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.AddShade(Radzen.Shade)">
            <summary>
            Adds the specified shade as a CSS class.
            </summary>
            <param name="shade"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.AddHorizontalAlign(Radzen.HorizontalAlign)">
            <summary>
            Adds the specified horizontal alignment as a CSS class.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Radzen.Blazor.Rendering.ClassList.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.DateTimeExtensions">
            <summary>
            Class DateTimeExtensions.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DateTimeExtensions.StartOfWeek(System.DateTime)">
            <summary>
            Starts the of week.
            </summary>
            <param name="date">The date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DateTimeExtensions.StartOfMonth(System.DateTime)">
            <summary>
            Starts the of month.
            </summary>
            <param name="date">The date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DateTimeExtensions.EndOfMonth(System.DateTime)">
            <summary>
            Ends the of month.
            </summary>
            <param name="date">The date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DateTimeExtensions.EndOfWeek(System.DateTime)">
            <summary>
            Ends the of week.
            </summary>
            <param name="date">The date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.DraggableEventArgs">
            <summary>
            Class DraggableEventArgs.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.DraggableEventArgs.ClientX">
            <summary>
            Gets or sets the client x.
            </summary>
            <value>The client x.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.DraggableEventArgs.ClientY">
            <summary>
            Gets or sets the client y.
            </summary>
            <value>The client y.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.DraggableEventArgs.Rect">
            <summary>
            Gets or sets the rect.
            </summary>
            <value>The rect.</value>
        </member>
        <member name="T:Radzen.Blazor.Rendering.DropableViewBase">
            <summary>
            A base class for <see cref="T:Radzen.Blazor.Rendering.MonthView" /> <see cref="T:Radzen.Blazor.Rendering.DayView" /> <see cref="T:Radzen.Blazor.Rendering.WeekView" /> <see cref="T:Radzen.Blazor.Rendering.YearPlannerView" /> <see cref="T:Radzen.Blazor.Rendering.YearTimelineView" /> views.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.DropableViewBase.AppointmentMove">
            <summary>
            Gets or sets the appointment move event callback.
            </summary>
            <value>The appointment move event callback.</value>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DropableViewBase.OnDrop(System.DateTime)">
            <summary>
            Handles on slot drop.
            </summary>
            <param name="slotDate"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DropableViewBase.OnAppointmentDragStart(Radzen.Blazor.AppointmentData)">
            <summary>
            Handles Appointment drag started.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.Expander">
            <summary>
            Expandable content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Expander.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Expander.Attributes">
            <summary>
            Gets or sets the additional attributes.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Expander.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Expander.Expanded">
            <summary>
            Determines whether the content is visible.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.Expander.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.Blazor.Rendering.Expander.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.Blazor.Rendering.HSV">
            <summary>
            Class HSV.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.HSV.Hue">
            <summary>
            Gets or sets the hue.
            </summary>
            <value>The hue.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.HSV.Saturation">
            <summary>
            Gets or sets the saturation.
            </summary>
            <value>The saturation.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.HSV.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.HSV.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="M:Radzen.Blazor.Rendering.HSV.ToRGB">
            <summary>
            Converts to rgb.
            </summary>
            <returns>RGB.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.IPathGenerator">
            <summary>
            Interface IPathGenerator
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.IPathGenerator.Path(System.Collections.Generic.IEnumerable{Radzen.Blazor.Point})">
            <summary>
            Pathes the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.LineGenerator">
            <summary>
            Class LineGenerator.
            Implements the <see cref="T:Radzen.Blazor.Rendering.IPathGenerator" />
            </summary>
            <seealso cref="T:Radzen.Blazor.Rendering.IPathGenerator" />
        </member>
        <member name="M:Radzen.Blazor.Rendering.LineGenerator.Path(System.Collections.Generic.IEnumerable{Radzen.Blazor.Point})">
            <summary>
            Pathes the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.NumericExtensions">
            <summary>
            Class NumericExtensions.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.NumericExtensions.ToInvariantString(System.Double)">
            <summary>
            Converts to invariantstring.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.NumericExtensions.ToInvariantString(System.Nullable{System.Double})">
            <summary>
            Converts to invariantstring.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.NumericExtensions.ToInvariantString(System.Decimal)">
            <summary>
            Converts to invariantstring.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.NumericExtensions.ToInvariantString(System.Nullable{System.Decimal})">
            <summary>
            Converts to invariantstring.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.Polar">
            <summary>
            Class Polar.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.Polar.ToRadian(System.Double)">
            <summary>
            Converts to radian.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.Polar.ToDegree(System.Double)">
            <summary>
            Converts to degrees.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.Polar.ToCartesian(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts to cartesian.
            </summary>
            <param name="cx">The cx.</param>
            <param name="cy">The cy.</param>
            <param name="radius">The radius.</param>
            <param name="angle">The angle.</param>
            <returns>Point.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.Rect">
            <summary>
            Class Rect.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Rect.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Rect.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Rect.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Rect.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Rect.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Rect.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="T:Radzen.Blazor.Rendering.RGB">
            <summary>
            Utility class used to parse and convert RGB colors.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.RGB.Red">
            <summary>
            Gets or sets the red.
            </summary>
            <value>The red.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.RGB.Green">
            <summary>
            Gets or sets the green.
            </summary>
            <value>The green.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.RGB.Blue">
            <summary>
            Gets or sets the blue.
            </summary>
            <value>The blue.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.RGB.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="M:Radzen.Blazor.Rendering.RGB.Parse(System.String)">
            <summary>
            Parses the specified color.
            </summary>
            <param name="color">The color.</param>
            <returns>RGB.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.RGB.ToHex">
            <summary>
            Converts to hex.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.RGB.ToCSS">
            <summary>
            Converts to css.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.RGB.ToHSV">
            <summary>
            Converts to hsv.
            </summary>
            <returns>HSV.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.SplineGenerator">
            <summary>
            Class SplineGenerator.
            Implements the <see cref="T:Radzen.Blazor.Rendering.IPathGenerator" />
            </summary>
            <seealso cref="T:Radzen.Blazor.Rendering.IPathGenerator" />
        </member>
        <member name="T:Radzen.Blazor.Rendering.SplineGenerator.SplinePoint">
            <summary>
            Class SplinePoint.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.SplinePoint.X">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.SplinePoint.Y">
            <summary>
            The y
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.SplinePoint.ControlPointPreviousX">
            <summary>
            The control point previous x
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.SplinePoint.ControlPointPreviousY">
            <summary>
            The control point previous y
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.SplinePoint.ControlPointNextX">
            <summary>
            The control point next x
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.SplinePoint.ControlPointNextY">
            <summary>
            The control point next y
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Rendering.SplineGenerator.PointWithTanget">
            <summary>
            Class PointWithTanget.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.PointWithTanget.Point">
            <summary>
            The point
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.PointWithTanget.Delta">
            <summary>
            The delta
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.SplineGenerator.PointWithTanget.MK">
            <summary>
            The mk
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.SplineGenerator.CurveMonotone(System.Collections.Generic.IList{Radzen.Blazor.Rendering.SplineGenerator.SplinePoint})">
            <summary>
            Curves the monotone.
            </summary>
            <param name="points">The points.</param>
            <returns>IList&lt;PointWithTanget&gt;.</returns>
        </member>
        <member name="M:Radzen.Blazor.Rendering.SplineGenerator.Path(System.Collections.Generic.IEnumerable{Radzen.Blazor.Point})">
            <summary>
            Pathes the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.StepGenerator">
            <summary>
            Class StepGenerator.
            Implements the <see cref="T:Radzen.Blazor.Rendering.IPathGenerator" />
            </summary>
            <seealso cref="T:Radzen.Blazor.Rendering.IPathGenerator" />
        </member>
        <member name="M:Radzen.Blazor.Rendering.StepGenerator.Path(System.Collections.Generic.IEnumerable{Radzen.Blazor.Point})">
            <summary>
            Pathes the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.FontData">
            <summary>
            Class FontData.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.FontData.Average">
            <summary>
            Gets or sets the average.
            </summary>
            <value>The average.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.FontData.Chars">
            <summary>
            Gets or sets the chars.
            </summary>
            <value>The chars.</value>
        </member>
        <member name="T:Radzen.Blazor.Rendering.TextMeasurer">
            <summary>
            Class TextMeasurer.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.Rendering.TextMeasurer.fonts">
            <summary>
            The fonts
            </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.TextMeasurer.TextWidth(System.String,System.Double,System.String)">
            <summary>
            Texts the width.
            </summary>
            <param name="text">The text.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontFamily">The font family.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:Radzen.Blazor.Rendering.Tick">
            <summary> Base component for all chart ticks. </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Tick.X">
            <summary> Gets or sets the X coordinate. </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Tick.Y">
            <summary> Gets or sets the Y coordinate. </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Tick.ChildContent">
            <summary> Gets or sets the child content. </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Tick.Stroke">
            <summary> Gets or sets the stroke (line color) of the tick. </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Tick.StrokeWidth">
            <summary> Gets or sets the pixel width of the tick. </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Tick.LineType">
            <summary> Gets or sets the type of the line used to display the tick. </summary>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Tick.Text">
            <summary> Gets or sets the text of the tick. </summary>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DialogContainer.OnDrag(System.Double,System.Double)">
            <summary>
            Called when dragged.
            </summary>
            <param name="t">The top value.</param>
            <param name="l">The left value.</param>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DialogContainer.OnResize(System.Double,System.Double)">
            <summary>
            Called when resized.
            </summary>
            <param name="w">The width.</param>
            <param name="h">The height.</param>
        </member>
        <member name="M:Radzen.Blazor.Rendering.DialogContainer.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the property changed event and triggers a refresh.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.Blazor.Rendering.DialogContainer.DotNetReference">
            <summary>
            Gets the reference for the current component.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.EditorButton.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.Blazor.Rendering.Popup.AutoFocusFirstElement">
            <summary>
            Gets or sets a value indicating whether to focus the first focusable HTML element. Set to <c>true</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.Point">
            <summary>
            Class Point.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Point.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:Radzen.Blazor.Point.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="M:Radzen.Blazor.Point.Render">
            <summary>
            Renders this instance.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.Blazor.Point.ToCartesian(System.Double,System.Double)">
            <summary>
            Converts to cartesian.
            </summary>
            <param name="radius">The radius.</param>
            <param name="angle">The angle.</param>
            <returns>Point.</returns>
        </member>
        <member name="T:Radzen.Blazor.Point`1">
            <summary>
            Represents a point with data.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.Point`1.Data">
            <summary>
            The data associated with the point.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.ScaleBase">
            <summary>
            Base class for RadzenChart scales.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ScaleBase.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Radzen.Blazor.ScaleBase.Output">
            <summary>
            Gets or sets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Radzen.Blazor.ScaleBase.OutputSize">
            <summary>
            Gets the size of the output.
            </summary>
            <value>The size of the output.</value>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.Ticks(System.Int32)">
            <summary>
            Calculates the number of ticks with the specified distance.
            </summary>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.Scale(System.Double,System.Boolean)">
            <summary>
            Converts the specified value to a value from this scale with optional padding.
            </summary>
            <param name="value">The value.</param>
            <param name="padding">Whether to apply padding.</param>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.Compose``1(System.Func{``0,System.Double})">
            <summary>
            Composes the specified selector.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="selector">The selector.</param>
        </member>
        <member name="P:Radzen.Blazor.ScaleBase.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.Resize(System.Object,System.Object)">
            <summary>
            Resizes the scale to the specified values.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.NiceNumber(System.Double,System.Boolean)">
            <summary>
            Returns a "nice" number (closest power of 10).
            </summary>
            <param name="range">The range.</param>
            <param name="round">Wether to round.</param>
        </member>
        <member name="P:Radzen.Blazor.ScaleBase.Padding">
            <summary>
            Gets or sets the padding.
            </summary>
            <value>The padding.</value>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.Fit(System.Int32)">
            <summary>
            Fits the scale within the distance.
            </summary>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.Value(System.Double)">
            <summary>
            Returns a value from the scale.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.FormatTick(System.String,System.Object)">
            <summary>
            Formats the tick value.
            </summary>
            <param name="format">The format.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.Blazor.ScaleBase.Round">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.Blazor.ScaleBase"/> is round.
            </summary>
            <value><c>true</c> if round; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.Blazor.ScaleBase.IsEqualTo(Radzen.Blazor.ScaleBase)">
            <summary>
            Determines whether the specified scale is equal to the current one.
            </summary>
            <param name="scale">The scale.</param>
            <returns><c>true</c> if the scales are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Radzen.Blazor.ScaleRange">
            <summary>
            Represents a range of values.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ScaleRange.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Radzen.Blazor.ScaleRange.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="M:Radzen.Blazor.ScaleRange.From``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Creates a <c>ScaleRange</c> from the specified data.
            </summary>
            <typeparam name="T">Type of the data item.</typeparam>
            <param name="data">The data.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Radzen.Blazor.ScaleRange.Clamp(System.Double)">
            <summary>
            Clamps the specified value within the current <see cref="P:Radzen.Blazor.ScaleRange.Start" /> and <see cref="P:Radzen.Blazor.ScaleRange.End" />.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Radzen.Blazor.ScaleRange.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Radzen.Blazor.ScaleRange.Mid">
            <summary>
            Gets the mid.
            </summary>
            <value>The mid.</value>
        </member>
        <member name="M:Radzen.Blazor.ScaleRange.MergeWidth(Radzen.Blazor.ScaleRange)">
            <summary>
            Merges the width.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:Radzen.Blazor.ScaleRange.IsEqualTo(Radzen.Blazor.ScaleRange)">
            <summary>
            Determines whether the current range is equal to the specified one.
            </summary>
            <param name="range">The range.</param>
            <returns><c>true</c> if the ranges are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Radzen.Blazor.SchedulerAppointmentMouseEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.AppointmentMouseEnter" /> or <see cref="P:Radzen.Blazor.RadzenScheduler`1.AppointmentMouseLeave" /> event that is being raised.
            </summary>
            <typeparam name="TItem">The type of the data item.</typeparam>
        </member>
        <member name="P:Radzen.Blazor.SchedulerAppointmentMouseEventArgs`1.Element">
            <summary>
            A reference to the DOM element of the appointment that triggered the event.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.SchedulerAppointmentMouseEventArgs`1.Data">
            <summary>
            The data item for which the appointment is created.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Radzen.Blazor.SchedulerViewBase">
            <summary>
            A base class for <see cref="T:Radzen.Blazor.RadzenScheduler`1" /> views.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.SchedulerViewBase.Title">
            <summary>
            Gets the title of the view. It is displayed in the RadzenScheduler title area.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Blazor.SchedulerViewBase.Icon">
            <summary>
            Gets the icon of the view. It is displayed in the view switching UI.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.SchedulerViewBase.Text">
            <summary>
            Gets the text of the view. It is displayed in the view switching UI.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.SchedulerViewBase.Scheduler">
            <summary>
            Gets or sets the scheduler instance.
            </summary>
            <value>The scheduler.</value>
        </member>
        <member name="M:Radzen.Blazor.SchedulerViewBase.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.SchedulerViewBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Called by the Blazor runtime when parameters are set.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Radzen.Blazor.SchedulerViewBase.Next">
            <summary>
            Returns a new date when the user clicks the next button of RadzenScheduler.
            </summary>
            <returns>The next date. For example a day view will return the next day, a week view will return the next week.</returns>
        </member>
        <member name="M:Radzen.Blazor.SchedulerViewBase.Prev">
            <summary>
            Returns a new date when the user clicks the previous button of RadzenScheduler.
            </summary>
            <returns>The previous date. For example a day view will return the previous day, a week view will return the previous week.</returns>
        </member>
        <member name="M:Radzen.Blazor.SchedulerViewBase.Render">
            <summary>
            Renders this instance.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.SchedulerViewBase.StartDate">
            <summary>
            Gets the start date.
            </summary>
            <value>The start date.</value>
        </member>
        <member name="P:Radzen.Blazor.SchedulerViewBase.EndDate">
            <summary>
            Gets the end date.
            </summary>
            <value>The end date.</value>
        </member>
        <member name="M:Radzen.Blazor.SchedulerViewBase.OnAppointmentMove(Radzen.SchedulerAppointmentMoveEventArgs)">
            <summary>
            Handles appointent move event.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Radzen.Blazor.SchedulerYearViewBase">
            <summary>
            A base class for <see cref="T:Radzen.Blazor.RadzenScheduler`1" /> views.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.SchedulerYearViewBase.StartMonth">
            <summary>
            Gets the StartMonth of the view.
            </summary>
            <value>The start month.</value>
        </member>
        <member name="M:Radzen.Blazor.SchedulerYearViewBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Called by the Blazor runtime when parameters are set.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Radzen.Blazor.SeriesColorRange">
            <summary>
            Represents a Color Range object for passing to PickColor />
            </summary>
        </member>
        <member name="P:Radzen.Blazor.SeriesColorRange.Min">
            <summary>
            Gets or sets the minimum value of the range. Null will use default double.Min
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Radzen.Blazor.SeriesColorRange.Max">
            <summary>
            Gets or sets the maximum value of the range. Null will use default double.Max
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Radzen.Blazor.SeriesColorRange.Color">
            <summary>
            Gets or sets the color of the range.
            </summary>
            <value>The color.</value>
        </member>
        <member name="T:Radzen.Blazor.StepsCanChangeEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenSteps.CanChange" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.StepsCanChangeEventArgs.SelectedIndex">
            <summary>
            Index of clicked step.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.StepsCanChangeEventArgs.NewIndex">
            <summary>
            Index of clicked step.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.StepsCanChangeEventArgs.IsDefaultPrevented">
            <summary>
            Has step change action been prevented from occuring.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.StepsCanChangeEventArgs.PreventDefault">
            <summary>
            Prevent the change of the step.
            </summary>
        </member>
        <member name="T:Radzen.Blazor.TickTemplateContext">
            <summary>
            Class TickTemplateContext.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.TickTemplateContext.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.Blazor.TickTemplateContext.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.Blazor.TickTemplateContext.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:Radzen.Blazor.TickTemplateContext.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="T:Radzen.Blazor.ValidatorBase">
            <summary>
            Base class of Radzen validator components.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ValidatorBase.Form">
            <summary>
            Gets or sets the form which contains this validator.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ValidatorBase.Component">
            <summary>
            Specifies the component which this validator should validate. Must be set to the <see cref="P:Radzen.IRadzenFormComponent.Name" /> of an existing component.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ValidatorBase.Text">
            <summary>
            Specifies the message displayed when the validator is invalid.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ValidatorBase.Popup">
            <summary>
            Determines if the validator is displayed as a popup or not. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.ValidatorBase.IsValid">
            <summary>
            Returns the validity status.
            </summary>
            <value><c>true</c> if this validator is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.Blazor.ValidatorBase.EditContext">
            <summary>
            Provided by the <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" /> which contains this validator. Used internally.
            </summary>
            <value>The edit context.</value>
        </member>
        <member name="F:Radzen.Blazor.ValidatorBase.messages">
            <summary>
            Stores the validation messages.
            </summary>
        </member>
        <member name="M:Radzen.Blazor.ValidatorBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.ValidatorBase.GetComponentCssClass">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.ValidatorBase.Validate(Radzen.IRadzenFormComponent)">
            <summary>
            Runs validation against the specified component.
            </summary>
            <param name="component">The component to validate.</param>
            <returns><c>true</c> if validation is successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Radzen.Blazor.ValidatorBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.Blazor.ValidatorBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Radzen.Blazor.WhiteSpace">
            <summary>
            Specifies the white space text used when rendering the text.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.WhiteSpace.Wrap">
            <summary>
            The text will wrap when necessary.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.WhiteSpace.Nowrap">
            <summary>
            The text will not wrap.
            </summary>
        </member>
        <member name="F:Radzen.Blazor.WhiteSpace.Truncate">
            <summary>
            The text will not wrap, with addition of ellipsis and hidden overflow.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltip.Reference">
            <summary>
            Gets the reference for the current component.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenChartTooltip.CloseTooltip">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltip.ChartTooltip.Chart">
            <summary>
            Gets or sets the owning chart.
            </summary>
            <value>The chart.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltip.ChartTooltip.X">
            <summary>
            Gets or sets the horizontal position of the tooltip.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltip.ChartTooltip.Y">
            <summary>
            Gets or sets the vertical position of the tooltip.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenChartTooltip.ChartTooltip.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenComponents.Attributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the component.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenDialog.CloseSideDialogAriaLabel">
            <summary>
            Gets or sets the close side dialog aria label text.
            </summary>
            <value>The close side dialog aria label text.</value>
        </member>
        <member name="P:Radzen.Blazor.RadzenMenuItemWrapper.Item">
            <summary>
            Gets or sets the menu item.
            </summary>
            <value>The menu item.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenSeriesValueLine.GetTooltipPosition(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.Blazor.RadzenTooltip.Reference">
            <summary>
            Gets the reference for the current component.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="M:Radzen.Blazor.RadzenTooltip.CloseTooltip(System.String)">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:Radzen.Colors">
            <summary>
            Colors.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Primary">
            <summary>
            Primary.
            </summary>
        </member>
        <member name="F:Radzen.Colors.PrimaryLighter">
            <summary>
            Primary lighter.
            </summary>
        </member>
        <member name="F:Radzen.Colors.PrimaryLight">
            <summary>
            Primary light.
            </summary>
        </member>
        <member name="F:Radzen.Colors.PrimaryDark">
            <summary>
            Primary dark.
            </summary>
        </member>
        <member name="F:Radzen.Colors.PrimaryDarker">
            <summary>
            Primary darker.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Secondary">
            <summary>
            Secondary.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SecondaryLighter">
            <summary>
            Secondary lighter.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SecondaryLight">
            <summary>
            Secondary light.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SecondaryDark">
            <summary>
            Secondary dark.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SecondaryDarker">
            <summary>
            Secondary darker.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Info">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:Radzen.Colors.InfoLighter">
            <summary>
            Info lighter.
            </summary>
        </member>
        <member name="F:Radzen.Colors.InfoLight">
            <summary>
            Info light.
            </summary>
        </member>
        <member name="F:Radzen.Colors.InfoDark">
            <summary>
            Info dark.
            </summary>
        </member>
        <member name="F:Radzen.Colors.InfoDarker">
            <summary>
            Info darker.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SuccessLighter">
            <summary>
            Success lighter.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SuccessLight">
            <summary>
            Success light.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SuccessDark">
            <summary>
            Success dark.
            </summary>
        </member>
        <member name="F:Radzen.Colors.SuccessDarker">
            <summary>
            Success darker.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Radzen.Colors.WarningLighter">
            <summary>
            Warning lighter.
            </summary>
        </member>
        <member name="F:Radzen.Colors.WarningLight">
            <summary>
            Warning light.
            </summary>
        </member>
        <member name="F:Radzen.Colors.WarningDark">
            <summary>
            Warning dark.
            </summary>
        </member>
        <member name="F:Radzen.Colors.WarningDarker">
            <summary>
            Warning darker.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Danger">
            <summary>
            Danger.
            </summary>
        </member>
        <member name="F:Radzen.Colors.DangerLighter">
            <summary>
            Danger lighter.
            </summary>
        </member>
        <member name="F:Radzen.Colors.DangerLight">
            <summary>
            Danger light.
            </summary>
        </member>
        <member name="F:Radzen.Colors.DangerDark">
            <summary>
            Danger dark.
            </summary>
        </member>
        <member name="F:Radzen.Colors.DangerDarker">
            <summary>
            Danger darker.
            </summary>
        </member>
        <member name="F:Radzen.Colors.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base50">
            <summary>
            Base 50.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base100">
            <summary>
            Base 100.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base200">
            <summary>
            Base 200.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base300">
            <summary>
            Base 300.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base400">
            <summary>
            Base 400.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base500">
            <summary>
            Base 500.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base600">
            <summary>
            Base 600.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base700">
            <summary>
            Base 700.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base800">
            <summary>
            Base 800.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Base900">
            <summary>
            Base 900.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series1">
            <summary>
            Series1.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series2">
            <summary>
            Series2.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series3">
            <summary>
            Series3.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series4">
            <summary>
            Series4.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series5">
            <summary>
            Series5.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series6">
            <summary>
            Series6.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series7">
            <summary>
            Series7.
            </summary>
        </member>
        <member name="F:Radzen.Colors.Series8">
            <summary>
            Series8.
            </summary>
        </member>
        <member name="T:Radzen.ServiceCollectionExtensions">
            <summary>
            Class with IServiceCollection extensions methods.
            </summary>
        </member>
        <member name="M:Radzen.ServiceCollectionExtensions.AddRadzenComponents(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add Radzen Blazor components services
            </summary>
            <param name="services">Service collection</param>
        </member>
        <member name="T:Radzen.SecurityCodeType">
            <summary>
            SecurityCodeType enum
            </summary>
        </member>
        <member name="F:Radzen.SecurityCodeType.String">
            <summary>
            January.
            </summary>
        </member>
        <member name="F:Radzen.SecurityCodeType.Numeric">
            <summary>
            February
            </summary>
        </member>
        <member name="F:Radzen.SecurityCodeType.Password">
            <summary>
            March
            </summary>
        </member>
        <member name="T:Radzen.Month">
            <summary>
            Month enum
            </summary>
        </member>
        <member name="F:Radzen.Month.January">
            <summary>
            January.
            </summary>
        </member>
        <member name="F:Radzen.Month.February">
            <summary>
            February
            </summary>
        </member>
        <member name="F:Radzen.Month.March">
            <summary>
            March
            </summary>
        </member>
        <member name="F:Radzen.Month.April">
            <summary>
            April
            </summary>
        </member>
        <member name="F:Radzen.Month.May">
            <summary>
            May
            </summary>
        </member>
        <member name="F:Radzen.Month.June">
            <summary>
            June
            </summary>
        </member>
        <member name="F:Radzen.Month.July">
            <summary>
            July
            </summary>
        </member>
        <member name="F:Radzen.Month.August">
            <summary>
            August
            </summary>
        </member>
        <member name="F:Radzen.Month.September">
            <summary>
            September
            </summary>
        </member>
        <member name="F:Radzen.Month.October">
            <summary>
            October
            </summary>
        </member>
        <member name="F:Radzen.Month.November">
            <summary>
            November
            </summary>
        </member>
        <member name="F:Radzen.Month.December">
            <summary>
            December
            </summary>
        </member>
        <member name="T:Radzen.TimeSpanUnit">
            <summary>
            Specifies the time unit of <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="F:Radzen.TimeSpanUnit.Day">
            <summary>
            Day.
            </summary>
        </member>
        <member name="F:Radzen.TimeSpanUnit.Hour">
            <summary>
            Hour.
            </summary>
        </member>
        <member name="F:Radzen.TimeSpanUnit.Minute">
            <summary>
            Minute.
            </summary>
        </member>
        <member name="F:Radzen.TimeSpanUnit.Second">
            <summary>
            Second.
            </summary>
        </member>
        <member name="F:Radzen.TimeSpanUnit.Millisecond">
            <summary>
            Millisecond.
            </summary>
        </member>
        <member name="F:Radzen.TimeSpanUnit.Microsecond">
            <summary>
            Microsecond.
            </summary>
        </member>
        <member name="T:Radzen.HtmlEditorMode">
            <summary>
            Html editor mode (Rendered or Raw). Also used for toolbar buttons to enable/disable according to mode.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorMode.Design">
            <summary>
            The editor is in Design mode.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorMode.Source">
            <summary>
            The editor is in Source mode.
            </summary>
        </member>
        <member name="T:Radzen.DataGridSettings">
            <summary>
            DataGrid settings class used to Save/Load settings.
            </summary>
        </member>
        <member name="P:Radzen.DataGridSettings.Columns">
            <summary>
            Columns.
            </summary>
        </member>
        <member name="P:Radzen.DataGridSettings.Groups">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="P:Radzen.DataGridSettings.CurrentPage">
            <summary>
            CurrentPage.
            </summary>
        </member>
        <member name="P:Radzen.DataGridSettings.PageSize">
            <summary>
            PageSize.
            </summary>
        </member>
        <member name="T:Radzen.DataGridColumnSettings">
            <summary>
            DataGrid column settings class used to Save/Load settings.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.UniqueID">
            <summary>
            Property.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.Property">
            <summary>
            Property.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.Visible">
            <summary>
            Visible.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.OrderIndex">
            <summary>
            OrderIndex.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.SortOrder">
            <summary>
            SortOrder.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.SortIndex">
            <summary>
            SortIndex.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.FilterValue">
            <summary>
            FilterValue.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.FilterOperator">
            <summary>
            FilterOperator.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.SecondFilterValue">
            <summary>
            SecondFilterValue.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.SecondFilterOperator">
            <summary>
            SecondFilterOperator.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.LogicalFilterOperator">
            <summary>
            LogicalFilterOperator.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSettings.CustomFilterExpression">
            <summary>
            CustomFilterExpression.
            </summary>
        </member>
        <member name="T:Radzen.IRadzenSelectBar">
            <summary>
            Represents the common <see cref="T:Radzen.Blazor.RadzenSelectBar`1" /> API used by
            its items. Injected as a cascading property in <see cref="T:Radzen.Blazor.RadzenSelectBarItem" />.
            </summary>
        </member>
        <member name="M:Radzen.IRadzenSelectBar.AddItem(Radzen.Blazor.RadzenSelectBarItem)">
            <summary>
            Adds the specified item to the select bar.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Radzen.IRadzenSelectBar.RemoveItem(Radzen.Blazor.RadzenSelectBarItem)">
            <summary>
            Removes the specified item from the select bar.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Radzen.IRadzenSelectBar.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="T:Radzen.RadzenDropZoneItemEventArgs`1">
            <summary>
            Supplies information about RadzenDropZoneContainer CanDrop function and RadzenDropZone Drop event.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemEventArgs`1.FromZone">
            <summary>
            Gets the dragged item zone.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemEventArgs`1.ToZone">
            <summary>
            Gets the drop zone.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemEventArgs`1.Item">
            <summary>
            Gets the dragged item.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemEventArgs`1.ToItem">
            <summary>
            Gets the dropped item.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemEventArgs`1.DataTransfer">
            <summary>
            The data that underlies a drag-and-drop operation, known as the drag data store.
            See <see cref="P:Radzen.RadzenDropZoneItemEventArgs`1.DataTransfer"/>.
            </summary>
        </member>
        <member name="T:Radzen.RadzenDropZoneItemRenderEventArgs`1">
            <summary>
            Supplies information about RadzenDropZoneContainer ItemRender event.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemRenderEventArgs`1.Zone">
            <summary>
            Gets the drop zone.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemRenderEventArgs`1.Item">
            <summary>
            Gets the dragged item.
            </summary>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemRenderEventArgs`1.Visible">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.RadzenDropZoneItemRenderEventArgs`1.Attributes">
            <summary>
            Gets or sets the row HTML attributes.
            </summary>
        </member>
        <member name="T:Radzen.DropDownBaseItemRenderEventArgs`1">
            <summary>
            Supplies information about RadzenDropDown ItemRender event.
            </summary>
        </member>
        <member name="P:Radzen.DropDownBaseItemRenderEventArgs`1.Item">
            <summary>
            Gets the data item.
            </summary>
        </member>
        <member name="P:Radzen.DropDownBaseItemRenderEventArgs`1.Visible">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBaseItemRenderEventArgs`1.Disabled">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBaseItemRenderEventArgs`1.Attributes">
            <summary>
            Gets or sets the row HTML attributes.
            </summary>
        </member>
        <member name="T:Radzen.DropDownItemRenderEventArgs`1">
            <summary>
            Supplies information about RadzenDropDown ItemRender event.
            </summary>
        </member>
        <member name="P:Radzen.DropDownItemRenderEventArgs`1.DropDown">
            <summary>
            Gets the DropDown.
            </summary>
        </member>
        <member name="T:Radzen.ListBoxItemRenderEventArgs`1">
            <summary>
            Supplies information about RadzenDropDown ItemRender event.
            </summary>
        </member>
        <member name="P:Radzen.ListBoxItemRenderEventArgs`1.ListBox">
            <summary>
            Gets the DropDown.
            </summary>
        </member>
        <member name="T:Radzen.PickListItemRenderEventArgs`1">
            <summary>
            Supplies information about RadzenPickList ItemRender event.
            </summary>
        </member>
        <member name="P:Radzen.PickListItemRenderEventArgs`1.Item">
            <summary>
            Gets the data item.
            </summary>
        </member>
        <member name="P:Radzen.PickListItemRenderEventArgs`1.Visible">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.PickListItemRenderEventArgs`1.Disabled">
            <summary>
            Gets or sets a value indicating whether this item is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.PickListItemRenderEventArgs`1.Attributes">
            <summary>
            Gets or sets the row HTML attributes.
            </summary>
        </member>
        <member name="T:Radzen.DateRenderEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDatePicker`1.DateRender" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.DateRenderEventArgs.Attributes">
            <summary>
            Gets or sets the HTML attributes that will be applied to item HTML element.
            </summary>
            <example>
            void OnDateRender(DateRenderEventArgs args)
            {
                args.Attributes["style"] = "background-color: red; color: black;";
            }
            </example>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.DateRenderEventArgs.Date">
            <summary>
            Gets the date which the rendered item represents.
            </summary>
        </member>
        <member name="P:Radzen.DateRenderEventArgs.Disabled">
            <summary>
            Gets or sets a value indicating whether the rendered item is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.GoogleMapPosition">
            <summary>
            A class that represents a <see cref="T:Radzen.Blazor.RadzenGoogleMap" /> position.
            </summary>
        </member>
        <member name="P:Radzen.GoogleMapPosition.Lat">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Radzen.GoogleMapPosition.Lng">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="M:Radzen.GoogleMapPosition.Equals(Radzen.GoogleMapPosition)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.GoogleMapPosition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.GoogleMapPosition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Radzen.GoogleMapClickEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenGoogleMap.MapClick" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.GoogleMapClickEventArgs.Position">
            <summary>
            The position which represents the clicked map location.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerAppointmentMoveEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.Rendering.DropableViewBase.AppointmentMove" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerAppointmentMoveEventArgs.Appointment">
            <summary>
            Gets or sets the appointment data.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerAppointmentMoveEventArgs.TimeSpan">
            <summary>
            Gets or sets the time span which represents the difference between slot start and appointment start.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerAppointmentMoveEventArgs.SlotDate">
            <summary>
            Gets or sets the date of the slot where the appointment is moved.
            </summary>
        </member>
        <member name="T:Radzen.MenuItemEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenMenu.Click" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.MenuItemEventArgs.Text">
            <summary>
            Gets text of the clicked item.
            </summary>
        </member>
        <member name="P:Radzen.MenuItemEventArgs.Value">
            <summary>
            Gets the value of the clicked item.
            </summary>
        </member>
        <member name="P:Radzen.MenuItemEventArgs.Path">
            <summary>
            Gets the path path of the clicked item.
            </summary>
        </member>
        <member name="T:Radzen.UploadErrorEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenUpload.Error" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.UploadErrorEventArgs.Message">
            <summary>
            Gets a message telling what caused the error.
            </summary>
        </member>
        <member name="T:Radzen.RowRenderEventArgs`1">
            <summary>
            Supplies information about a <see cref="T:Radzen.Blazor.RadzenDataGrid`1" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.RowRenderEventArgs`1.Attributes">
            <summary>
            Gets or sets the row HTML attributes. They will apply to the table row (tr) element which RadzenDataGrid renders for every row.
            </summary>
        </member>
        <member name="P:Radzen.RowRenderEventArgs`1.Data">
            <summary>
            Gets the data item which the current row represents.
            </summary>
        </member>
        <member name="P:Radzen.RowRenderEventArgs`1.Expandable">
            <summary>
            Gets or sets a value indicating whether this row is expandable.
            </summary>
            <value><c>true</c> if expandable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.RowRenderEventArgs`1.Index">
            <summary>
            Gets or sets a value indicating row index.
            </summary>
        </member>
        <member name="T:Radzen.GroupRowRenderEventArgs">
            <summary>
            Supplies information about a <see cref="T:Radzen.Blazor.RadzenDataGrid`1" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.GroupRowRenderEventArgs.Attributes">
            <summary>
            Gets or sets the group row HTML attributes. They will apply to the table row (tr) element which RadzenDataGrid renders for every group row.
            </summary>
        </member>
        <member name="P:Radzen.GroupRowRenderEventArgs.Group">
            <summary>
            Gets the data item which the current row represents.
            </summary>
        </member>
        <member name="P:Radzen.GroupRowRenderEventArgs.Expanded">
            <summary>
            Gets or sets a value indicating whether this group row is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.GroupRowRenderEventArgs.FirstRender">
            <summary>
            Gets a value indicating whether this is the first time the RadzenGrid has rendered.
            </summary>
            <value><c>true</c> if this is the first time; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.DataGridRenderEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.Render" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridRenderEventArgs`1.Grid">
            <summary>
            Gets the instance of the RadzenDataGrid component which has rendered.
            </summary>
        </member>
        <member name="P:Radzen.DataGridRenderEventArgs`1.FirstRender">
            <summary>
            Gets a value indicating whether this is the first time the RadzenDataGrid has rendered.
            </summary>
            <value><c>true</c> if this is the first time; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.DataGridLoadSettingsEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.LoadSettings" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.DataGridLoadSettingsEventArgs.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
        </member>
        <member name="T:Radzen.DataGridCellRenderEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.CellRender" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridCellRenderEventArgs`1.Column">
            <summary>
            Gets the RadzenDataGridColumn which this cells represents.
            </summary>
        </member>
        <member name="T:Radzen.DataGridCellMouseEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.CellContextMenu" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridCellMouseEventArgs`1.Data">
            <summary>
            Gets the data item which the clicked DataGrid row represents.
            </summary>
        </member>
        <member name="P:Radzen.DataGridCellMouseEventArgs`1.Column">
            <summary>
            Gets the RadzenDataGridColumn which this cells represents.
            </summary>
        </member>
        <member name="T:Radzen.TreeItemContextMenuEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenTree.ItemContextMenu" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemContextMenuEventArgs.Text">
            <summary>
            Gets the tree item text.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemContextMenuEventArgs.Value">
            <summary>
            Gets the tree item value.
            </summary>
        </member>
        <member name="T:Radzen.DataGridRowMouseEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.RowClick" /> or <see cref="P:Radzen.Blazor.RadzenDataGrid`1.RowDoubleClick" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridRowMouseEventArgs`1.Data">
            <summary>
            Gets the data item which the clicked DataGrid row represents.
            </summary>
        </member>
        <member name="T:Radzen.UploadChangeEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenUpload.Change" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.UploadChangeEventArgs.Files">
            <summary>
            Gets a collection of the selected files.
            </summary>
        </member>
        <member name="T:Radzen.UploadProgressArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenUpload.Progress" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.UploadProgressArgs.Loaded">
            <summary>
            Gets or sets the number of bytes that have been uploaded.
            </summary>
        </member>
        <member name="P:Radzen.UploadProgressArgs.Total">
            <summary>
            Gets the total number of bytes that need to be uploaded.
            </summary>
        </member>
        <member name="P:Radzen.UploadProgressArgs.Progress">
            <summary>
            Gets the progress as a percentage value (from <c>0</c> to <c>100</c>).
            </summary>
        </member>
        <member name="P:Radzen.UploadProgressArgs.Files">
            <summary>
            Gets a collection of files that are being uploaded.
            </summary>
        </member>
        <member name="P:Radzen.UploadProgressArgs.Cancel">
            <summary>
            Gets or sets a flag indicating whether the underlying XMLHttpRequest should be aborted.
            </summary>
        </member>
        <member name="T:Radzen.UploadCompleteEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenUpload.Complete" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.UploadCompleteEventArgs.JsonResponse">
            <summary>
            Gets the JSON response which the server returned after the upload.
            </summary>
        </member>
        <member name="P:Radzen.UploadCompleteEventArgs.RawResponse">
            <summary>
            Gets the raw server response.
            </summary>
        </member>
        <member name="P:Radzen.UploadCompleteEventArgs.Cancelled">
            <summary>
            Gets a boolean value indicating if the upload was cancelled by the user.
            </summary>
        </member>
        <member name="T:Radzen.FileInfo">
            <summary>
            Represents a file which the user selects for upload via <see cref="T:Radzen.Blazor.RadzenUpload" />.
            </summary>
        </member>
        <member name="M:Radzen.FileInfo.#ctor">
            <summary>
            Creates FileInfo.
            </summary>
        </member>
        <member name="M:Radzen.FileInfo.#ctor(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Creates FileInfo with IBrowserFile as source.
            </summary>
        </member>
        <member name="P:Radzen.FileInfo.Name">
            <summary>
            Gets the name of the selected file.
            </summary>
        </member>
        <member name="P:Radzen.FileInfo.Size">
            <summary>
            Gets the size (in bytes) of the selected file.
            </summary>
        </member>
        <member name="P:Radzen.FileInfo.Source">
            <summary>
            Gets the IBrowserFile.
            </summary>
        </member>
        <member name="P:Radzen.FileInfo.LastModified">
            <summary>
            Gets the LastModified.
            </summary>
        </member>
        <member name="P:Radzen.FileInfo.ContentType">
            <summary>
            Gets the ContentType.
            </summary>
        </member>
        <member name="M:Radzen.FileInfo.OpenReadStream(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Open read stream.
            </summary>
        </member>
        <member name="T:Radzen.PreviewFileInfo">
            <summary>
            Represents the preview which <see cref="T:Radzen.Blazor.RadzenUpload" /> displays for selected files.
            </summary>
        </member>
        <member name="M:Radzen.PreviewFileInfo.#ctor(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Initializes a new instance of PreviewFileInfo from a browser file.
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:Radzen.PreviewFileInfo.#ctor">
            <summary>
            Initializes a new, empty instance of PreviewFileInfo.
            </summary>
        </member>
        <member name="P:Radzen.PreviewFileInfo.Url">
            <summary>
            Gets the URL of the previewed file.
            </summary>
        </member>
        <member name="T:Radzen.Query">
            <summary>
            Contains a LINQ query in a serializable format.
            </summary>
        </member>
        <member name="P:Radzen.Query.Filter">
            <summary>
            Gets the filter expression as a string.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Radzen.Query.Filters">
            <summary>
            Gets the filter expression as a collection of filter descriptors.
            </summary>
            <value>The filter parameters.</value>
        </member>
        <member name="P:Radzen.Query.Sorts">
            <summary>
            Gets the sort expression as a collection of sort descriptors.
            </summary>
            <value>The sorts.</value>
        </member>
        <member name="P:Radzen.Query.FilterParameters">
            <summary>
            Gets or sets the filter parameters.
            </summary>
            <value>The filter parameters.</value>
        </member>
        <member name="P:Radzen.Query.OrderBy">
            <summary>
            Gets or sets the order by.
            </summary>
            <value>The order by.</value>
        </member>
        <member name="P:Radzen.Query.Expand">
            <summary>
            Gets or sets the expand.
            </summary>
            <value>The expand.</value>
        </member>
        <member name="P:Radzen.Query.Select">
            <summary>
            Gets or sets the select.
            </summary>
            <value>The select.</value>
        </member>
        <member name="P:Radzen.Query.Skip">
            <summary>
            Gets or sets the skip.
            </summary>
            <value>The skip.</value>
        </member>
        <member name="P:Radzen.Query.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="M:Radzen.Query.ToUrl(System.String)">
            <summary>
            Converts the query to OData query format.
            </summary>
            <param name="url">The URL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Density">
            <summary>
            Specifies component density.
            </summary>
        </member>
        <member name="F:Radzen.Density.Default">
            <summary>
            The default density.
            </summary>
        </member>
        <member name="F:Radzen.Density.Compact">
            <summary>
            А high density compact mode.
            </summary>
        </member>
        <member name="T:Radzen.PopupRenderMode">
            <summary>
            Specifies the ways a component renders its popup.
            </summary>
        </member>
        <member name="F:Radzen.PopupRenderMode.OnDemand">
            <summary>
            The component renders its popup on-demand.
            </summary>
        </member>
        <member name="F:Radzen.PopupRenderMode.Initial">
            <summary>
            The component renders its popup initially.
            </summary>
        </member>
        <member name="T:Radzen.TabRenderMode">
            <summary>
            Specifies the ways a <see cref="T:Radzen.Blazor.RadzenTabs" /> component renders its items.
            </summary>
        </member>
        <member name="F:Radzen.TabRenderMode.Server">
            <summary>
            The RadzenTabs component switches its items server side. Only the selected item is rendered.
            </summary>
        </member>
        <member name="F:Radzen.TabRenderMode.Client">
            <summary>
            The RadzenTabs components switches its items client-side. All items are rendered and the unselected ones are hidden with CSS.
            </summary>
        </member>
        <member name="T:Radzen.TabPosition">
            <summary>
            Specifies the ways a <see cref="T:Radzen.Blazor.RadzenTabs" /> component renders its titles.
            </summary>
        </member>
        <member name="F:Radzen.TabPosition.Top">
            <summary>
            The RadzenTabs titles are displayed at the top of the component.
            </summary>
        </member>
        <member name="F:Radzen.TabPosition.TopRight">
            <summary>
            The RadzenTabs titles are displayed at the top right side of the component.
            </summary>
        </member>
        <member name="F:Radzen.TabPosition.Bottom">
            <summary>
            The RadzenTabs titles are displayed at the bottom of the component.
            </summary>
        </member>
        <member name="F:Radzen.TabPosition.BottomRight">
            <summary>
            The RadzenTabs titles are displayed at the bottom right side of the component.
            </summary>
        </member>
        <member name="F:Radzen.TabPosition.Left">
            <summary>
            The RadzenTabs titles are displayed at the left side of the component.
            </summary>
        </member>
        <member name="F:Radzen.TabPosition.Right">
            <summary>
            The RadzenTabs titles are displayed at the right side of the component.
            </summary>
        </member>
        <member name="T:Radzen.LinePosition">
            <summary>
            Specifies the ways a <see cref="T:Radzen.Blazor.RadzenTimeline" /> component renders line and content items.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.Center">
            <summary>
            The RadzenTimeline line is displayed at the center of the component.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.Alternate">
            <summary>
            The RadzenTimeline line is displayed at the center of the component with alternating content position.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.Start">
            <summary>
            The RadzenTimeline line is displayed at the start of the component.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.End">
            <summary>
            The RadzenTimeline line is displayed at the end of the component.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.Left">
            <summary>
            The RadzenTimeline line is displayed at the left side of the component.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.Right">
            <summary>
            The RadzenTimeline line is displayed at the right side of the component.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.Top">
            <summary>
            The RadzenTimeline line is displayed at the top of the component.
            </summary>
        </member>
        <member name="F:Radzen.LinePosition.Bottom">
            <summary>
            The RadzenTimeline line is displayed at the bottom of the component.
            </summary>
        </member>
        <member name="T:Radzen.PagerPosition">
            <summary>
            Specifies the position at which a Radzen Blazor component renders its built-in <see cref="T:Radzen.Blazor.RadzenPager" />.
            </summary>
        </member>
        <member name="F:Radzen.PagerPosition.Top">
            <summary>
            RadzenPager is displayed at the top of the component.
            </summary>
        </member>
        <member name="F:Radzen.PagerPosition.Bottom">
            <summary>
            RadzenPager is displayed at the bottom of the component.
            </summary>
        </member>
        <member name="F:Radzen.PagerPosition.TopAndBottom">
            <summary>
            RadzenPager is displayed at the top and at the bottom of the component.
            </summary>
        </member>
        <member name="T:Radzen.DataGridExpandMode">
            <summary>
            Specifies the expand behavior of <see cref="T:Radzen.Blazor.RadzenDataGrid`1" />.
            </summary>
        </member>
        <member name="F:Radzen.DataGridExpandMode.Single">
            <summary>
            The user can expand only one row at a time. Expanding a different row collapses the last expanded row.
            </summary>
        </member>
        <member name="F:Radzen.DataGridExpandMode.Multiple">
            <summary>
            The user can expand multiple rows.
            </summary>
        </member>
        <member name="T:Radzen.DataGridEditMode">
            <summary>
            Specifies the inline edit mode behavior of <see cref="T:Radzen.Blazor.RadzenDataGrid`1" />.
            </summary>
        </member>
        <member name="F:Radzen.DataGridEditMode.Single">
            <summary>
            The user can edit only one row at a time. Editing a different row cancels edit mode for the last edited row.
            </summary>
        </member>
        <member name="F:Radzen.DataGridEditMode.Multiple">
            <summary>
            The user can edit multiple rows.
            </summary>
        </member>
        <member name="T:Radzen.DataGridSelectionMode">
            <summary>
            Specifies the selection mode behavior of <see cref="T:Radzen.Blazor.RadzenDataGrid`1" />.
            </summary>
        </member>
        <member name="F:Radzen.DataGridSelectionMode.Single">
            <summary>
            The user can select only one row at a time. Selecting a different row deselects the last selected row.
            </summary>
        </member>
        <member name="F:Radzen.DataGridSelectionMode.Multiple">
            <summary>
            The user can select multiple rows.
            </summary>
        </member>
        <member name="T:Radzen.DataGridGridLines">
            <summary>
            Specifies the grid lines of <see cref="T:Radzen.Blazor.RadzenDataGrid`1" />.
            </summary>
        </member>
        <member name="F:Radzen.DataGridGridLines.Default">
            <summary>
            Theme default.
            </summary>
        </member>
        <member name="F:Radzen.DataGridGridLines.Both">
            <summary>
            Both horizontal and vertical grid lines.
            </summary>
        </member>
        <member name="F:Radzen.DataGridGridLines.None">
            <summary>
            No grid lines.
            </summary>
        </member>
        <member name="F:Radzen.DataGridGridLines.Horizontal">
            <summary>
            Horizontal grid lines.
            </summary>
        </member>
        <member name="F:Radzen.DataGridGridLines.Vertical">
            <summary>
            Vertical grid lines.
            </summary>
        </member>
        <member name="T:Radzen.NotificationSeverity">
            <summary>
            Specifies the severity of a <see cref="T:Radzen.Blazor.RadzenNotification" />. Severity changes the visual styling of the RadzenNotification (icon and background color).
            </summary>
        </member>
        <member name="F:Radzen.NotificationSeverity.Error">
            <summary>
            Represents an error.
            </summary>
        </member>
        <member name="F:Radzen.NotificationSeverity.Info">
            <summary>
            Represents some generic information.
            </summary>
        </member>
        <member name="F:Radzen.NotificationSeverity.Success">
            <summary>
            Represents a success.
            </summary>
        </member>
        <member name="F:Radzen.NotificationSeverity.Warning">
            <summary>
            Represents a warning.
            </summary>
        </member>
        <member name="T:Radzen.AlertStyle">
            <summary>
            Specifies the display style or severity of a <see cref="T:Radzen.Blazor.RadzenAlert" />. Affects the visual styling of RadzenAlert (background and text color).
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Primary">
            <summary>
            Primary styling. Similar to primary buttons.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Secondary">
            <summary>
            Secondary styling. Similar to secondary buttons.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Light">
            <summary>
            Light styling. Similar to light buttons.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Base">
            <summary>
            Base styling. Similar to base buttons.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Dark">
            <summary>
            Dark styling. Similar to dark buttons.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Success">
            <summary>
            Success styling.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Danger">
            <summary>
            Danger styling.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Warning">
            <summary>
            Warning styling.
            </summary>
        </member>
        <member name="F:Radzen.AlertStyle.Info">
            <summary>
            Informative styling.
            </summary>
        </member>
        <member name="T:Radzen.AlertSize">
            <summary>
            Specifies the size of a <see cref="T:Radzen.Blazor.RadzenAlert" />.
            </summary>
        </member>
        <member name="F:Radzen.AlertSize.ExtraSmall">
            <summary>
            The smallest alert.
            </summary>
        </member>
        <member name="F:Radzen.AlertSize.Small">
            <summary>
            A alert smaller than the default.
            </summary>
        </member>
        <member name="F:Radzen.AlertSize.Medium">
            <summary>
            The default size of an alert.
            </summary>
        </member>
        <member name="F:Radzen.AlertSize.Large">
            <summary>
            An alert larger than the default.
            </summary>
        </member>
        <member name="T:Radzen.PointSize">
            <summary>
            Specifies the size of a point in <see cref="T:Radzen.Blazor.RadzenTimelineItem" />.
            </summary>
        </member>
        <member name="F:Radzen.PointSize.ExtraSmall">
            <summary>
            The smallest.
            </summary>
        </member>
        <member name="F:Radzen.PointSize.Small">
            <summary>
            Smaller than the default.
            </summary>
        </member>
        <member name="F:Radzen.PointSize.Medium">
            <summary>
            The default size.
            </summary>
        </member>
        <member name="F:Radzen.PointSize.Large">
            <summary>
            Larger than the default.
            </summary>
        </member>
        <member name="T:Radzen.PointStyle">
            <summary>
            Specifies the display style or severity of a <see cref="T:Radzen.Blazor.RadzenTimelineItem" />
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Primary">
            <summary>
            Primary styling. Similar to primary buttons.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Secondary">
            <summary>
            Secondary styling. Similar to secondary buttons.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Light">
            <summary>
            Light styling. Similar to light buttons.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Base">
            <summary>
            Base styling. Similar to base buttons.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Dark">
            <summary>
            Dark styling. Similar to dark buttons.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Success">
            <summary>
            Success styling.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Danger">
            <summary>
            Danger styling.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Warning">
            <summary>
            Warning styling.
            </summary>
        </member>
        <member name="F:Radzen.PointStyle.Info">
            <summary>
            Informative styling.
            </summary>
        </member>
        <member name="T:Radzen.ProgressBarMode">
            <summary>
            Specifies the behavior of <see cref="T:Radzen.Blazor.RadzenProgressBar" /> or <see cref="T:Radzen.Blazor.RadzenProgressBarCircular" />.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarMode.Determinate">
            <summary>
            RadzenProgressBar displays its value as a percentage range (0 to 100).
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarMode.Indeterminate">
            <summary>
            RadzenProgressBar displays continuous animation.
            </summary>
        </member>
        <member name="T:Radzen.ProgressBarStyle">
            <summary>
            Specifies the display style of a <see cref="T:Radzen.Blazor.RadzenProgressBar" /> and <see cref="T:Radzen.Blazor.RadzenProgressBarCircular" />. Affects the visual styling of RadzenProgressBar (background and text color) and RadzenProgressBarCircular (stroke and text color).
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Primary">
            <summary>
            Primary styling. Similar to primary buttons.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Secondary">
            <summary>
            Secondary styling. Similar to secondary buttons.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Light">
            <summary>
            Light styling. Similar to light buttons.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Base">
            <summary>
            Base styling. Similar to base buttons.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Dark">
            <summary>
            Dark styling. Similar to dark buttons.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Success">
            <summary>
            Success styling.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Danger">
            <summary>
            Danger styling.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Warning">
            <summary>
            Warning styling.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarStyle.Info">
            <summary>
            Informative styling.
            </summary>
        </member>
        <member name="T:Radzen.ProgressBarCircularSize">
            <summary>
            Specifies the size of a <see cref="T:Radzen.Blazor.RadzenProgressBarCircular" />.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarCircularSize.Medium">
            <summary>
            The default size of a circular progress bar.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarCircularSize.Large">
            <summary>
            A circular progress bar larger than the default.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarCircularSize.Small">
            <summary>
            A circular progress bar smaller than the default.
            </summary>
        </member>
        <member name="F:Radzen.ProgressBarCircularSize.ExtraSmall">
            <summary>
            The smallest circular progress bar.
            </summary>
        </member>
        <member name="T:Radzen.Orientation">
            <summary>
            Represents orientation of components that have items.
            </summary>
        </member>
        <member name="F:Radzen.Orientation.Horizontal">
            <summary>
            Sibling items are displayed next to each other.
            </summary>
        </member>
        <member name="F:Radzen.Orientation.Vertical">
            <summary>
            Sibling items are displayed below each other.
            </summary>
        </member>
        <member name="T:Radzen.FlexWrap">
            <summary>
            Represents whether items are forced onto one line or can wrap onto multiple lines.
            </summary>
        </member>
        <member name="F:Radzen.FlexWrap.NoWrap">
            <summary>
            The items are laid out in a single line.
            </summary>
        </member>
        <member name="F:Radzen.FlexWrap.Wrap">
            <summary>
            The items break into multiple lines.
            </summary>
        </member>
        <member name="F:Radzen.FlexWrap.WrapReverse">
            <summary>
            The items break into multiple lines reversed.
            </summary>
        </member>
        <member name="T:Radzen.JustifyContent">
            <summary>
            Represents content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.Normal">
            <summary>
            Normal content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.Center">
            <summary>
            Center content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.Start">
            <summary>
            Start content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.End">
            <summary>
            End content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.Left">
            <summary>
            Left content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.Right">
            <summary>
            Right content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.SpaceBetween">
            <summary>
            SpaceBetween content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.SpaceAround">
            <summary>
            SpaceAround content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.SpaceEvenly">
            <summary>
            SpaceEvenly content justification of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.JustifyContent.Stretch">
            <summary>
            Stretch content justification of Stack items.
            </summary>
        </member>
        <member name="T:Radzen.AlignItems">
            <summary>
            Represents the alignment of Stack items.
            </summary>
        </member>
        <member name="F:Radzen.AlignItems.Normal">
            <summary>
            Normal items alignment.
            </summary>
        </member>
        <member name="F:Radzen.AlignItems.Center">
            <summary>
            Center items alignment.
            </summary>
        </member>
        <member name="F:Radzen.AlignItems.Start">
            <summary>
            Start items alignment.
            </summary>
        </member>
        <member name="F:Radzen.AlignItems.End">
            <summary>
            End items alignment.
            </summary>
        </member>
        <member name="F:Radzen.AlignItems.Stretch">
            <summary>
            Stretch items alignment.
            </summary>
        </member>
        <member name="T:Radzen.SortOrder">
            <summary>
            Specifies the sort order in components that support sorting.
            </summary>
        </member>
        <member name="F:Radzen.SortOrder.Ascending">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="F:Radzen.SortOrder.Descending">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="T:Radzen.ButtonType">
            <summary>
            Specifies the type of a <see cref="T:Radzen.Blazor.RadzenButton" />. Renders as the <c>type</c> HTML attribute.
            </summary>
        </member>
        <member name="F:Radzen.ButtonType.Button">
            <summary>
            Generic button which does not submit its parent form.
            </summary>
        </member>
        <member name="F:Radzen.ButtonType.Submit">
            <summary>
            Clicking a submit button submits its parent form.
            </summary>
        </member>
        <member name="F:Radzen.ButtonType.Reset">
            <summary>
            Clicking a reset button clears the value of all inputs in its parent form.
            </summary>
        </member>
        <member name="T:Radzen.ButtonSize">
            <summary>
            Specifies the size of a <see cref="T:Radzen.Blazor.RadzenButton" />.
            </summary>
        </member>
        <member name="F:Radzen.ButtonSize.Medium">
            <summary>
            The default size of a button.
            </summary>
        </member>
        <member name="F:Radzen.ButtonSize.Large">
            <summary>
            A button larger than the default.
            </summary>
        </member>
        <member name="F:Radzen.ButtonSize.Small">
            <summary>
            A button smaller than the default.
            </summary>
        </member>
        <member name="F:Radzen.ButtonSize.ExtraSmall">
            <summary>
            The smallest button.
            </summary>
        </member>
        <member name="T:Radzen.ButtonStyle">
            <summary>
            Specifies the display style of a <see cref="T:Radzen.Blazor.RadzenButton" />. Affects the visual styling of RadzenButton (background and text color).
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Primary">
            <summary>
            A primary button. Clicking it performs the primary action in a form or dialog (e.g. "save").
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Secondary">
            <summary>
            A secondary button. Clicking it performs a secondaryprimary action in a form or dialog (e.g. close a dialog or cancel a form).
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Light">
            <summary>
            A button with lighter styling.
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Base">
            <summary>
            The base UI styling.
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Dark">
            <summary>
            A button with dark styling.
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Success">
            <summary>
            A button with success styling.
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Danger">
            <summary>
            A button which represents a dangerous action e.g. "delete".
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Warning">
            <summary>
            A button with warning styling.
            </summary>
        </member>
        <member name="F:Radzen.ButtonStyle.Info">
            <summary>
            A button with informative styling.
            </summary>
        </member>
        <member name="T:Radzen.Variant">
            <summary>
            Specifies the design variant of <see cref="T:Radzen.Blazor.RadzenButton" /> and <see cref="T:Radzen.Blazor.RadzenBadge" />. Affects the visual styling of RadzenButton and RadzenBadge.
            </summary>
        </member>
        <member name="F:Radzen.Variant.Filled">
            <summary>
            A filled appearance.
            </summary>
        </member>
        <member name="F:Radzen.Variant.Flat">
            <summary>
            A flat appearance without any drop shadows.
            </summary>
        </member>
        <member name="F:Radzen.Variant.Text">
            <summary>
            A text appearance.
            </summary>
        </member>
        <member name="F:Radzen.Variant.Outlined">
            <summary>
            An outlined appearance.
            </summary>
        </member>
        <member name="T:Radzen.Shade">
            <summary>
            Specifies the color shade of a <see cref="T:Radzen.Blazor.RadzenButton" />. Affects the visual styling of RadzenButton.
            </summary>
        </member>
        <member name="F:Radzen.Shade.Lighter">
            <summary>
            A button with lighter styling.
            </summary>
        </member>
        <member name="F:Radzen.Shade.Light">
            <summary>
            A button with light styling.
            </summary>
        </member>
        <member name="F:Radzen.Shade.Default">
            <summary>
            A button with default styling.
            </summary>
        </member>
        <member name="F:Radzen.Shade.Dark">
            <summary>
            A button with dark styling.
            </summary>
        </member>
        <member name="F:Radzen.Shade.Darker">
            <summary>
            A button with darker styling.
            </summary>
        </member>
        <member name="T:Radzen.FilterMode">
            <summary>
            Specifies the filtering mode of <see cref="T:Radzen.Blazor.RadzenDataGrid`1" />.
            </summary>
        </member>
        <member name="F:Radzen.FilterMode.Simple">
            <summary>
            The component displays inline filtering UI and filters as you type.
            </summary>
        </member>
        <member name="F:Radzen.FilterMode.SimpleWithMenu">
            <summary>
            The component displays inline filtering UI and filters as you type combined with filter operator menu.
            </summary>
        </member>
        <member name="F:Radzen.FilterMode.Advanced">
            <summary>
            The component displays a popup filtering UI and allows you to pick filtering operator and or filter by multiple values.
            </summary>
        </member>
        <member name="F:Radzen.FilterMode.CheckBoxList">
            <summary>
            The component displays a popup filtering UI and allows you to pick multiple values from list of all values.
            </summary>
        </member>
        <member name="T:Radzen.FilterCaseSensitivity">
            <summary>
            Specifies the filter case sensitivity of a component.
            </summary>
        </member>
        <member name="F:Radzen.FilterCaseSensitivity.Default">
            <summary>
            Relies on the underlying provider (LINQ to Objects, Entity Framework etc.) to handle case sensitivity. LINQ to Objects is case sensitive. Entity Framework relies on the database collection settings.
            </summary>
        </member>
        <member name="F:Radzen.FilterCaseSensitivity.CaseInsensitive">
            <summary>
            Filters are case insensitive regardless of the underlying provider.
            </summary>
        </member>
        <member name="T:Radzen.LogicalFilterOperator">
            <summary>
            Specifies the logical operator between filters.
            </summary>
        </member>
        <member name="F:Radzen.LogicalFilterOperator.And">
            <summary>
            All filters should be satisfied.
            </summary>
        </member>
        <member name="F:Radzen.LogicalFilterOperator.Or">
            <summary>
            Any filter should be satisfied.
            </summary>
        </member>
        <member name="T:Radzen.StringFilterOperator">
            <summary>
            Specifies the string comparison operator of a filter.
            </summary>
        </member>
        <member name="F:Radzen.StringFilterOperator.Contains">
            <summary>
            Satisfied if a string contains the specified value.
            </summary>
        </member>
        <member name="F:Radzen.StringFilterOperator.StartsWith">
            <summary>
            Satisfied if a string starts with the specified value.
            </summary>
        </member>
        <member name="F:Radzen.StringFilterOperator.EndsWith">
            <summary>
            Satisfied if a string ends with with the specified value.
            </summary>
        </member>
        <member name="T:Radzen.FilterOperator">
            <summary>
            Specifies the comparison operator of a filter.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.Equals">
            <summary>
            Satisfied if the current value equals the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.NotEquals">
            <summary>
            Satisfied if the current value does not equal the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.LessThan">
            <summary>
            Satisfied if the current value is less than the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.LessThanOrEquals">
            <summary>
            Satisfied if the current value is less than or equal to the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.GreaterThan">
            <summary>
            Satisfied if the current value is greater than the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.GreaterThanOrEquals">
            <summary>
            Satisfied if the current value is greater than or equal to the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.Contains">
            <summary>
            Satisfied if the current value contains the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.StartsWith">
            <summary>
            Satisfied if the current value starts with the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.EndsWith">
            <summary>
            Satisfied if the current value ends with the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.DoesNotContain">
            <summary>
            Satisfied if the current value does not contain the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.In">
            <summary>
            Satisfied if the current value is in the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.NotIn">
            <summary>
            Satisfied if the current value is not in the specified value.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.IsNull">
            <summary>
            Satisfied if the current value is null.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.IsEmpty">
            <summary>
            Satisfied if the current value is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.IsNotNull">
            <summary>
            Satisfied if the current value is not null.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.IsNotEmpty">
            <summary>
            Satisfied if the current value is not <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="F:Radzen.FilterOperator.Custom">
            <summary>
            Custom operator if not need to generate the filter.
            </summary>
        </member>
        <member name="T:Radzen.TextAlign">
            <summary>
            Specifies text alignment. Usually rendered as CSS <c>text-align</c> attribute.
            </summary>
        </member>
        <member name="F:Radzen.TextAlign.Left">
            <summary>
            The text is aligned to the left side of its container.
            </summary>
        </member>
        <member name="F:Radzen.TextAlign.Right">
            <summary>
            The text is aligned to the right side of its container.
            </summary>
        </member>
        <member name="F:Radzen.TextAlign.Center">
            <summary>
            The text is centered in its container.
            </summary>
        </member>
        <member name="F:Radzen.TextAlign.Justify">
            <summary>The text is justified.</summary>
        </member>
        <member name="F:Radzen.TextAlign.JustifyAll">
            <summary>Same as justify, but also forces the last line to be justified.</summary>
        </member>
        <member name="F:Radzen.TextAlign.Start">
            <summary>The same as left if direction is left-to-right and right if direction is right-to-left..</summary>
        </member>
        <member name="F:Radzen.TextAlign.End">
            <summary>The same as right if direction is left-to-right and left if direction is right-to-left..</summary>
        </member>
        <member name="T:Radzen.HorizontalAlign">
            <summary>
            Specifies horizontal alignment.
            </summary>
        </member>
        <member name="F:Radzen.HorizontalAlign.Left">
            <summary>
            Left horizontal alignment.
            </summary>
        </member>
        <member name="F:Radzen.HorizontalAlign.Right">
            <summary>
            Right horizontal alignment.
            </summary>
        </member>
        <member name="F:Radzen.HorizontalAlign.Center">
            <summary>
            Center horizontal alignment.
            </summary>
        </member>
        <member name="F:Radzen.HorizontalAlign.Justify">
            <summary>
            Justify horizontal alignment.
            </summary>
        </member>
        <member name="T:Radzen.BadgeStyle">
            <summary>
            Specifies the display style of a <see cref="T:Radzen.Blazor.RadzenBadge" />. Affects the visual styling of RadzenBadge (background and text color).
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Primary">
            <summary>
            Primary styling. Similar to primary buttons.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Secondary">
            <summary>
            Secondary styling. Similar to secondary buttons.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Light">
            <summary>
            Light styling. Similar to light buttons.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Base">
            <summary>
            Base styling. Similar to base buttons.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Dark">
            <summary>
            Dark styling. Similar to dark buttons.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Success">
            <summary>
            Success styling.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Danger">
            <summary>
            Danger styling.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Warning">
            <summary>
            Warning styling.
            </summary>
        </member>
        <member name="F:Radzen.BadgeStyle.Info">
            <summary>
            Informative styling.
            </summary>
        </member>
        <member name="T:Radzen.IconStyle">
            <summary>
            Specifies the display style of a <see cref="T:Radzen.Blazor.RadzenIcon" />. Affects the visual styling of RadzenIcon (Icon (text) color).
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Primary">
            <summary>
            Primary styling. Similar to primary buttons.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Secondary">
            <summary>
            Secondary styling. Similar to secondary buttons.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Light">
            <summary>
            Light styling. Similar to light buttons.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Base">
            <summary>
            Base styling. Similar to base buttons.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Dark">
            <summary>
            Dark styling. Similar to dark buttons.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Success">
            <summary>
            Success styling.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Danger">
            <summary>
            Danger styling.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Warning">
            <summary>
            Warning styling.
            </summary>
        </member>
        <member name="F:Radzen.IconStyle.Info">
            <summary>
            Informative styling.
            </summary>
        </member>
        <member name="T:Radzen.DataGridPickedColumnsChangedEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.PickedColumnsChanged" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridPickedColumnsChangedEventArgs`1.Columns">
            <summary>
            Gets the picked columns.
            </summary>
        </member>
        <member name="T:Radzen.DataGridColumnSortEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.Sort" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridColumnSortEventArgs`1.Column">
            <summary>
            Gets the sorted RadzenDataGridColumn.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnSortEventArgs`1.SortOrder">
            <summary>
            Gets the new sort order of the sorted column.
            </summary>
        </member>
        <member name="T:Radzen.DataGridColumnGroupEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.Group" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridColumnGroupEventArgs`1.Column">
            <summary>
            Gets the sorted RadzenDataGridColumn.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnGroupEventArgs`1.GroupDescriptor">
            <summary>
            Gets the new sort order of the sorted column.
            </summary>
        </member>
        <member name="T:Radzen.DataGridColumnFilterEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.Filter" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridColumnFilterEventArgs`1.Column">
            <summary>
            Gets the filtered RadzenDataGridColumn.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnFilterEventArgs`1.FilterValue">
            <summary>
            Gets the new filter value of the filtered column.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnFilterEventArgs`1.SecondFilterValue">
            <summary>
            Gets the new second filter value of the filtered column.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnFilterEventArgs`1.FilterOperator">
            <summary>
            Gets the new filter operator of the filtered column.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnFilterEventArgs`1.SecondFilterOperator">
            <summary>
            Gets the new second filter operator of the filtered column.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnFilterEventArgs`1.LogicalFilterOperator">
            <summary>
            Gets the new logical filter operator of the filtered column.
            </summary>
        </member>
        <member name="T:Radzen.DataGridColumnResizedEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.ColumnResized" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridColumnResizedEventArgs`1.Column">
            <summary>
            Gets the resized RadzenDataGridColumn.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnResizedEventArgs`1.Width">
            <summary>
            Gets the new width of the resized column.
            </summary>
        </member>
        <member name="T:Radzen.DataGridColumnReorderingEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.ColumnReordering" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridColumnReorderingEventArgs`1.Column">
            <summary>
            Gets the reordered RadzenDataGridColumn.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnReorderingEventArgs`1.ToColumn">
            <summary>
            Gets the reordered to RadzenDataGridColumn.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnReorderingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value which will cancel the event.
            </summary>
            <value><c>true</c> to cancel the event; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.DataGridColumnReorderedEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.ColumnReordered" /> event that is being raised.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DataGridColumnReorderedEventArgs`1.Column">
            <summary>
            Gets the reordered RadzenDataGridColumn.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnReorderedEventArgs`1.OldIndex">
            <summary>
            Gets the old index of the column.
            </summary>
        </member>
        <member name="P:Radzen.DataGridColumnReorderedEventArgs`1.NewIndex">
            <summary>
            Gets the new index of the column.
            </summary>
        </member>
        <member name="T:Radzen.FilterDescriptor">
            <summary>
            Represents a filter in a component that supports filtering.
            </summary>
        </member>
        <member name="P:Radzen.FilterDescriptor.Property">
            <summary>
            Gets or sets the name of the filtered property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Radzen.FilterDescriptor.Type">
            <summary>
            Gets or sets the property type.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="P:Radzen.FilterDescriptor.FilterProperty">
            <summary>
            Gets or sets the name of the filtered property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Radzen.FilterDescriptor.FilterValue">
            <summary>
            Gets or sets the value to filter by.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Radzen.FilterDescriptor.FilterOperator">
            <summary>
            Gets or sets the operator which will compare the property value with <see cref="P:Radzen.FilterDescriptor.FilterValue" />.
            </summary>
            <value>The filter operator.</value>
        </member>
        <member name="P:Radzen.FilterDescriptor.SecondFilterValue">
            <summary>
            Gets or sets a second value to filter by.
            </summary>
            <value>The second filter value.</value>
        </member>
        <member name="P:Radzen.FilterDescriptor.SecondFilterOperator">
            <summary>
            Gets or sets the operator which will compare the property value with <see cref="P:Radzen.FilterDescriptor.SecondFilterValue" />.
            </summary>
            <value>The second filter operator.</value>
        </member>
        <member name="P:Radzen.FilterDescriptor.LogicalFilterOperator">
            <summary>
            Gets or sets the logic used to combine the outcome of filtering by <see cref="P:Radzen.FilterDescriptor.FilterValue" /> and <see cref="P:Radzen.FilterDescriptor.SecondFilterValue" />.
            </summary>
            <value>The logical filter operator.</value>
        </member>
        <member name="T:Radzen.CompositeFilterDescriptor">
            <summary>
            Represents a filter in a component that supports filtering.
            </summary>
        </member>
        <member name="P:Radzen.CompositeFilterDescriptor.Property">
            <summary>
            Gets or sets the name of the filtered property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Radzen.CompositeFilterDescriptor.Type">
            <summary>
            Gets or sets the property type.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="P:Radzen.CompositeFilterDescriptor.FilterProperty">
            <summary>
            Gets or sets the name of the filtered property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Radzen.CompositeFilterDescriptor.FilterValue">
            <summary>
            Gets or sets the value to filter by.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Radzen.CompositeFilterDescriptor.FilterOperator">
            <summary>
            Gets or sets the operator which will compare the property value with <see cref="P:Radzen.CompositeFilterDescriptor.FilterValue" />.
            </summary>
            <value>The filter operator.</value>
        </member>
        <member name="P:Radzen.CompositeFilterDescriptor.LogicalFilterOperator">
            <summary>
            Gets or sets the logic used to combine the outcome of filtering by <see cref="P:Radzen.CompositeFilterDescriptor.FilterValue" />.
            </summary>
            <value>The logical filter operator.</value>
        </member>
        <member name="P:Radzen.CompositeFilterDescriptor.Filters">
            <summary>
            Gets or sets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Radzen.SortDescriptor">
            <summary>
            Represents a sorting description. Used in components that support sorting.
            </summary>
        </member>
        <member name="P:Radzen.SortDescriptor.Property">
            <summary>
            Gets or sets the property to sort by.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Radzen.SortDescriptor.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="T:Radzen.GroupDescriptor">
            <summary>
            Represents a grouping description. Used in components that support grouping.
            </summary>
        </member>
        <member name="P:Radzen.GroupDescriptor.Property">
            <summary>
            Gets or sets the property to group by.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Radzen.GroupDescriptor.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Radzen.GroupDescriptor.Title">
            <summary>
            Gets or sets the title displayed in the group.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.GroupDescriptor.FormatString">
            <summary>
            Gets or sets the format string used to display the key in the group.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="M:Radzen.GroupDescriptor.GetTitle">
            <summary>
            Gets the title of the group.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.Group">
            <summary>
            Represents a group of data.
            </summary>
        </member>
        <member name="P:Radzen.Group.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.Group.GroupDescriptor">
            <summary>
            Gets or sets the group descriptor.
            </summary>
            <value>The group descriptor.</value>
        </member>
        <member name="P:Radzen.Group.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="T:Radzen.GroupResult">
            <summary>
            The result of a call to a <see cref="T:Radzen.QueryableExtension"/>.GroupByMany() overload.
            </summary>
        </member>
        <member name="P:Radzen.GroupResult.Key">
            <summary>
            The key value of the group.
            </summary>
        </member>
        <member name="P:Radzen.GroupResult.Count">
            <summary>
            The number of resulting elements in the group.
            </summary>
        </member>
        <member name="P:Radzen.GroupResult.Items">
            <summary>
            The resulting elements in the group.
            </summary>
        </member>
        <member name="P:Radzen.GroupResult.Subgroups">
            <summary>
            The resulting subgroups in the group.
            </summary>
        </member>
        <member name="M:Radzen.GroupResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> showing the key of the group and the number of items in the group.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Radzen.LoadDataArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.PagedDataBoundComponent`1.LoadData" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.LoadDataArgs.Skip">
            <summary>
            Gets how many items to skip. Related to paging and the current page. Usually used with the <see cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> LINQ method.
            </summary>
        </member>
        <member name="P:Radzen.LoadDataArgs.Top">
            <summary>
            Gets how many items to take. Related to paging and the current page size. Usually used with the <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> LINQ method.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Radzen.LoadDataArgs.OrderBy">
            <summary>
            Gets the sort expression as a string.
            </summary>
        </member>
        <member name="P:Radzen.LoadDataArgs.Filter">
            <summary>
            Gets the filter expression as a string.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Radzen.LoadDataArgs.Filters">
            <summary>
            Gets the filter expression as a collection of filter descriptors.
            </summary>
        </member>
        <member name="P:Radzen.LoadDataArgs.Sorts">
            <summary>
            Gets the sort expression as a collection of sort descriptors.
            </summary>
            <value>The sorts.</value>
        </member>
        <member name="T:Radzen.DataGridLoadChildDataEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.LoadChildData" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.DataGridLoadChildDataEventArgs`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.DataGridLoadChildDataEventArgs`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Radzen.DataGridLoadColumnFilterDataEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenDataGrid`1.LoadColumnFilterData" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.DataGridLoadColumnFilterDataEventArgs`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.DataGridLoadColumnFilterDataEventArgs`1.Count">
            <summary>
            Gets or sets the total data count.
            </summary>
            <value>The total data count.</value>
        </member>
        <member name="P:Radzen.DataGridLoadColumnFilterDataEventArgs`1.Skip">
            <summary>
            Gets how many items to skip. Related to paging and the current page. Usually used with the <see cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> LINQ method.
            </summary>
        </member>
        <member name="P:Radzen.DataGridLoadColumnFilterDataEventArgs`1.Top">
            <summary>
            Gets how many items to take. Related to paging and the current page size. Usually used with the <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> LINQ method.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Radzen.DataGridLoadColumnFilterDataEventArgs`1.Filter">
            <summary>
            Gets the filter expression as a string.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Radzen.DataGridLoadColumnFilterDataEventArgs`1.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="T:Radzen.PagerEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenPager.PageChanged" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.PagerEventArgs.Skip">
            <summary>
            Gets how many items to skip.
            </summary>
        </member>
        <member name="P:Radzen.PagerEventArgs.Top">
            <summary>
            Gets how many items to take.
            </summary>
        </member>
        <member name="P:Radzen.PagerEventArgs.PageIndex">
            <summary>
            Gets the current zero-based page index
            </summary>
        </member>
        <member name="T:Radzen.HtmlEditorCommands">
            <summary>
            Contains the commands which <see cref="T:Radzen.Blazor.RadzenHtmlEditor" /> supports.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.InsertHtml">
            <summary>
            Inserts html at cursor location.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.AlignCenter">
            <summary>
            Centers the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.AlignLeft">
            <summary>
            Aligns the selected text to the left.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.AlignRight">
            <summary>
            Aligns the selected text to the right.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Background">
            <summary>
            Sets the background color of the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Bold">
            <summary>
            Bolds the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Color">
            <summary>
            Sets the text color of the selection.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.FontName">
            <summary>
            Sets the font of the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.FontSize">
            <summary>
            Sets the font size of the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.FormatBlock">
            <summary>
            Formats the selection as paragraph, heading etc.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Indent">
            <summary>
            Indents the selection.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Italic">
            <summary>
            Makes the selected text italic.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Justify">
            <summary>
            Justifies the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.OrderedList">
            <summary>
            Inserts an empty ordered list or makes an ordered list from the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Outdent">
            <summary>
            Outdents the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Redo">
            <summary>
            Repeats the last edit operations.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.RemoveFormat">
            <summary>
            Removes visual formatting from the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.StrikeThrough">
            <summary>
            Strikes through the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Subscript">
            <summary>
            Applies subscript styling to the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Superscript">
            <summary>
            Applies superscript styling to the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Underline">
            <summary>
            Underlines the selected text.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Undo">
            <summary>
            Undoes the last edit operation.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.Unlink">
            <summary>
            Unlinks a link.
            </summary>
        </member>
        <member name="F:Radzen.HtmlEditorCommands.UnorderedList">
            <summary>
            Inserts an empty unordered list or makes an unordered list from the selected text.
            </summary>
        </member>
        <member name="T:Radzen.HtmlEditorPasteEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenHtmlEditor.Paste" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.HtmlEditorPasteEventArgs.Html">
            <summary>
            Gets or sets the HTML content that is pasted in RadzenHtmlEditor. Use the setter to filter unwanted markup from the pasted value.
            </summary>
            <value>The HTML.</value>
        </member>
        <member name="T:Radzen.SeriesPoint">
            <summary>
            Represents a data item in a <see cref="T:Radzen.Blazor.RadzenChart" />.
            </summary>
        </member>
        <member name="P:Radzen.SeriesPoint.Category">
            <summary>
            Gets the category axis value.
            </summary>
        </member>
        <member name="P:Radzen.SeriesPoint.Value">
            <summary>
            Gets the value axis value.
            </summary>
        </member>
        <member name="T:Radzen.SeriesClickEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenChart.SeriesClick" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SeriesClickEventArgs.Data">
            <summary>
            Gets the data at the clicked location.
            </summary>
        </member>
        <member name="P:Radzen.SeriesClickEventArgs.Value">
            <summary>
            Gets the value of the clicked location. Determined by <see cref="P:Radzen.Blazor.CartesianSeries`1.ValueProperty" />.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.SeriesClickEventArgs.Category">
            <summary>
            Gets the category of the clicked location. Determined by <see cref="P:Radzen.Blazor.CartesianSeries`1.CategoryProperty" />.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Radzen.SeriesClickEventArgs.Title">
            <summary>
            Gets the title of the clicked series. Determined by <see cref="P:Radzen.Blazor.CartesianSeries`1.Title" />.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.SeriesClickEventArgs.Point">
            <summary>
            Gets the clicked point in axis coordinates.
            </summary>
        </member>
        <member name="T:Radzen.LegendClickEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenChart.LegendClick" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.LegendClickEventArgs.Data">
            <summary>
            Gets the data at the clicked location.
            </summary>
        </member>
        <member name="P:Radzen.LegendClickEventArgs.Title">
            <summary>
            Gets the title of the clicked series. Determined by <see cref="P:Radzen.Blazor.CartesianSeries`1.Title" />.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.LegendClickEventArgs.IsVisible">
            <summary>
            Gets the visibility of the clicked legend. Determined by <see cref="P:Radzen.Blazor.CartesianSeries`1.IsVisible" />. Always visible for Pie Charts.
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="T:Radzen.HtmlEditorExecuteEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenHtmlEditor.Execute" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.HtmlEditorExecuteEventArgs.Editor">
            <summary>
            Gets the RadzenHtmlEditor instance which raised the event.
            </summary>
        </member>
        <member name="P:Radzen.HtmlEditorExecuteEventArgs.CommandName">
            <summary>
            Gets the name of the command which RadzenHtmlEditor is executing.
            </summary>
        </member>
        <member name="T:Radzen.TreeEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenTree.Change" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.TreeEventArgs.Text">
            <summary>
            Gets the <see cref="P:Radzen.Blazor.RadzenTreeItem.Text" /> the selected RadzenTreeItem.
            </summary>
        </member>
        <member name="P:Radzen.TreeEventArgs.Value">
            <summary>
            Gets the <see cref="P:Radzen.Blazor.RadzenTreeItem.Value" /> the selected RadzenTreeItem.
            </summary>
        </member>
        <member name="T:Radzen.TreeExpandEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenTree.Expand" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.TreeExpandEventArgs.Value">
            <summary>
            Gets the <see cref="P:Radzen.Blazor.RadzenTreeItem.Text" /> the expanded RadzenTreeItem.
            </summary>
        </member>
        <member name="P:Radzen.TreeExpandEventArgs.Text">
            <summary>
            Gets the <see cref="P:Radzen.Blazor.RadzenTreeItem.Value" /> the expanded RadzenTreeItem.
            </summary>
        </member>
        <member name="P:Radzen.TreeExpandEventArgs.Children">
            <summary>
            Gets or sets the children of the expanded RadzenTreeItem.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Radzen.TreeItemSettings">
            <summary>
            The configuration used by a <see cref="T:Radzen.Blazor.RadzenTreeItem" /> to create child items.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.Data">
            <summary>
            Gets or sets the data from which child items will be created. The parent node enumerates the data and creates a new RadzenTreeItem for every item.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.Text">
            <summary>
            Gets or sets the function which returns a value for the <see cref="P:Radzen.Blazor.RadzenTreeItem.Text" /> of a child item.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.Checkable">
            <summary>
            Gets or sets the function which returns a value for the <see cref="P:Radzen.Blazor.RadzenTreeItem.Checkable" /> of a child item.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.TextProperty">
            <summary>
            Gets or sets the name of the property which provides the value for the <see cref="P:Radzen.Blazor.RadzenTreeItem.Text" /> of a child item.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.CheckableProperty">
            <summary>
            Gets or sets the name of the property which provides the value for the <see cref="P:Radzen.Blazor.RadzenTreeItem.Checkable" /> of a child item.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.HasChildren">
            <summary>
            Gets or sets a function which returns whether a child item has children of its own. Called with an item from <see cref="P:Radzen.TreeItemSettings.Data" />.
            By default all items are considered to have children.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.Expanded">
            <summary>
            Gets or sets a function which determines whether a child item is expanded. Called with an item from <see cref="P:Radzen.TreeItemSettings.Data" />.
            By default all items are collapsed.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.Selected">
            <summary>
            Gets or sets a function which determines whether a child item is selected. Called with an item from <see cref="P:Radzen.TreeItemSettings.Data" />.
            By default all items are not selected.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemSettings.Template">
            <summary>
            Gets or sets the <see cref="P:Radzen.Blazor.RadzenTreeItem.Template" /> of a child item.
            </summary>
            <value>The template.</value>
        </member>
        <member name="T:Radzen.TreeItemRenderEventArgs">
            <summary>
            Supplies information about a <see cref="T:Radzen.Blazor.RadzenTree" /> item render event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemRenderEventArgs.Attributes">
            <summary>
            Gets or sets the item HTML attributes.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemRenderEventArgs.Checked">
            <summary>
            Gets or sets a value indicating whether this item is checked.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.TreeItemRenderEventArgs.Value">
            <summary>
            Gets tree item.
            </summary>
        </member>
        <member name="P:Radzen.TreeItemRenderEventArgs.Data">
            <summary>
            Gets child items.
            </summary>
        </member>
        <member name="T:Radzen.LoginArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenLogin.Login" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.LoginArgs.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Radzen.LoginArgs.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Radzen.LoginArgs.RememberMe">
            <summary> Gets or sets a value indicating whether the user wants to remember their credentials. </summary>
        </member>
        <member name="T:Radzen.ConvertType">
            <summary>
            Converts values to different types. Used internally.
            </summary>
        </member>
        <member name="M:Radzen.ConvertType.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Changes the type of an object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="culture">The culture.</param>
            <returns>System.Object</returns>
        </member>
        <member name="T:Radzen.PropertyAccess">
            <summary>
            Utility class that provides property access based on strings.
            </summary>
        </member>
        <member name="M:Radzen.PropertyAccess.Getter``2(System.String,System.Type)">
            <summary>
            Creates a function that will return the specified property.
            </summary>
            <typeparam name="TItem">The owner type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="propertyName">Name of the property to return.</param>
            <param name="type">Type of the object.</param>
            <returns>A function which return the specified property by its name.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.IsDate(System.Type)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.DateTime" />.
            </summary>
            <param name="source">The source.</param>
            <returns><c>true</c> if the specified type is a DateTime instance or nullable DateTime; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.IsDateOnly(System.Type)">
            <summary>
            Determines whether the specified type is a DateOnly.
            </summary>
            <param name="source">The source.</param>
            <returns><c>true</c> if the specified type is a DateOnly instance or nullable DateOnly; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.DateOnlyFromDateTime(System.DateTime)">
            <summary>
            Determines whether the specified type is a DateOnly.
            </summary>
            <param name="source">The source.</param>
            <returns><c>true</c> if the specified type is a DateOnly instance or nullable DateOnly; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.GetElementType(System.Type)">
            <summary>
            Gets the type of the element of a collection time.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the collection element.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.GetProperty(System.String)">
            <summary>
            Converts the property to a value that can be used by Dynamic LINQ.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Radzen.PropertyAccess.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of the specified expression via reflection.
            </summary>
            <param name="value">The value.</param>
            <param name="path">The path.</param>
            <returns>The value of the specified expression or <paramref name="value"/> if not found.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.Getter``1(System.Object,System.String)">
            <summary>
            Creates a function that returns the specified property.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="data">The value.</param>
            <param name="propertyName">The name of the property to return.</param>
            <returns>A function that returns the specified property.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.TryGetItemOrValueFromProperty``1(System.Object,System.String,``0@)">
            <summary>
            Tries to get a property by its name.
            </summary>
            <typeparam name="T">The target type</typeparam>
            <param name="item">The item.</param>
            <param name="property">The property.</param>
            <param name="result">The property value.</param>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.GetItemOrValueFromProperty(System.Object,System.String)">
            <summary>
            Gets the item or value from property.
            </summary>
            <param name="item">The item.</param>
            <param name="property">The property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric.
            </summary>
            <param name="source">The type.</param>
            <returns><c>true</c> if the specified source is numeric; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type is an enum.
            </summary>
            <param name="source">The type.</param>
            <returns><c>true</c> if the specified source is an enum; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.IsNullableEnum(System.Type)">
            <summary>
            Determines whether the specified type is a Nullable enum.
            </summary>
            <param name="source">The type.</param>
            <returns><c>true</c> if the specified source is an enum; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.IsAnonymous(System.Type)">
            <summary>
            Determines whether the specified type is anonymous.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is anonymous; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Method to only replace first occurence of a substring in a string
            </summary>
            <param name="text"></param>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:Radzen.PropertyAccess.GetPropertyType(System.Type,System.String)">
            <summary>
            Gets the type of the property.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Radzen.PropertyAccess.GetDynamicPropertyExpression(System.String,System.Type)">
            <summary>
            Gets the dynamic property expression when binding to IDictionary.
            </summary>
            <param name="name">The property name.</param>
            <param name="type">The property type.</param>
            <returns>Dynamic property expression.</returns>
        </member>
        <member name="T:Radzen.IRadzenForm">
            <summary>
            Represents the common <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" /> API used by
            its items. Injected as a cascading property in <see cref="T:Radzen.IRadzenFormComponent" />.
            </summary>
        </member>
        <member name="M:Radzen.IRadzenForm.AddComponent(Radzen.IRadzenFormComponent)">
            <summary>
            Adds the specified component to the form.
            </summary>
            <param name="component">The component to add to the form.</param>
        </member>
        <member name="M:Radzen.IRadzenForm.RemoveComponent(Radzen.IRadzenFormComponent)">
            <summary>
            Removes the component from the form.
            </summary>
            <param name="component">The component to remove from the form.</param>
        </member>
        <member name="M:Radzen.IRadzenForm.FindComponent(System.String)">
            <summary>
            Finds a form component by its name.
            </summary>
            <param name="name">The name.</param>
            <returns>The component whose <see cref="P:Radzen.IRadzenFormComponent.Name" /> equals to <paramref name="name" />; <c>null</c> if such a component is not found.</returns>
        </member>
        <member name="T:Radzen.IRadzenFormComponent">
            <summary>
            Specifies the interface that form components must implement in order to be supported by <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />.
            </summary>
        </member>
        <member name="P:Radzen.IRadzenFormComponent.IsBound">
            <summary>
            Gets a value indicating whether this component is bound.
            </summary>
            <value><c>true</c> if this component is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.IRadzenFormComponent.HasValue">
            <summary>
            Gets a value indicating whether the component has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.IRadzenFormComponent.GetValue">
            <summary>
            Gets the value of the component.
            </summary>
            <returns>the value of the component - for example the text of RadzenTextBox.</returns>
        </member>
        <member name="P:Radzen.IRadzenFormComponent.Name">
            <summary>
            Gets or sets the name of the component.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Radzen.IRadzenFormComponent.FieldIdentifier">
            <summary>
            Gets the field identifier.
            </summary>
            <value>The field identifier.</value>
        </member>
        <member name="M:Radzen.IRadzenFormComponent.FocusAsync">
            <summary>
            Sets the focus.
            </summary>
        </member>
        <member name="P:Radzen.IRadzenFormComponent.Disabled">
            <summary>
            Sets the Disabled state of the component
            </summary>
        </member>
        <member name="P:Radzen.IRadzenFormComponent.Visible">
            <summary>
            Sets the Visible state of the component
            </summary>
        </member>
        <member name="P:Radzen.IRadzenFormComponent.FormFieldContext">
            <summary>
            Sets the FormFieldContext of the component
            </summary>
        </member>
        <member name="T:Radzen.FormInvalidSubmitEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenTemplateForm`1.InvalidSubmit" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.FormInvalidSubmitEventArgs.Errors">
            <summary>
            Gets the validation errors.
            </summary>
        </member>
        <member name="T:Radzen.IRadzenFormValidator">
            <summary>
            The interface that a validator component must implement in order to be supported by <see cref="T:Radzen.Blazor.RadzenTemplateForm`1" />.
            </summary>
        </member>
        <member name="P:Radzen.IRadzenFormValidator.IsValid">
            <summary>
            Returns true if valid.
            </summary>
            <value><c>true</c> if the validator is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.IRadzenFormValidator.Component">
            <summary>
            Gets or sets the name of the component which is validated.
            </summary>
            <value>The component name.</value>
        </member>
        <member name="P:Radzen.IRadzenFormValidator.Text">
            <summary>
            Gets or sets the validation error displayed when invalid.
            </summary>
            <value>The text to display when invalid.</value>
        </member>
        <member name="T:Radzen.RadzenComponentWithChildren">
            <summary>
            A base class of components that have child content.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponentWithChildren.ChildContent">
            <summary>
            Gets or sets the child content
            </summary>
            <value>The content of the child.</value>
        </member>
        <member name="T:Radzen.RadzenFlexComponent">
            <summary>
            A base class of row/col components.
            </summary>
        </member>
        <member name="P:Radzen.RadzenFlexComponent.JustifyContent">
            <summary>
            Gets or sets the content justify.
            </summary>
            <value>The content justify.</value>
        </member>
        <member name="P:Radzen.RadzenFlexComponent.AlignItems">
            <summary>
            Gets or sets the items alignment.
            </summary>
            <value>The items alignment.</value>
        </member>
        <member name="T:Radzen.ParameterViewExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.AspNetCore.Components.ParameterView" />.
            </summary>
        </member>
        <member name="M:Radzen.ParameterViewExtensions.DidParameterChange``1(Microsoft.AspNetCore.Components.ParameterView,System.String,``0)">
            <summary>
            Checks if a parameter changed.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="parameters">The parameters.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns><c>true</c> if the parameter value has changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Radzen.RadzenSplitterEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenSplitter.Expand" /> or <see cref="P:Radzen.Blazor.RadzenSplitter.Collapse" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.RadzenSplitterEventArgs.PaneIndex">
            <summary>
            Gets the index of the pane.
            </summary>
        </member>
        <member name="P:Radzen.RadzenSplitterEventArgs.Pane">
            <summary>
            Gets the pane which the event applies to.
            </summary>
            <value>The pane.</value>
        </member>
        <member name="P:Radzen.RadzenSplitterEventArgs.Cancel">
            <summary>
            Gets or sets a value which will cancel the event.
            </summary>
            <value><c>true</c> to cancel the event; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.RadzenSplitterResizeEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenSplitter.Resize" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.RadzenSplitterResizeEventArgs.NewSize">
            <summary>
            The new size of the pane
            </summary>
        </member>
        <member name="T:Radzen.MD5">
            <inheritdoc />
        </member>
        <member name="M:Radzen.MD5.leftRotate(System.UInt32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Radzen.MD5.Calculate(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:Radzen.CoordinateSystem">
            <summary>
            CoordinateSystem enum
            </summary>
        </member>
        <member name="F:Radzen.CoordinateSystem.Cartesian">
            <summary>
            Cartesian CoordinateSystem
            </summary>
        </member>
        <member name="F:Radzen.CoordinateSystem.Polar">
            <summary>
            Cartesian CoordinateSystem
            </summary>
        </member>
        <member name="T:Radzen.MenuItemDisplayStyle">
            <summary>
            Menu Item display style enum
            </summary>
        </member>
        <member name="F:Radzen.MenuItemDisplayStyle.Text">
            <summary>
            Show text only
            </summary>
        </member>
        <member name="F:Radzen.MenuItemDisplayStyle.Icon">
            <summary>
            Show only icons
            </summary>
        </member>
        <member name="F:Radzen.MenuItemDisplayStyle.IconAndText">
            <summary>
            Both icons and text are displayed
            </summary>
        </member>
        <member name="T:Radzen.FrozenColumnPosition">
            <summary>
            Frozen Column Position enum
            </summary>
        </member>
        <member name="F:Radzen.FrozenColumnPosition.Left">
            <summary>
            Freeze column to the left
            </summary>
        </member>
        <member name="F:Radzen.FrozenColumnPosition.Right">
            <summary>
            Freeze column to the right
            </summary>
        </member>
        <member name="T:Radzen.ContextMenuService">
            <summary>
            Class ContextMenuService. Contains various methods with options to open and close context menus. 
            Should be added as scoped service in the application services and RadzenContextMenu should be added in application main layout.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
            <example>
            <code>
            @inject ContextMenuService ContextMenuService
            &lt;RadzenButton Text="Show context menu" ContextMenu=@(args => ShowContextMenuWithContent(args)) /&gt;
            @code {
                void ShowContextMenuWithContent(MouseEventArgs args) =&gt; ContextMenuService.Open(args, ds =&gt;
                  @&lt;RadzenMenu Click="OnMenuItemClick"&gt;
                    &lt;RadzenMenuItem Text="Item1" Value="1"&gt;&lt;/RadzenMenuItem&gt;
                    &lt;RadzenMenuItem Text="Item2" Value="2"&gt;&lt;/RadzenMenuItem&gt;
                    &lt;RadzenMenuItem Text="More items" Value="3"&gt;
                        &lt;RadzenMenuItem Text="More sub items" Value="4"&gt;
                            &lt;RadzenMenuItem Text="Item1" Value="5"&gt;&lt;/RadzenMenuItem&gt;
                            &lt;RadzenMenuItem Text="Item2" Value="6"&gt;&lt;/RadzenMenuItem&gt;
                        &lt;/RadzenMenuItem&gt;
                    &lt;/RadzenMenuItem&gt;
                  &lt;/RadzenMenu&gt;);
            
                void OnMenuItemClick(MenuItemEventArgs args)
                {
                  Console.WriteLine($"Menu item with Value={args.Value} clicked");
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.ContextMenuService.navigationManager">
            <summary>
            Gets or sets the navigation manager.
            </summary>
            <value>The navigation manager.</value>
        </member>
        <member name="M:Radzen.ContextMenuService.#ctor(Microsoft.AspNetCore.Components.NavigationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.ContextMenuService"/> class.
            </summary>
            <param name="uriHelper">The URI helper.</param>
        </member>
        <member name="M:Radzen.ContextMenuService.UriHelper_OnLocationChanged(System.Object,Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs)">
            <summary>
            Handles the OnLocationChanged event of the UriHelper control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Radzen.ContextMenuService.OnNavigate">
            <summary>
            Occurs when [on navigate].
            </summary>
        </member>
        <member name="E:Radzen.ContextMenuService.OnClose">
            <summary>
            Raises the Close event.
            </summary>
        </member>
        <member name="E:Radzen.ContextMenuService.OnOpen">
            <summary>
            Occurs when [on open].
            </summary>
        </member>
        <member name="M:Radzen.ContextMenuService.Open(Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Collections.Generic.IEnumerable{Radzen.ContextMenuItem},System.Action{Radzen.MenuItemEventArgs})">
            <summary>
            Opens the specified arguments.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
            <param name="items">The items.</param>
            <param name="click">The click.</param>
        </member>
        <member name="M:Radzen.ContextMenuService.Open(Microsoft.AspNetCore.Components.Web.MouseEventArgs,Microsoft.AspNetCore.Components.RenderFragment{Radzen.ContextMenuService})">
            <summary>
            Opens the specified arguments.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
            <param name="childContent">Content of the child.</param>
        </member>
        <member name="M:Radzen.ContextMenuService.OpenTooltip(Microsoft.AspNetCore.Components.Web.MouseEventArgs,Radzen.ContextMenuOptions)">
            <summary>
            Opens the tooltip.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Radzen.ContextMenuService.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Radzen.ContextMenuService.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Radzen.ContextMenuOptions">
            <summary>
            Class ContextMenuOptions.
            </summary>
        </member>
        <member name="P:Radzen.ContextMenuOptions.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.ContextMenuOptions.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Radzen.ContextMenuOptions.Click">
            <summary>
            Gets or sets the click.
            </summary>
            <value>The click.</value>
        </member>
        <member name="T:Radzen.ContextMenu">
            <summary>
            Class ContextMenu.
            </summary>
        </member>
        <member name="P:Radzen.ContextMenu.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:Radzen.ContextMenu.MouseEventArgs">
            <summary>
            Gets or sets the mouse event arguments.
            </summary>
            <value>The mouse event arguments.</value>
        </member>
        <member name="T:Radzen.ContextMenuItem">
            <summary>
            Class ContextMenuItem.
            </summary>
        </member>
        <member name="P:Radzen.ContextMenuItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.ContextMenuItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.ContextMenuItem.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.ContextMenuItem.IconColor">
            <summary>
            Gets or sets the icon color.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.ContextMenuItem.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Radzen.ContextMenuItem.ImageStyle">
            <summary>
            Gets or sets the image style.
            </summary>
            <value>The image style.</value>
        </member>
        <member name="P:Radzen.ContextMenuItem.Disabled">
            <summary>
            Gets a value indicating whether this instance is disabled.
            </summary>
            <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Radzen.CookieSameSiteMode">
            <summary>
            Specifies the SameSite attribute for the cookie.
            </summary>
        </member>
        <member name="F:Radzen.CookieSameSiteMode.None">
            <summary>
            No SameSite attribute.
            </summary>
        </member>
        <member name="F:Radzen.CookieSameSiteMode.Lax">
            <summary>
            Lax SameSite attribute.
            </summary>
        </member>
        <member name="F:Radzen.CookieSameSiteMode.Strict">
            <summary>
            Strict SameSite attribute.
            </summary>
        </member>
        <member name="T:Radzen.CookieThemeServiceOptions">
            <summary>
            Options for the <see cref="T:Radzen.CookieThemeService" />.
            </summary>
        </member>
        <member name="P:Radzen.CookieThemeServiceOptions.Name">
            <summary>
            Gets or sets the cookie name.
            </summary>
        </member>
        <member name="P:Radzen.CookieThemeServiceOptions.Duration">
            <summary>
            Gets or sets the cookie duration.
            </summary>
        </member>
        <member name="P:Radzen.CookieThemeServiceOptions.IsSecure">
            <summary>
            Gets or sets a value indicating whether to use secure cookies.
            </summary>
        </member>
        <member name="P:Radzen.CookieThemeServiceOptions.SameSite">
            <summary>
            Gets or sets the SameSite attribute for the cookie.
            </summary>
        </member>
        <member name="T:Radzen.CookieThemeService">
            <summary>
            Persist the current theme in a cookie. Requires <see cref="T:Radzen.ThemeService" /> to be registered in the DI container.
            </summary>
        </member>
        <member name="M:Radzen.CookieThemeService.#ctor(Microsoft.JSInterop.IJSRuntime,Radzen.ThemeService,Microsoft.Extensions.Options.IOptions{Radzen.CookieThemeServiceOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.CookieThemeService" /> class.
            </summary>
        </member>
        <member name="T:Radzen.CookieThemeServiceCollectionExtensions">
            <summary>
            Extension methods to register the <see cref="T:Radzen.CookieThemeService" />.
            </summary>
        </member>
        <member name="M:Radzen.CookieThemeServiceCollectionExtensions.AddRadzenCookieThemeService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Radzen.CookieThemeService" /> to the service collection.
            </summary>
        </member>
        <member name="M:Radzen.CookieThemeServiceCollectionExtensions.AddRadzenCookieThemeService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Radzen.CookieThemeServiceOptions})">
            <summary>
            Adds the <see cref="T:Radzen.CookieThemeService" /> to the service collection with the specified configuration.
            </summary>
        </member>
        <member name="T:Radzen.DataBoundFormComponent`1">
            <summary>
            Class DataBoundFormComponent.
            Implements the <see cref="T:Radzen.RadzenComponent" />
            Implements the <see cref="T:Radzen.IRadzenFormComponent" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Radzen.RadzenComponent" />
            <seealso cref="T:Radzen.IRadzenFormComponent" />
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.TabIndex">
            <summary>
            Gets or sets the index of the tab.
            </summary>
            <value>The index of the tab.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.FilterCaseSensitivity">
            <summary>
            Gets or sets the filter case sensitivity.
            </summary>
            <value>The filter case sensitivity.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.FilterOperator">
            <summary>
            Gets or sets the filter operator.
            </summary>
            <value>The filter operator.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Placeholder">
            <summary>
            Gets or sets the placeholder.
            </summary>
            <value>The placeholder.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.DataBoundFormComponent`1"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Change">
            <summary>
            Gets or sets the change.
            </summary>
            <value>The change.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.LoadData">
            <summary>
            Gets or sets the load data.
            </summary>
            <value>The load data.</value>
        </member>
        <member name="F:Radzen.DataBoundFormComponent`1._form">
            <summary>
            The form
            </summary>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Form">
            <summary>
            Gets or sets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="F:Radzen.DataBoundFormComponent`1._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.ValueChanged">
            <summary>
            Gets or sets the value changed.
            </summary>
            <value>The value changed.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.TextProperty">
            <summary>
            Gets or sets the text property.
            </summary>
            <value>The text property.</value>
        </member>
        <member name="F:Radzen.DataBoundFormComponent`1._data">
            <summary>
            The data
            </summary>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.OnDataChanged">
            <summary>
            Called when [data changed].
            </summary>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.Query">
            <summary>
            Gets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.SearchText">
            <summary>
            Gets or sets the search text
            </summary>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.SearchTextChanged">
            <summary>
            Gets or sets the search text changed.
            </summary>
            <value>The search text changed.</value>
        </member>
        <member name="F:Radzen.DataBoundFormComponent`1.searchText">
            <summary>
            The search text
            </summary>
        </member>
        <member name="F:Radzen.DataBoundFormComponent`1._view">
            <summary>
            The view
            </summary>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.EditContext">
            <summary>
            Gets or sets the edit context.
            </summary>
            <value>The edit context.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.FieldIdentifier">
            <summary>
            Gets the field identifier.
            </summary>
            <value>The field identifier.</value>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.ValueExpression">
            <summary>
            Gets or sets the value expression.
            </summary>
            <value>The value expression.</value>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.ValidationStateChanged(System.Object,Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs)">
            <summary>
            Validations the state changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.GetClassList(System.String)">
            <summary>
            Gets the class list.
            </summary>
            <param name="className">Name of the class.</param>
            <returns>ClassList.</returns>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.FocusAsync">
            <inheritdoc/>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.FormFieldContext">
            <summary> Provides support for RadzenFormField integration. </summary>
        </member>
        <member name="P:Radzen.DataBoundFormComponent`1.CurrentPlaceholder">
            <summary> Gets the current placeholder. Returns empty string if this component is inside a RadzenFormField.</summary>
        </member>
        <member name="M:Radzen.DataBoundFormComponent`1.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:ContextMenu" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Radzen.DialogService">
            <summary>
            Class DialogService. Contains various methods with options to open and close dialogs. 
            Should be added as scoped service in the application services and RadzenDialog should be added in application main layout.
            </summary>
            <example>
            <code>
            @inject DialogService DialogService
            &lt;RadzenButton Text="Show dialog with inline Blazor content" Click=@ShowInlineDialog /&gt;
            @code {
             async Task ShowInlineDialog()
             {
               var result = await DialogService.OpenAsync("Simple Dialog", ds =&gt;
                 @&lt;div&gt;
                     &lt;p Style="margin-bottom: 1rem"&gt;Confirm?&lt;/p&gt;
                     &lt;div class="row"&gt;
                         &lt;div class="col-md-12"&gt;
                             &lt;RadzenButton Text="Ok" Click="() =&gt; ds.Close(true)" Style="margin-bottom: 10px; width: 150px" /&gt;
                             &lt;RadzenButton Text="Cancel" Click="() =&gt; ds.Close(false)" ButtonStyle="ButtonStyle.Base"  Style="margin-bottom: 10px; width: 150px"/&gt;
                             &lt;RadzenButton Text="Refresh" Click="(() =&gt; { orderID = 10249; ds.Refresh(); })" ButtonStyle="ButtonStyle.Info"  Style="margin-bottom: 10px; width: 150px"/&gt;
                             Order ID: @orderID
                         &lt;/div&gt;
                     &lt;/div&gt;
                 &lt;/div&gt;);
               Console.WriteLine($"Dialog result: {result}");
             }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.DialogService.UriHelper">
            <summary>
            Gets or sets the URI helper.
            </summary>
            <value>The URI helper.</value>
        </member>
        <member name="M:Radzen.DialogService.#ctor(Microsoft.AspNetCore.Components.NavigationManager,Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.DialogService"/> class.
            </summary>
            <param name="uriHelper">The URI helper.</param>
            <param name="jsRuntime">IJSRuntime instance.</param>
        </member>
        <member name="E:Radzen.DialogService.OnClose">
            <summary>
            Raises the Close event.
            </summary>
        </member>
        <member name="E:Radzen.DialogService.OnRefresh">
            <summary>
            Occurs when [on refresh].
            </summary>
        </member>
        <member name="E:Radzen.DialogService.OnOpen">
            <summary>
            Occurs when a new dialog is open.
            </summary>
        </member>
        <member name="E:Radzen.DialogService.OnSideClose">
            <summary>
            Raises the Close event for the side dialog
            </summary>
        </member>
        <member name="E:Radzen.DialogService.OnSideOpen">
            <summary>
            Raises the Open event for the side dialog
            </summary>
        </member>
        <member name="M:Radzen.DialogService.Open``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.DialogOptions)">
            <summary>
            Opens a dialog with the specified arguments.
            </summary>
            <typeparam name="T">The type of the Blazor component which will be displayed in a dialog.</typeparam>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="parameters">The dialog parameters.</param>
            <param name="options">The dialog options.</param>
        </member>
        <member name="M:Radzen.DialogService.Open(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.DialogOptions)">
            <summary>
            Opens a dialog with the specified arguments.
            </summary>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="componentType">The type of the component to be displayed in the dialog. Must inherit from <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.</param>
            <param name="parameters">The dialog parameters.</param>
            <param name="options">The dialog options.</param>
        </member>
        <member name="M:Radzen.DialogService.Refresh">
            <summary>
            Invokes <see cref="E:Radzen.DialogService.OnRefresh" />.
            </summary>
        </member>
        <member name="F:Radzen.DialogService.tasks">
            <summary>
            The tasks
            </summary>
        </member>
        <member name="M:Radzen.DialogService.OpenAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.DialogOptions)">
            <summary>
            Opens a dialog with the specified arguments.
            </summary>
            <typeparam name="T">The type of the Blazor component which will be displayed in a dialog.</typeparam>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="parameters">The dialog parameters. Passed as property values of <typeparamref name="T" />.</param>
            <param name="options">The dialog options.</param>
            <returns>The value passed as argument to <see cref="M:Radzen.DialogService.Close(System.Object)" />.</returns>
        </member>
        <member name="M:Radzen.DialogService.OpenAsync(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.DialogOptions)">
            <summary>
            Opens a dialog with the specified arguments dynamically.
            </summary>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="componentType">The type of the Blazor component to be displayed in a dialog. Must inherit from <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.</param>
            <param name="parameters">The dialog parameters, passed as property values of the specified component.</param>
            <param name="options">The dialog options.</param>
            <returns>A task that represents the result passed as an argument to <see cref="M:Radzen.DialogService.Close(System.Object)"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="componentType"/> does not inherit from <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.</exception>
        </member>
        <member name="M:Radzen.DialogService.OpenSideAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.SideDialogOptions)">
            <summary>
            Opens a side dialog with the specified arguments
            </summary>
            <typeparam name="T">The type of Blazor component which will be displayed in the side dialog.</typeparam>
            <param name="title">The text displayed in the title bar of the side dialog.</param>
            <param name="parameters">The dialog parameters. Passed as property values of <typeparamref name="T"/></param>
            <param name="options">The side dialog options.</param>
            <returns>A task that completes when the dialog is closed or a new one opened</returns>
        </member>
        <member name="M:Radzen.DialogService.OpenSideAsync(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.SideDialogOptions)">
            <summary>
            Opens a side dialog with the specified arguments dynamically.
            </summary>
            <param name="title">The text displayed in the title bar of the side dialog.</param>
            <param name="componentType">The type of the Blazor component to be displayed in the side dialog. Must inherit from <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.</param>
            <param name="parameters">The dialog parameters, passed as property values of the specified component.</param>
            <param name="options">The side dialog options.</param>
            <returns>A task that represents the result passed as an argument to <see cref="M:Radzen.DialogService.CloseSide(System.Object)"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="componentType"/> does not inherit from <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.</exception>
        </member>
        <member name="M:Radzen.DialogService.OpenSide``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.SideDialogOptions)">
            <summary>
            Opens a side dialog with the specified arguments
            </summary>
            <typeparam name="T">The type of Blazor component which will be displayed in the side dialog.</typeparam>
            <param name="title">The text displayed in the title bar of the side dialog.</param>
            <param name="parameters">The dialog parameters. Passed as property values of <typeparamref name="T"/></param>
            <param name="options">The side dialog options.</param>
        </member>
        <member name="M:Radzen.DialogService.OpenSide(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Radzen.SideDialogOptions)">
            <summary>
            Opens a side dialog with the specified arguments dynamically.
            </summary>
            <param name="title">The text displayed in the title bar of the side dialog.</param>
            <param name="componentType">The type of the Blazor component to be displayed in the side dialog. Must inherit from <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.</param>
            <param name="parameters">The dialog parameters, passed as property values of the specified component.</param>
            <param name="options">The side dialog options.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="componentType"/> does not inherit from <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.</exception>
        </member>
        <member name="M:Radzen.DialogService.CloseSide(System.Object)">
            <summary>
            Closes the side dialog
            </summary>
            <param name="result">The result of the Dialog</param>
        </member>
        <member name="M:Radzen.DialogService.CloseSideAsync(System.Object)">
            <summary>
            Closes the side dialog and waits for the closing animation to finish.
            </summary>
            <param name="result">The result of the Dialog</param>
        </member>
        <member name="M:Radzen.DialogService.OpenAsync(System.String,Microsoft.AspNetCore.Components.RenderFragment{Radzen.DialogService},Radzen.DialogOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a dialog with the specified content.
            </summary>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="childContent">The content displayed in the dialog.</param>
            <param name="options">The dialog options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The value passed as argument to <see cref="M:Radzen.DialogService.Close(System.Object)" />.</returns>
        </member>
        <member name="M:Radzen.DialogService.OpenAsync(Microsoft.AspNetCore.Components.RenderFragment{Radzen.DialogService},Microsoft.AspNetCore.Components.RenderFragment{Radzen.DialogService},Radzen.DialogOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Opens a dialog with the specified content.
            </summary>
            <param name="titleContent">The content displayed in the title bar of the dialog.</param>
            <param name="childContent">The content displayed in the dialog.</param>
            <param name="options">The dialog options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The value passed as argument to <see cref="M:Radzen.DialogService.Close(System.Object)" />.</returns>
        </member>
        <member name="M:Radzen.DialogService.Open(System.String,Microsoft.AspNetCore.Components.RenderFragment{Radzen.DialogService},Radzen.DialogOptions)">
            <summary>
            Opens a dialog with the specified content.
            </summary>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="childContent">The content displayed in the dialog.</param>
            <param name="options">The dialog options.</param>
        </member>
        <member name="F:Radzen.DialogService.dialogs">
            <summary>
            The dialogs
            </summary>
        </member>
        <member name="M:Radzen.DialogService.Close(System.Object)">
            <summary>
            Closes the last opened dialog with optional result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Radzen.DialogService.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Radzen.DialogService.Confirm(System.String,System.String,Radzen.ConfirmOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Displays a confirmation dialog.
            </summary>
            <param name="message">The message displayed to the user.</param>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><c>true</c> if the user clicked the OK button, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Radzen.DialogService.Confirm(Microsoft.AspNetCore.Components.RenderFragment,System.String,Radzen.ConfirmOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Displays a confirmation dialog.
            </summary>
            <param name="message">The message displayed to the user.</param>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><c>true</c> if the user clicked the OK button, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Radzen.DialogService.Alert(System.String,System.String,Radzen.AlertOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Displays a alert dialog.
            </summary>
            <param name="message">The message displayed to the user.</param>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><c>true</c> if the user clicked the OK button, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Radzen.DialogService.Alert(Microsoft.AspNetCore.Components.RenderFragment,System.String,Radzen.AlertOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Displays a alert dialog.
            </summary>
            <param name="message">The message displayed to the user.</param>
            <param name="title">The text displayed in the title bar of the dialog.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><c>true</c> if the user clicked the OK button, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Radzen.DialogOptionsBase">
            <summary>
            Base Class for dialog options
            </summary>
        </member>
        <member name="E:Radzen.DialogOptionsBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Radzen.DialogOptionsBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Radzen.DialogOptionsBase.PropertyChanged" /> event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="P:Radzen.DialogOptionsBase.ShowTitle">
            <summary>
            Gets or sets a value indicating whether to show the title bar. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if title bar is shown; otherwise, <c>false</c>. Default is <c>true</c>.</value>
        </member>
        <member name="P:Radzen.DialogOptionsBase.ShowClose">
            <summary>
            Gets or sets a value indicating whether to show the close button. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if the close button is shown; otherwise, <c>false</c>. Default is <c>true</c>.</value>
        </member>
        <member name="P:Radzen.DialogOptionsBase.Width">
            <summary>
            Gets or sets the width of the dialog.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Radzen.DialogOptionsBase.Height">
            <summary>
            Gets or sets the height of the dialog.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Radzen.DialogOptionsBase.Style">
            <summary>
            Gets or sets the CSS style of the dialog
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Radzen.DialogOptionsBase.CloseDialogOnOverlayClick">
            <summary>
            Gets or sets a value indicating whether the dialog should be closed by clicking the overlay.
            </summary>
            <value><c>true</c> if closeable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DialogOptionsBase.CssClass">
            <summary>
            Gets or sets dialog box custom class
            </summary>
        </member>
        <member name="P:Radzen.DialogOptionsBase.WrapperCssClass">
            <summary>
            Gets or sets the CSS classes added to the dialog's wrapper element.
            </summary>
        </member>
        <member name="P:Radzen.DialogOptionsBase.ContentCssClass">
            <summary>
            Gets or sets the CSS classes added to the dialog's content element.
            </summary>
        </member>
        <member name="P:Radzen.DialogOptionsBase.CloseTabIndex">
            <summary>
            Gets or sets a value the dialog escape tabindex. Set to <c>0</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.SideDialogOptions">
            <summary>
            Class SideDialogOptions
            </summary>
        </member>
        <member name="P:Radzen.SideDialogOptions.Title">
            <summary>
            The title displayed on the dialog.
            </summary>
        </member>
        <member name="P:Radzen.SideDialogOptions.Position">
            <summary>
            The Position on which the dialog will be positioned
            </summary>
        </member>
        <member name="P:Radzen.SideDialogOptions.ShowMask">
            <summary>
            Whether to show a mask on the background or not. Set to <c>true</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.SideDialogOptions.AutoFocusFirstElement">
            <summary>
            Gets or sets a value indicating whether to focus the first focusable HTML element. Set to <c>true</c> by default.
            </summary>
        </member>
        <member name="T:Radzen.DialogPosition">
            <summary>
            DialogPosition enum
            </summary>
        </member>
        <member name="F:Radzen.DialogPosition.Right">
            <summary>
            Dialog will be positioned on the right side
            </summary>
        </member>
        <member name="F:Radzen.DialogPosition.Left">
            <summary>
            Dialog will be positioned on the left side
            </summary>
        </member>
        <member name="F:Radzen.DialogPosition.Top">
            <summary>
            Dialog will be positioned on the top of the page
            </summary>
        </member>
        <member name="F:Radzen.DialogPosition.Bottom">
            <summary>
            Dialog will be positioned at the bottom of the page
            </summary>
        </member>
        <member name="T:Radzen.DialogOptions">
            <summary>
            Class DialogOptions.
            </summary>
        </member>
        <member name="P:Radzen.DialogOptions.Icon">
            <summary>
            Gets or sets the icon in Title.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Radzen.DialogOptions.IconColor">
            <summary>
            Gets or sets the icon color in Title.
            </summary>
            <value>The icon color.</value>
        </member>
        <member name="P:Radzen.DialogOptions.IconStyle">
            <summary>
            Gets or sets the CSS style of the Icon in Title.
            </summary>
        </member>
        <member name="P:Radzen.DialogOptions.Resizable">
            <summary>
            Gets or sets a value indicating whether the dialog is resizable. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DialogOptions.Resize">
            <summary>
            Gets or sets the change.
            </summary>
            <value>The change.</value>
        </member>
        <member name="P:Radzen.DialogOptions.Draggable">
            <summary>
            Gets or sets a value indicating whether the dialog is draggable. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if draggable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DialogOptions.Drag">
            <summary>
            Gets or sets the change.
            </summary>
            <value>The change.</value>
        </member>
        <member name="P:Radzen.DialogOptions.Left">
            <summary>
            Gets or sets the X coordinate of the dialog. Maps to the <c>left</c> CSS attribute.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Radzen.DialogOptions.Top">
            <summary>
            Gets or sets the Y coordinate of the dialog. Maps to the <c>top</c> CSS attribute.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Radzen.DialogOptions.Bottom">
            <summary>
            Specifies the <c>bottom</c> CSS attribute.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Radzen.DialogOptions.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="P:Radzen.DialogOptions.TitleContent">
            <summary>
            Gets or sets the title content.
            </summary>
            <value>The title content.</value>
        </member>
        <member name="P:Radzen.DialogOptions.AutoFocusFirstElement">
            <summary>
            Gets or sets a value indicating whether to focus the first focusable HTML element. 
            </summary>
            <value><c>true</c> if the first focusable element is focused; otherwise, <c>false</c>. Default is <c>true</c>.</value>
        </member>
        <member name="P:Radzen.DialogOptions.CloseDialogOnEsc">
            <summary>
            Gets or sets a value indicating whether the dialog should be closed on ESC key press.
            </summary>
            <value><c>true</c> if closeable; otherwise, <c>false</c>. Default is <c>true</c>.</value>
        </member>
        <member name="T:Radzen.AlertOptions">
            <summary>
            Class ConfirmOptions.
            </summary>
        </member>
        <member name="P:Radzen.AlertOptions.OkButtonText">
            <summary>
            Gets or sets the text of the OK button.
            </summary>
        </member>
        <member name="T:Radzen.ConfirmOptions">
            <summary>
            Class ConfirmOptions.
            </summary>
        </member>
        <member name="P:Radzen.ConfirmOptions.CancelButtonText">
            <summary>
            Gets or sets the text of the Cancel button.
            </summary>
        </member>
        <member name="T:Radzen.Dialog">
            <summary>
            Class Dialog.
            </summary>
        </member>
        <member name="P:Radzen.Dialog.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Radzen.Dialog.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Radzen.Dialog.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Radzen.Dialog.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="E:Radzen.Dialog.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Radzen.Dialog.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Radzen.Dialog.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="T:Radzen.DropDownBase`1">
            <summary>
            Base class of components that display a list of items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.DropDownBase`1.VirtualizationOverscanCount">
            <summary>
            Gets or sets a value that determines how many additional items will be rendered before and after the visible region. This help to reduce the frequency of rendering during scrolling. However, higher values mean that more elements will be present in the page.
            </summary>
        </member>
        <member name="P:Radzen.DropDownBase`1.Virtualize">
            <summary>
            The Virtualize instance.
            </summary>
        </member>
        <member name="P:Radzen.DropDownBase`1.Count">
            <summary>
            Specifies the total number of items in the data source.
            </summary>
        </member>
        <member name="P:Radzen.DropDownBase`1.AllowVirtualization">
            <summary>
            Specifies wether virtualization is enabled. Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Radzen.DropDownBase`1.PageSize">
            <summary>
            Specifies the default page size. Set to <c>5</c> by default.
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.IsVirtualizationAllowed">
            <summary>
            Determines whether virtualization is allowed.
            </summary>
            <returns><c>true</c> if virtualization is allowed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.DropDownBase`1.RenderItems">
            <summary>
            Renders the items.
            </summary>
            <returns>RenderFragment.</returns>
        </member>
        <member name="P:Radzen.DropDownBase`1.HasValue">
            <inheritdoc />
        </member>
        <member name="M:Radzen.DropDownBase`1.RenderItem(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,System.Object)">
            <summary>
            Renders the item.
            </summary>
            <param name="builder">The builder.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Radzen.DropDownBase`1.HeaderTemplate">
            <summary>
            Gets or sets the header template.
            </summary>
            <value>The header template.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether filtering is allowed. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if filtering is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.FilterAsYouType">
            <summary>
            Gets or sets a value indicating whether filtering is allowed as you type. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if filtering is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.AllowClear">
            <summary>
            Gets or sets a value indicating whether the user can clear the value. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if clearing is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.Multiple">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.DropDownBase`1"/> is multiple.
            </summary>
            <value><c>true</c> if multiple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.ResetSelectedIndexOnFilter">
            <summary>
            Gets or sets a value indicating the selected index should reset to the top item when filtering, resulting in a down arrow action will start moving from the top.
            </summary>
            <value><c>true</c> to reset selected index to -1 when filtering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.AllowSelectAll">
            <summary>
            Gets or sets a value indicating whether the user can select all values in multiple selection. Set to <c>true</c> by default.
            </summary>
            <value><c>true</c> if select all values is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.ValueProperty">
            <summary>
            Gets or sets the value property.
            </summary>
            <value>The value property.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.DisabledProperty">
            <summary>
            Gets or sets the disabled property.
            </summary>
            <value>The disabled property.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.RemoveChipTitle">
            <summary>
            Gets or sets the remove chip button title.
            </summary>
            <value>The remove chip button title.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.SearchAriaLabel">
            <summary>
            Gets or sets the search aria label text.
            </summary>
            <value>The search aria label text.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.EmptyAriaLabel">
            <summary>
            Gets or sets the empty value aria label text.
            </summary>
            <value>The empty value aria label text.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.SelectedItemChanged">
            <summary>
            Gets or sets the selected item changed.
            </summary>
            <value>The selected item changed.</value>
        </member>
        <member name="F:Radzen.DropDownBase`1.selectedItems">
            <summary>
            The selected items
            </summary>
        </member>
        <member name="F:Radzen.DropDownBase`1.selectedItem">
            <summary>
            The selected item
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.SelectAll">
            <summary>
            Selects all.
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.ClearAll">
            <summary>
            Clears all.
            </summary>
        </member>
        <member name="F:Radzen.DropDownBase`1._data">
            <summary>
            The data
            </summary>
        </member>
        <member name="P:Radzen.DropDownBase`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnParametersSet">
            <inheritdoc/>
        </member>
        <member name="M:Radzen.DropDownBase`1.GetItemOrValueFromProperty(System.Object,System.String)">
            <summary>
            Gets the item or value from property.
            </summary>
            <param name="item">The item.</param>
            <param name="property">The property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnDataChanged">
            <inheritdoc/>
        </member>
        <member name="P:Radzen.DropDownBase`1.PopupID">
            <summary>
            Gets the popup identifier.
            </summary>
            <value>The popup identifier.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.SearchID">
            <summary>
            Gets the search identifier.
            </summary>
            <value>The search identifier.</value>
        </member>
        <member name="M:Radzen.DropDownBase`1.OpenPopupScript">
            <summary>
            Opens the popup script.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.DropDownBase`1.OpenPopupScriptFromParent">
            <summary>
            Opens the popup script from parent.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Radzen.DropDownBase`1.FilterDelay">
            <summary>
            Gets or sets the filter delay.
            </summary>
            <value>The filter delay.</value>
        </member>
        <member name="F:Radzen.DropDownBase`1.search">
            <summary>
            The search
            </summary>
        </member>
        <member name="F:Radzen.DropDownBase`1.list">
            <summary>
            The list
            </summary>
        </member>
        <member name="F:Radzen.DropDownBase`1.selectedIndex">
            <summary>
            The selected index
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.OpenPopup(System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens the popup.
            </summary>
            <param name="key">The key.</param>
            <param name="isFilter">if set to <c>true</c> [is filter].</param>
            <param name="isFromClick">if set to <c>true</c> [is from click].</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.HandleKeyPress(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Handles the key press.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> instance containing the event data.</param>
            <param name="isFilter">if set to <c>true</c> [is filter].</param>
            <param name="shouldSelectOnChange">Should select item on item change with keyboard.</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnFilterKeyPress(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Handles the <see cref="E:FilterKeyPress" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.DebounceFilter">
            <summary>
            Debounces the filter.
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnKeyPress(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Nullable{System.Boolean})">
            <summary>
            Handles the <see cref="E:KeyPress" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> instance containing the event data.</param>
            <param name="shouldSelectOnChange">Should select item on item change with keyboard.</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnSelectItem(System.Object,System.Boolean)">
            <summary>
            Called when [select item].
            </summary>
            <param name="item">The item.</param>
            <param name="isFromKey">if set to <c>true</c> [is from key].</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnFilter(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Filter" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.GetLoadDataArgs">
            <summary>
            Gets the load data arguments.
            </summary>
            <returns>LoadDataArgs.</returns>
        </member>
        <member name="F:Radzen.DropDownBase`1.firstRender">
            <summary>
            The first render
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Called when [after render asynchronous].
            </summary>
            <param name="firstRender">if set to <c>true</c> [first render].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:Radzen.DropDownBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnParametersSetAsync">
            <summary>
            Called when [parameters set asynchronous].
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.DropDownBase`1.OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Handles the <see cref="E:Change" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.ChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.IsSelected(System.Object)">
            <summary>
            Determines whether the specified item is selected.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the specified item is selected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Radzen.DropDownBase`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.Separator">
            <summary>
            Gets or sets the item separator for Multiple dropdown.
            </summary>
            <value>Item separator</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Radzen.DropDownBase`1.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="M:Radzen.DropDownBase`1.SetSelectedIndexFromSelectedItem">
            <summary>
            Sets the selected index from selected item.
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.SelectItemInternal(System.Object,System.Boolean)">
            <summary>
            Selects the item internal.
            </summary>
            <param name="item">The item.</param>
            <param name="raiseChange">if set to <c>true</c> [raise change].</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.SelectItem(System.Object,System.Boolean)">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
            <param name="raiseChange">if set to <c>true</c> [raise change].</param>
        </member>
        <member name="M:Radzen.DropDownBase`1.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Radzen.DropDownBase`1.SelectItemFromValue(System.Object)">
            <summary>
            Selects the item from value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Radzen.DropDownBase`1.ItemComparer">
            <summary>
            For lists of objects, an IEqualityComparer to control how selected items are determined
            </summary>
        </member>
        <member name="M:Radzen.DropDownBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.ExpressionParser">
            <summary>
            Parse lambda expressions from strings.
            </summary>
        </member>
        <member name="M:Radzen.ExpressionParser.ParsePredicate``1(System.String,System.Func{System.String,System.Type})">
            <summary>
            Parses a lambda expression that returns a boolean value.
            </summary>
        </member>
        <member name="M:Radzen.ExpressionParser.ParseLambda``2(System.String,System.Func{System.String,System.Type})">
            <summary>
            Parses a lambda expression that returns a typed result.
            </summary>
        </member>
        <member name="M:Radzen.ExpressionParser.ParseLambda``1(System.String,System.Func{System.String,System.Type})">
            <summary>
            Parses a lambda expression that returns untyped result.
            </summary>
        </member>
        <member name="M:Radzen.ExpressionParser.ParseLambda(System.String,System.Type,System.Func{System.String,System.Type})">
            <summary>
            Parses a lambda expression that returns untyped result.
            </summary>
        </member>
        <member name="T:Radzen.FormComponentWithAutoComplete`1">
            <summary>
            Class FormComponentWithAutoComplete.
            </summary>
        </member>
        <member name="P:Radzen.FormComponentWithAutoComplete`1.AutoCompleteType">
            <summary>
            Gets or sets a value indicating the type of built-in autocomplete
            the browser should use.
            <see cref="T:Radzen.Blazor.AutoCompleteType" />
            </summary>
            <value>
            The type of built-in autocomplete.
            </value>
        </member>
        <member name="P:Radzen.FormComponentWithAutoComplete`1.AutoCompleteAttribute">
            <summary>
            Gets the autocomplete attribute's string value.
            </summary>
            <value>
            <c>off</c> if the AutoComplete parameter is false or the
            AutoCompleteType parameter is "off". When the AutoComplete
            parameter is true, the value is <c>on</c> or, if set, the value of
            AutoCompleteType.</value>
        </member>
        <member name="P:Radzen.FormComponentWithAutoComplete`1.DefaultAutoCompleteAttribute">
            <summary>
            Gets or sets the default autocomplete attribute's string value.
            </summary>
        </member>
        <member name="M:Radzen.FormComponentWithAutoComplete`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="P:Radzen.FormComponentWithAutoComplete`1.DefaultAriaAutoCompleteAttribute">
            <summary>
            Gets or sets the default aria-autocomplete attribute's string value.
            </summary>
        </member>
        <member name="P:Radzen.FormComponentWithAutoComplete`1.AriaAutoCompleteAttribute">
            <summary>
            Gets the aria-autocomplete attribute's string value.
            </summary>
        </member>
        <member name="T:Radzen.FormComponent`1">
            <summary>
            Class FormComponent.
            Implements the <see cref="T:Radzen.RadzenComponent" />
            Implements the <see cref="T:Radzen.IRadzenFormComponent" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Radzen.RadzenComponent" />
            <seealso cref="T:Radzen.IRadzenFormComponent" />
        </member>
        <member name="P:Radzen.FormComponent`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.TabIndex">
            <summary>
            Gets or sets the index of the tab.
            </summary>
            <value>The index of the tab.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.Placeholder">
            <summary>
            Gets or sets the placeholder.
            </summary>
            <value>The placeholder.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.FormComponent`1"/> is disabled.
            </summary>
            <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Radzen.FormComponent`1._form">
            <summary>
            The form
            </summary>
        </member>
        <member name="P:Radzen.FormComponent`1.EditContext">
            <summary>
            Gets or sets the edit context.
            </summary>
            <value>The edit context.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.Form">
            <summary>
            Gets or sets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.ValueChanged">
            <summary>
            Gets or sets the value changed.
            </summary>
            <value>The value changed.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Radzen.FormComponent`1._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Radzen.FormComponent`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.Change">
            <summary>
            Gets or sets the change.
            </summary>
            <value>The change.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.FieldIdentifier">
            <summary>
            Gets the field identifier.
            </summary>
            <value>The field identifier.</value>
        </member>
        <member name="P:Radzen.FormComponent`1.ValueExpression">
            <summary>
            Gets or sets the value expression.
            </summary>
            <value>The value expression.</value>
        </member>
        <member name="M:Radzen.FormComponent`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Sets the parameters asynchronous.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.FormComponent`1.ValidationStateChanged(System.Object,Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs)">
            <summary>
            Validations the state changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.FormComponent`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Radzen.FormComponent`1.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Radzen.FormComponent`1.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:ContextMenu" /> event.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Radzen.FormComponent`1.GetClassList(System.String)">
            <summary>
            Gets the class list.
            </summary>
            <param name="className">Name of the class.</param>
            <returns>ClassList.</returns>
        </member>
        <member name="P:Radzen.FormComponent`1.FormFieldContext">
            <summary> Provides support for RadzenFormField integration. </summary>
        </member>
        <member name="P:Radzen.FormComponent`1.CurrentPlaceholder">
            <summary> Gets the current placeholder. Returns empty string if this component is inside a RadzenFormField.</summary>
        </member>
        <member name="M:Radzen.FormComponent`1.FocusAsync">
            <inheritdoc/>
        </member>
        <member name="T:Radzen.HttpResponseMessageExtensions">
            <summary>
            Class HttpResponseMessageExtensions.
            </summary>
        </member>
        <member name="M:Radzen.HttpResponseMessageExtensions.ReadAsync``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Read as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response">The response.</param>
            <returns>A Task&lt;T&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.Exception">Unable to parse the response.</exception>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.Exception">Unable to parse the response.</exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Radzen.NotificationService">
            <summary>
            Class NotificationService. Contains various methods with options to open notifications.
            Should be added as scoped service in the application services and RadzenNotification should be added in application main layout.
            </summary>
            <example>
            <code>
            @inject NotificationService NotificationService
            &lt;RadzenButton Text="Show info notification" Click=@(args => NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Info Summary", Detail = "Info Detail", Duration = 4000 })) / &gt;
            </code>
            </example>
        </member>
        <member name="P:Radzen.NotificationService.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="M:Radzen.NotificationService.Notify(Radzen.NotificationMessage)">
            <summary>
            Notifies the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Radzen.NotificationService.Notify(Radzen.NotificationSeverity,System.String,System.String,System.TimeSpan,System.Action{Radzen.NotificationMessage})">
            <summary>
            Notifies the specified severity.
            </summary>
            <param name="severity">The severity.</param>
            <param name="summary">The summary.</param>
            <param name="detail">The detail.</param>
            <param name="duration">The duration.</param>
            <param name="click">The click event.</param>
        </member>
        <member name="M:Radzen.NotificationService.Notify(Radzen.NotificationSeverity,System.String,System.String,System.Double,System.Action{Radzen.NotificationMessage},System.Boolean,System.Object,System.Action{Radzen.NotificationMessage})">
            <summary>
            Notifies the specified severity.
            </summary>
            <param name="severity">The severity.</param>
            <param name="summary">The summary.</param>
            <param name="detail">The detail.</param>
            <param name="duration">The duration, default of 3 seconds.</param>
            <param name="click">The click event.</param>
            <param name="closeOnClick">If true, then the notification will be closed when clicked on.</param>
            <param name="payload">Used to store a custom payload that can be retreived later in the click event handler.</param>
            <param name="close">Action to be executed on close.</param>
        </member>
        <member name="T:Radzen.NotificationMessage">
            <summary>
            Class NotificationMessage.
            </summary>
        </member>
        <member name="P:Radzen.NotificationMessage.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.Severity">
            <summary>
            Gets or sets the severity.
            </summary>
            <value>The severity.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>The summary.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.Detail">
            <summary>
            Gets or sets the detail.
            </summary>
            <value>The detail.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.Click">
            <summary>
            Gets or sets the click event.
            </summary>
            <value>This event handler is called when the notification is clicked on.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.Close">
            <summary>
            Get or set the event for when the notification is closed
            </summary>
        </member>
        <member name="P:Radzen.NotificationMessage.CloseOnClick">
            <summary>
            Gets or sets click on close action.
            </summary>
            <value>If true, then the notification will be closed when clicked on.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.Payload">
            <summary>
            Gets or sets notification payload.
            </summary>
            <value>Used to store a custom payload that can be retreived later in the click event handler.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.ShowProgress">
            <summary>
            Gets or sets if progress should be shown during duration.
            </summary>
            <value>If true, then the progress will be shown during duration.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.DetailContent">
            <summary>
            Gets or sets the detail content.
            </summary>
            <value>The detail content.</value>
        </member>
        <member name="P:Radzen.NotificationMessage.SummaryContent">
            <summary>
            Gets or sets the summary content.
            </summary>
            <value>The summary content.</value>
        </member>
        <member name="M:Radzen.NotificationMessage.Equals(Radzen.NotificationMessage)">
            <summary>
            Check if NotificationMessage instance is equal to current instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Radzen.NotificationMessage.Equals(System.Object)">
            <summary>
            Check if object instance is equal to current instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Radzen.NotificationMessage.GetHashCode">
            <summary>
             Return a hash code for the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radzen.NotificationMessage.op_Equality(Radzen.NotificationMessage,Radzen.NotificationMessage)">
            <summary>
            Overloading == operator for NotificationMessage.
            </summary>
            <param name="message"></param>
            <param name="otherMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Radzen.NotificationMessage.op_Inequality(Radzen.NotificationMessage,Radzen.NotificationMessage)">
            <summary>
            Overloading != operator for NotificationMessage.
            </summary>
            <param name="message"></param>
            <param name="otherMessage"></param>
            <returns></returns>
        </member>
        <member name="T:Radzen.ODataEnumerable`1">
            <summary>
            Class ODataEnumerable.
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="F:Radzen.ODataEnumerable`1.source">
            <summary>
            The source
            </summary>
        </member>
        <member name="M:Radzen.ODataEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.ODataEnumerable`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Radzen.ODataEnumerable`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator&lt;T&gt;.</returns>
        </member>
        <member name="M:Radzen.ODataEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:Radzen.ODataServiceResult`1">
            <summary>
            Class ODataServiceResult.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Radzen.ODataServiceResult`1.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Radzen.ODataServiceResult`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Radzen.ODataJsonSerializer">
            <summary>
            Class ODataJsonSerializer.
            </summary>
        </member>
        <member name="M:Radzen.ODataJsonSerializer.IsComplex(System.Type)">
            <summary>
            Determines whether the specified type is complex.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is complex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.ODataJsonSerializer.IsEnumerable(System.Type)">
            <summary>
            Determines whether the specified type is enumerable.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radzen.ODataJsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Radzen.ComplexPropertiesConverter`1">
            <summary>
            Class ComplexPropertiesConverter.
            Implements the <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Text.Json.Serialization.JsonConverter`1" />
        </member>
        <member name="F:Radzen.ComplexPropertiesConverter`1.complexProperties">
            <summary>
            The complex properties
            </summary>
        </member>
        <member name="M:Radzen.ComplexPropertiesConverter`1.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.ComplexPropertiesConverter`1"/> class.
            </summary>
            <param name="complexProperties">The complex properties.</param>
        </member>
        <member name="M:Radzen.ComplexPropertiesConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The options.</param>
            <returns>T.</returns>
        </member>
        <member name="M:Radzen.ComplexPropertiesConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="T:Radzen.DateTimeConverterUsingDateTimeParse">
            <summary>
            Class DateTimeConverterUsingDateTimeParse.
            Implements the <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />
            </summary>
            <seealso cref="T:System.Text.Json.Serialization.JsonConverter`1" />
        </member>
        <member name="M:Radzen.DateTimeConverterUsingDateTimeParse.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The options.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Radzen.DateTimeConverterUsingDateTimeParse.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="T:Radzen.ODataExtensions">
            <summary>
            Class ODataExtensions.
            </summary>
        </member>
        <member name="M:Radzen.ODataExtensions.GetODataUri(System.Uri,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets the o data URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="filter">The filter.</param>
            <param name="top">The top.</param>
            <param name="skip">The skip.</param>
            <param name="orderby">The orderby.</param>
            <param name="expand">The expand.</param>
            <param name="select">The select.</param>
            <param name="apply">The apply.</param>
            <param name="count">if set to <c>true</c> [count].</param>
            <returns>Uri.</returns>
        </member>
        <member name="T:Radzen.PagedDataBoundComponent`1">
            <summary>
            Base classes of components that support paging.
            </summary>
            <typeparam name="T">The type of the data item</typeparam>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PagerPosition">
            <summary>
            Gets or sets the pager position. Set to <c>PagerPosition.Bottom</c> by default.
            </summary>
            <value>The pager position.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PagerAlwaysVisible">
            <summary>
            Gets or sets a value indicating whether pager is visible even when not enough data for paging.
            </summary>
            <value><c>true</c> if pager is visible even when not enough data for paging otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PagerHorizontalAlign">
            <summary>
            Gets or sets the horizontal align.
            </summary>
            <value>The horizontal align.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.Density">
            <summary>
            Gets or sets a value indicating pager density.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.AllowPaging">
            <summary>
            Gets or sets a value indicating whether paging is allowed. Set to <c>false</c> by default.
            </summary>
            <value><c>true</c> if paging is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PageNumbersCount">
            <summary>
            Gets or sets the page numbers count.
            </summary>
            <value>The page numbers count.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
            <value>The current page.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.LoadingTemplate">
            <summary>
            Gets or sets the loading template.
            </summary>
            <value>The loading template.</value>
        </member>
        <member name="F:Radzen.PagedDataBoundComponent`1._data">
            <summary>
            The data
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when INotifyCollectionChanged CollectionChanged is raised.
            </summary>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PageSizeOptions">
            <summary>
            Gets or sets the page size options.
            </summary>
            <value>The page size options.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PageSizeText">
            <summary>
            Gets or sets the page size description text.
            </summary>
            <value>The page size description text.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.ShowPagingSummary">
            <summary>
            Gets or sets the pager summary visibility.
            </summary>
            <value>The pager summary visibility.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PagingSummaryFormat">
            <summary>
            Gets or sets the pager summary format.
            </summary>
            <value>The pager summary format.</value>
            <remarks>
            <see cref="P:Radzen.PagedDataBoundComponent`1.PagingSummaryTemplate" /> has preference
            </remarks>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PagingSummaryTemplate">
            <summary>
            Gets or sets the pager summary template.
            </summary>
            <remarks>Has preference over <see cref="P:Radzen.PagedDataBoundComponent`1.PagingSummaryFormat" /></remarks>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.FirstPageTitle">
            <summary>
            Gets or sets the pager's first page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.FirstPageAriaLabel">
            <summary>
            Gets or sets the pager's first page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PrevPageLabel">
            <summary>
            Gets or sets the pager's optional previous page button's label text.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PrevPageTitle">
            <summary>
            Gets or sets the pager's previous page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PrevPageAriaLabel">
            <summary>
            Gets or sets the pager's previous page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.LastPageTitle">
            <summary>
            Gets or sets the pager's last page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.LastPageAriaLabel">
            <summary>
            Gets or sets the pager's last page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.NextPageLabel">
            <summary>
            Gets or sets the pager's optional next page button's label text.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.NextPageTitle">
            <summary>
            Gets or sets the pager's next page button's title attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.NextPageAriaLabel">
            <summary>
            Gets or sets the pager's next page button's aria-label attribute.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PageTitleFormat">
            <summary>
            Gets or sets the pager's numeric page number buttons' title attributes.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PageAriaLabelFormat">
            <summary>
            Gets or sets the pager's numeric page number buttons' aria-label attributes.
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.PagedView">
            <summary>
            Gets the paged view.
            </summary>
            <value>The paged view.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.LoadData">
            <summary>
            Gets or sets the load data.
            </summary>
            <value>The load data.</value>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.OnDataChanged">
            <summary>
            Called when [data changed].
            </summary>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Set parameters as an asynchronous operation.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.OnParametersSetAsync">
            <summary>
            Called when [parameters set asynchronous].
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="F:Radzen.PagedDataBoundComponent`1.firstRender">
            <summary>
            The first render
            </summary>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Called when [after render asynchronous].
            </summary>
            <param name="firstRender">if set to <c>true</c> [first render].</param>
            <returns>Task.</returns>
        </member>
        <member name="F:Radzen.PagedDataBoundComponent`1.skip">
            <summary>
            The skip
            </summary>
        </member>
        <member name="F:Radzen.PagedDataBoundComponent`1.topPager">
            <summary>
            The top pager
            </summary>
        </member>
        <member name="F:Radzen.PagedDataBoundComponent`1.bottomPager">
            <summary>
            The bottom pager
            </summary>
        </member>
        <member name="P:Radzen.PagedDataBoundComponent`1.Page">
            <summary>
            Gets or sets the page callback.
            </summary>
            <value>The page callback.</value>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.OnPageChanged(Radzen.PagerEventArgs)">
            <summary>
            Handles the <see cref="E:PageChanged" /> event.
            </summary>
            <param name="args">The <see cref="T:Radzen.PagerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.OnPageSizeChanged(System.Int32)">
            <summary>
            Called when [page size changed].
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.CalculatePager">
            <summary>
            Calculates the pager.
            </summary>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.GoToPage(System.Int32,System.Boolean)">
            <summary>
            Goes to page.
            </summary>
            <param name="page">The page.</param>
            <param name="forceReload">if set to <c>true</c> [force reload].</param>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.FirstPage(System.Boolean)">
            <summary>
            Firsts the page.
            </summary>
            <param name="forceReload">if set to <c>true</c> [force reload].</param>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.PrevPage">
            <summary>
            Previouses the page.
            </summary>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.NextPage">
            <summary>
            Nexts the page.
            </summary>
        </member>
        <member name="M:Radzen.PagedDataBoundComponent`1.LastPage">
            <summary>
            Lasts the page.
            </summary>
        </member>
        <member name="T:Radzen.QueryableExtension">
            <summary>
            Class QueryableExtension.
            </summary>
        </member>
        <member name="M:Radzen.QueryableExtension.Select(System.Linq.IQueryable,System.String)">
            <summary>
            Projects each element of a sequence into a collection of property values.
            </summary>
        </member>
        <member name="M:Radzen.QueryableExtension.SelectMany(System.Linq.IQueryable,System.String)">
            <summary>
            Projects each element of a sequence to an IEnumerable and flattens the resulting sequences into one sequence.
            </summary>
        </member>
        <member name="M:Radzen.QueryableExtension.GroupByMany``1(System.Linq.IQueryable{``0},System.String[])">
            <summary>
            Projects each element of a sequence to an IEnumerable and flattens the resulting sequences into one sequence.
            </summary>
        </member>
        <member name="M:Radzen.QueryableExtension.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <returns>A <see cref="T:System.Linq.IQueryable`1"/> whose elements are sorted according to the specified <paramref name="selector"/>.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.OrderBy(System.Linq.IQueryable,System.String)">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
            <returns>A <see cref="T:System.Linq.IQueryable"/> whose elements are sorted according to the specified <paramref name="selector"/>.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.FirstOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> to return the first element of.</param>
            <returns>default if source is empty; otherwise, the first element in source.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.Cast(System.Linq.IQueryable,System.Type)">
            <summary>
            Converts the elements of an <see cref="T:System.Linq.IQueryable"/> to the specified type.
            </summary>
            <param name="source">The <see cref="T:System.Linq.IQueryable"/> that contains the elements to be converted.</param>
            <param name="type">The type to convert the elements of source to.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains each element of the source sequence converted to the specified type.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.Distinct(System.Linq.IQueryable)">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.Where(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{Radzen.FilterDescriptor},Radzen.LogicalFilterOperator,Radzen.FilterCaseSensitivity)">
            <summary>
            Filters using the specified filter descriptors.
            </summary>
        </member>
        <member name="M:Radzen.QueryableExtension.Where``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Radzen.FilterDescriptor},Radzen.LogicalFilterOperator,Radzen.FilterCaseSensitivity)">
            <summary>
            Filters using the specified filter descriptors.
            </summary>
        </member>
        <member name="F:Radzen.QueryableExtension.LinqFilterOperators">
            <summary>
            The linq filter operators
            </summary>
        </member>
        <member name="F:Radzen.QueryableExtension.ODataFilterOperators">
            <summary>
            The o data filter operators
            </summary>
        </member>
        <member name="M:Radzen.QueryableExtension.ToList(System.Linq.IQueryable)">
            <summary>
            Converts to list.
            </summary>
            <param name="query">The query.</param>
            <returns>IList.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.ToFilterString``1(System.Collections.Generic.IEnumerable{Radzen.Blazor.RadzenDataGridColumn{``0}})">
            <summary>
            Converts to filterstring.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columns">The columns.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.ToFilterString``1(Radzen.Blazor.RadzenDataFilter{``0})">
            <summary>
            Converts a RadzenDataFilter to a Linq-compatibly filter string
            </summary>
            <typeparam name="T">The type that is being filtered</typeparam>
            <param name="dataFilter">The RadzenDataFilter component</param>
            <returns>A Linq-compatible filter string</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.ToFilterString``1(System.Collections.Generic.IEnumerable{Radzen.CompositeFilterDescriptor},Radzen.LogicalFilterOperator,Radzen.FilterCaseSensitivity)">
            <summary>
            Converts a enumerable of CompositeFilterDescriptor to a Linq-compatibly filter string
            </summary>
            <typeparam name="T">The type that is being filtered</typeparam>
            <param name="filters">The enumerable of CompositeFilterDescriptor </param>
            <param name="logicalFilterOperator">The LogicalFilterOperator</param>
            <param name="filterCaseSensitivity">The FilterCaseSensitivity</param>
            <returns>A Linq-compatible filter string</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.GetColumnODataFilter``1(Radzen.Blazor.RadzenDataGridColumn{``0},System.Object,Radzen.FilterOperator)">
            <summary>
            Gets the column o data filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column">The column.</param>
            <param name="filterValue">The specific value to filter by</param>
            <param name="columnFilterOperator">The operator used to compare to <paramref name="filterValue"/></param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.ToODataFilterString``1(System.Collections.Generic.IEnumerable{Radzen.Blazor.RadzenDataGridColumn{``0}})">
            <summary>
            Converts to odatafilterstring.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columns">The columns.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.IsEnumerable(System.Type)">
            <summary>
            Gets if type is IEnumerable.
            </summary>
        </member>
        <member name="M:Radzen.QueryableExtension.Where``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Radzen.Blazor.RadzenDataGridColumn{``0}})">
            <summary>
            Wheres the specified columns.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="columns">The columns.</param>
            <returns>IQueryable&lt;T&gt;.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.Where``1(System.Linq.IQueryable{``0},Radzen.Blazor.RadzenDataFilter{``0})">
            <summary>
            Wheres the specified filters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="dataFilter">The DataFilter.</param>
            <returns>IQueryable&lt;T&gt;.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.Where``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Radzen.CompositeFilterDescriptor},Radzen.LogicalFilterOperator,Radzen.FilterCaseSensitivity)">
            <summary>
            Wheres the specified filters.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>IQueryable&lt;T&gt;.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.Where(System.Linq.IQueryable,System.String,System.String,Radzen.StringFilterOperator,Radzen.FilterCaseSensitivity)">
            <summary>
            Wheres the specified filters.
            </summary>
            <param name="source">The source.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="op">The StringFilterOperator.</param>
            <param name="cs">The FilterCaseSensitivity.</param>
            <returns>IQueryable&lt;T&gt;.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.ToODataFilterString``1(Radzen.Blazor.RadzenDataFilter{``0})">
            <summary>
            Converts to OData filter expression.
            </summary>
            <param name="dataFilter">The DataFilter.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.ToODataFilterString``1(System.Collections.Generic.IEnumerable{Radzen.CompositeFilterDescriptor},Radzen.LogicalFilterOperator,Radzen.FilterCaseSensitivity)">
            <summary>
            Converts a enumerable of CompositeFilterDescriptor to a OData-compatibly filter string
            </summary>
            <param name="filters">The enumerable of CompositeFilterDescriptor </param>
            <param name="logicalFilterOperator">The LogicalFilterOperator</param>
            <param name="filterCaseSensitivity">The FilterCaseSensitivity</param>
            <returns>A OData-compatible filter string</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.AsODataEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ases the o data enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns>ODataEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:Radzen.QueryableExtension.SelectManyRecursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Selects the many recursive.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="T:Radzen.QueryStringThemeServiceOptions">
            <summary>
            Options for the <see cref="T:Radzen.QueryStringThemeService" />.
            </summary>
        </member>
        <member name="P:Radzen.QueryStringThemeServiceOptions.ThemeParameter">
            <summary>
            Gets or sets the query string parameter for the theme.
            </summary>
        </member>
        <member name="P:Radzen.QueryStringThemeServiceOptions.WcagParameter">
            <summary>
            Gets or sets the query string parameter for the wcag compatible color theme.
            </summary>
        </member>
        <member name="P:Radzen.QueryStringThemeServiceOptions.RightToLeftParameter">
            <summary>
            Gets or sets the query string parameter for the right to left theme.
            </summary>
        </member>
        <member name="T:Radzen.QueryStringThemeService">
            <summary>
            Persist the current theme in the query string. Requires <see cref="T:Radzen.ThemeService" /> to be registered in the DI container.
            </summary>
        </member>
        <member name="M:Radzen.QueryStringThemeService.#ctor(Microsoft.AspNetCore.Components.NavigationManager,Radzen.ThemeService,Microsoft.Extensions.Options.IOptions{Radzen.QueryStringThemeServiceOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.QueryStringThemeService" /> class.
            </summary>
        </member>
        <member name="M:Radzen.QueryStringThemeService.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Radzen.QueryStringThemeServiceCollectionExtensions">
            <summary>
            Extension methods to register the <see cref="T:Radzen.QueryStringThemeService" />.
            </summary>
        </member>
        <member name="M:Radzen.QueryStringThemeServiceCollectionExtensions.AddRadzenQueryStringThemeService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Radzen.QueryStringThemeService" /> to the service collection.
            </summary>
        </member>
        <member name="M:Radzen.QueryStringThemeServiceCollectionExtensions.AddRadzenQueryStringThemeService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Radzen.QueryStringThemeServiceOptions})">
            <summary>
            Adds the <see cref="T:Radzen.QueryStringThemeService" /> to the service collection with the specified condiguration.
            </summary>
        </member>
        <member name="T:Radzen.RadzenComponent">
            <summary>
              Base class of Radzen Blazor components.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponent.Attributes">
            <summary>
            Specifies additional custom attributes that will be rendered by the component.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Radzen.RadzenComponent.Element">
            <summary>
            Gets a reference to the HTML element rendered by the component.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponent.MouseEnter">
            <summary>
            A callback that will be invoked when the user hovers the component. Commonly used to display a tooltip via 
            <see cref="M:Radzen.TooltipService.Open(Microsoft.AspNetCore.Components.ElementReference,System.String,Radzen.TooltipOptions)" />.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponent.MouseLeave">
            <summary>
            A callback that will be invoked when the user moves the mouse out of the component. Commonly used to hide a tooltip via 
            <see cref="M:Radzen.TooltipService.Close" />.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponent.ContextMenu">
            <summary>
            A callback that will be invoked when the user right-clicks the component. Commonly used to display a context menu via 
            <see cref="M:Radzen.ContextMenuService.Open(Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Collections.Generic.IEnumerable{Radzen.ContextMenuItem},System.Action{Radzen.MenuItemEventArgs})" />.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponent.Culture">
            <summary>
            Gets or sets the culture used to display localizable data (numbers, dates). Set by default to <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponent.DefaultCulture">
            <summary>
            Gets or sets the culture set by a parent component.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.OnMouseEnter">
            <summary>
            Raises <see cref="P:Radzen.RadzenComponent.MouseEnter" />.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.OnMouseLeave">
            <summary>
            Raises <see cref="P:Radzen.RadzenComponent.MouseLeave" />.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Raises <see cref="P:Radzen.RadzenComponent.ContextMenu" />.
            </summary>
            <param name="args">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radzen.RadzenComponent.Style">
            <summary>
            Gets or sets the inline CSS style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Radzen.RadzenComponent.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radzen.RadzenComponent"/> is visible. Invisible components are not rendered.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Radzen.RadzenComponent.GetCssClass">
            <summary>
            Gets the final CSS class rendered by the component. Combines it with a <c>class</c> custom attribute.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.GetId">
            <summary>
            Gets the unique identifier. 
            </summary>
            <returns>Returns the <c>id</c> attribute (if specified) or generates a random one.</returns>
        </member>
        <member name="M:Radzen.RadzenComponent.GetComponentCssClass">
            <summary>
            Gets the component CSS class.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.Debounce(System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Debounces the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="P:Radzen.RadzenComponent.UniqueID">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Radzen.RadzenComponent.JSRuntime">
            <summary>
            Gets or sets the js runtime.
            </summary>
            <value>The js runtime.</value>
        </member>
        <member name="P:Radzen.RadzenComponent.IsJSRuntimeAvailable">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Radzen.RadzenComponent.JSRuntime" /> is available.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.OnInitialized">
            <summary>
            Called by the Blazor runtime.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
            Called by the Blazor runtime when parameters are set.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Radzen.RadzenComponent.Reference">
            <summary>
            Gets the reference for the current component.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="M:Radzen.RadzenComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Called by the Blazor runtime.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.RaiseContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Invoked via interop when the browser "oncontextmenu" event is raised for this component.
            </summary>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radzen.RadzenComponent.RaiseMouseEnter">
            <summary>
            Invoked via interop when the browser "onmouseenter" event is raised for this component.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.RaiseMouseLeave">
            <summary>
            Invoked via interop when the browser "onmouseleave" event is raised for this component.
            </summary>
        </member>
        <member name="M:Radzen.RadzenComponent.Dispose">
            <summary>
            Detaches event handlers and disposes <see cref="P:Radzen.RadzenComponent.Reference" />.
            </summary>
        </member>
        <member name="P:Radzen.RadzenComponent.CurrentStyle">
            <summary>
            Gets the current style as a dictionary.
            </summary>
            <value>The current style as a dictionary of keys and values.</value>
        </member>
        <member name="T:Radzen.RadzenComponentActivator">
            <summary>
             Allows the developer to replace a component with another. Useful to specify default values for component properties.
            </summary>
            <example>
            <code>
            var builder = WebApplication.CreateBuilder(args);
            var activator = new RadzenComponentActivator();
            // Replace RadzenButton with MyButton
            activator.Override&lt;RadzenButton, MyButton&gt;();
            // Replace RadzenDataGrid with MyDataGrid
            activator.Override(typeof(RadzenDataGrid&lt;&gt;), typeof(MyDataGrid&lt;&gt;));
            // Register the activator
            builder.Services.AddSingleton&lt;IComponentActivator&gt;(activator);
            </code>
            </example>
        </member>
        <member name="M:Radzen.RadzenComponentActivator.Override``2">
            <summary>
             Replaces the specified component type with another.
            </summary>
            <typeparam name="TOriginal"></typeparam>
            <typeparam name="TOverride"></typeparam>
        </member>
        <member name="M:Radzen.RadzenComponentActivator.Override(System.Type,System.Type)">
            <summary>
            Replaces the specified component type with another.
            </summary>
            <param name="original"></param>
            <param name="override"></param>
        </member>
        <member name="M:Radzen.RadzenComponentActivator.CreateInstance(System.Type)">
            <summary>
              Creates a component of the specified type.
            </summary>
            <param name="componentType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Radzen.SchedulerAppointmentRenderEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.AppointmentRender" /> event that is being raised.
            </summary>
            <typeparam name="TItem">The type of the data item.</typeparam>
        </member>
        <member name="P:Radzen.SchedulerAppointmentRenderEventArgs`1.Start">
            <summary>
            The start date of the appointment.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerAppointmentRenderEventArgs`1.End">
            <summary>
            The end date of the appointment.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerAppointmentRenderEventArgs`1.Data">
            <summary>
            The data item for which the appointment is created.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Radzen.SchedulerAppointmentRenderEventArgs`1.Attributes">
            <summary>
            HTML attributes to apply to the appointment element.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerAppointmentSelectEventArgs`1">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.AppointmentSelect" /> event that is being raised.
            </summary>
            <typeparam name="TItem">The type of the data item.</typeparam>
        </member>
        <member name="P:Radzen.SchedulerAppointmentSelectEventArgs`1.Start">
            <summary>
            The start date of the appointment.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerAppointmentSelectEventArgs`1.End">
            <summary>
            The end date of the appointment.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerAppointmentSelectEventArgs`1.Data">
            <summary>
            The data item for which the appointment is created.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Radzen.SchedulerDaySelectEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.DaySelect" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerDaySelectEventArgs.Day">
            <summary>
            Selected date.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerDaySelectEventArgs.Appointments">
            <summary>
            List of appointments.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerDaySelectEventArgs.View">
            <summary>
            Current View.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerLoadDataEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.LoadData" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerLoadDataEventArgs.Start">
            <summary>
            The start of the currently rendered period.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerLoadDataEventArgs.End">
            <summary>
            The start of the currently rendered period.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerLoadDataEventArgs.View">
            <summary>
            The selected view of the scheduler.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerMonthSelectEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.MonthSelect" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMonthSelectEventArgs.MonthStart">
            <summary>
            Month start date.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMonthSelectEventArgs.Appointments">
            <summary>
            List of appointments.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMonthSelectEventArgs.View">
            <summary>
            Current View.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerMoreSelectEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.MoreSelect" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMoreSelectEventArgs.Start">
            <summary>
            The start of the slot.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMoreSelectEventArgs.End">
            <summary>
            The end of the slot.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMoreSelectEventArgs.Appointments">
            <summary>
            List of appointments.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMoreSelectEventArgs.View">
            <summary>
            Current View.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerMoreSelectEventArgs.IsDefaultPrevented">
            <summary>
            Has default action been prevented from occuring.
            </summary>
        </member>
        <member name="M:Radzen.SchedulerMoreSelectEventArgs.PreventDefault">
            <summary>
            Prevent the default action from occuring.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerSlotRenderEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.SlotRender" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotRenderEventArgs.Start">
            <summary>
            The start of the slot.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotRenderEventArgs.End">
            <summary>
            The end of the slot.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotRenderEventArgs.Appointments">
            <summary>
            List of appointments.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotRenderEventArgs.Attributes">
            <summary>
            HTML attributes to apply to the slot element.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotRenderEventArgs.View">
            <summary>
            The current view.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerSlotSelectEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.SlotSelect" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotSelectEventArgs.Start">
            <summary>
            The start of the slot.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotSelectEventArgs.End">
            <summary>
            The end of the slot.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotSelectEventArgs.Appointments">
            <summary>
            List of appointments.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotSelectEventArgs.View">
            <summary>
            Current View.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerSlotSelectEventArgs.IsDefaultPrevented">
            <summary>
            Has default action been prevented from occuring?
            </summary>
        </member>
        <member name="M:Radzen.SchedulerSlotSelectEventArgs.PreventDefault">
            <summary>
            Prevent default action from occuring.
            </summary>
        </member>
        <member name="T:Radzen.SchedulerTodaySelectEventArgs">
            <summary>
            Supplies information about a <see cref="P:Radzen.Blazor.RadzenScheduler`1.TodaySelect" /> event that is being raised.
            </summary>
        </member>
        <member name="P:Radzen.SchedulerTodaySelectEventArgs.Today">
            <summary>
            Today's date. You can change this value to navigate to a different date.
            </summary>
        </member>
        <member name="T:Radzen.ThemeOptions">
            <summary>
            Options for changing the theme.
            </summary>
        </member>
        <member name="P:Radzen.ThemeOptions.Theme">
            <summary>
            Specifies the theme.
            </summary>
        </member>
        <member name="P:Radzen.ThemeOptions.Wcag">
            <summary>
            Specifies if the theme colors should meet WCAG contrast requirements.
            </summary>
        </member>
        <member name="P:Radzen.ThemeOptions.RightToLeft">
            <summary>
            Specifies if the theme should be right-to-left.
            </summary>
        </member>
        <member name="P:Radzen.ThemeOptions.TriggerChange">
            <summary>
            Specifies if the theme change should trigger the <see cref="E:Radzen.ThemeService.ThemeChanged" /> event.
            </summary>
        </member>
        <member name="T:Radzen.Theme">
            <summary>
            Theme definition.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Text">
            <summary>
            Specifies the user-friendly theme name e.g. Material3.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Value">
            <summary>
            Specifies the theme value e.g. material3.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Primary">
            <summary>
            Specifies the primary color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Secondary">
            <summary>
            Specifies the secondary color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Base">
            <summary>
            Specifies the base color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Content">
            <summary>
            Specifies the content color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.TitleText">
            <summary>
            Specifies the title text color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.ContentText">
            <summary>
            Specifies the content text color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Selection">
            <summary>
            Specifies the selection color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.SelectionText">
            <summary>
            Specifies the selection text color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.ButtonRadius">
            <summary>
            Specifies the button radius.
            </summary>
        </member>
        <member name="P:Radzen.Theme.CardRadius">
            <summary>
            Specifies the card radius.
            </summary>
        </member>
        <member name="P:Radzen.Theme.SeriesA">
            <summary>
            Specifies the series A color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.SeriesB">
            <summary>
            Specifies the series B color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.SeriesC">
            <summary>
            Specifies the series C color.
            </summary>
        </member>
        <member name="P:Radzen.Theme.Premium">
            <summary>
            Specifies if the theme is premium.
            </summary>
        </member>
        <member name="T:Radzen.Themes">
            <summary>
            Predefined themes.
            </summary>
        </member>
        <member name="F:Radzen.Themes.All">
            <summary>
            Predefined themes.
            </summary>
        </member>
        <member name="P:Radzen.Themes.Free">
            <summary>
            Free themes.
            </summary>
        </member>
        <member name="P:Radzen.Themes.Premium">
            <summary>
            Premium themes.
            </summary>
        </member>
        <member name="T:Radzen.ThemeService">
            <summary>
            Service for theme registration and management.
            </summary>
        </member>
        <member name="P:Radzen.ThemeService.Theme">
            <summary>
            Gets the current theme.
            </summary>
        </member>
        <member name="P:Radzen.ThemeService.Wcag">
            <summary>
            Specify if the theme colors should meet WCAG contrast requirements.
            </summary>
        </member>
        <member name="P:Radzen.ThemeService.RightToLeft">
            <summary>
            Specify if the theme should be right-to-left.
            </summary>
        </member>
        <member name="E:Radzen.ThemeService.ThemeChanged">
            <summary>
            Raised when the theme changes.
            </summary>
        </member>
        <member name="M:Radzen.ThemeService.SetTheme(System.String,System.Boolean)">
            <summary>
            Changes the current theme.
            </summary>
        </member>
        <member name="M:Radzen.ThemeService.SetTheme(Radzen.ThemeOptions)">
            <summary>
            Changes the current theme with additional options.
            </summary>
        </member>
        <member name="M:Radzen.ThemeService.SetWcag(System.Boolean)">
            <summary>
            Enables or disables WCAG contrast requirements.
            </summary>
        </member>
        <member name="M:Radzen.ThemeService.SetRightToLeft(System.Boolean)">
            <summary>
            Specifies if the theme should be right-to-left.
            </summary>
        </member>
        <member name="T:Radzen.TooltipService">
            <summary>
            Class TooltipService. Contains various methods with options to open and close tooltips.
            Should be added as scoped service in the application services and RadzenTooltip should be added in application main layout.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
            <example>
            <code>
            @inject TooltipService tooltipService
            &lt;RadzenButton Text="Show tooltip" MouseEnter="@(args =&gt; ShowTooltipWithHtml(args, new TooltipOptions(){ Style = "color:#000", Duration = null }))" /&gt;
            @code {
                void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null) =&gt; tooltipService.Open(elementReference, ds =&gt;
                    @&lt;div&gt;
                        Some&lt;b&gt;HTML&lt;/b&gt; content
                    &lt;/div&gt;, options);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Radzen.TooltipService.navigationManager">
            <summary>
            Gets or sets the navigation manager.
            </summary>
            <value>The navigation manager.</value>
        </member>
        <member name="M:Radzen.TooltipService.#ctor(Microsoft.AspNetCore.Components.NavigationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Radzen.TooltipService"/> class.
            </summary>
            <param name="uriHelper">The URI helper.</param>
        </member>
        <member name="M:Radzen.TooltipService.UriHelper_OnLocationChanged(System.Object,Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs)">
            <summary>
            Handles the OnLocationChanged event of the UriHelper control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Radzen.TooltipService.OnNavigate">
            <summary>
            Occurs when [on navigate].
            </summary>
        </member>
        <member name="E:Radzen.TooltipService.OnClose">
            <summary>
            Raises the Close event.
            </summary>
        </member>
        <member name="E:Radzen.TooltipService.OnOpen">
            <summary>
            Occurs when [on open].
            </summary>
        </member>
        <member name="E:Radzen.TooltipService.OnOpenChartTooltip">
            <summary>
            Occurs when [on open chart tooltip].
            </summary>
        </member>
        <member name="M:Radzen.TooltipService.Open(Microsoft.AspNetCore.Components.ElementReference,Microsoft.AspNetCore.Components.RenderFragment{Radzen.TooltipService},Radzen.TooltipOptions)">
            <summary>
            Opens the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="childContent">Content of the child.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Radzen.TooltipService.Open(Microsoft.AspNetCore.Components.ElementReference,System.String,Radzen.TooltipOptions)">
            <summary>
            Opens the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="text">The text.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Radzen.TooltipService.OpenOnTheTop(Microsoft.AspNetCore.Components.ElementReference,System.String,Radzen.TooltipOptions)">
            <summary>
            Opens the specified element on the top position.
            </summary>
            <param name="element">The element.</param>
            <param name="text">The text.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Radzen.TooltipService.OpenOnTheBottom(Microsoft.AspNetCore.Components.ElementReference,System.String,Radzen.TooltipOptions)">
            <summary>
            Opens the specified element on the bottom position.
            </summary>
            <param name="element">The element.</param>
            <param name="text">The text.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Radzen.TooltipService.OpenOnTheLeft(Microsoft.AspNetCore.Components.ElementReference,System.String,Radzen.TooltipOptions)">
            <summary>
            Opens the specified element on the left position.
            </summary>
            <param name="element">The element.</param>
            <param name="text">The text.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Radzen.TooltipService.OpenOnTheRight(Microsoft.AspNetCore.Components.ElementReference,System.String,Radzen.TooltipOptions)">
            <summary>
            Opens the specified element on the right position.
            </summary>
            <param name="element">The element.</param>
            <param name="text">The text.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Radzen.TooltipService.OpenChartTooltip(Microsoft.AspNetCore.Components.ElementReference,System.Double,System.Double,Microsoft.AspNetCore.Components.RenderFragment{Radzen.TooltipService},Radzen.ChartTooltipOptions)">
            <summary>
            Opens the specified chart tooltip.
            </summary>
            <param name="element">The chart element.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="childContent">Content of the chart tooltip.</param>
            <param name="o">The options of the chart tooltip.</param>
        </member>
        <member name="M:Radzen.TooltipService.OpenTooltip``1(Microsoft.AspNetCore.Components.ElementReference,Radzen.TooltipOptions)">
            <summary>
            Opens the tooltip.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Radzen.TooltipService.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Radzen.TooltipService.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Radzen.TooltipPosition">
            <summary>
            Enum TooltipPosition
            </summary>
        </member>
        <member name="F:Radzen.TooltipPosition.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:Radzen.TooltipPosition.Top">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:Radzen.TooltipPosition.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:Radzen.TooltipPosition.Bottom">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="T:Radzen.TooltipOptions">
            <summary>
            Class TooltipOptions.
            </summary>
        </member>
        <member name="P:Radzen.TooltipOptions.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Radzen.TooltipOptions.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Radzen.TooltipOptions.Delay">
            <summary>
            Gets or sets the delay.
            </summary>
            <value>The delay.</value>
        </member>
        <member name="P:Radzen.TooltipOptions.CloseTooltipOnDocumentClick">
            <summary>
            Gets or sets a value indicating whether the tooltip should be closed by clicking the document.
            </summary>
            <value><c>true</c> if closeable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Radzen.TooltipOptions.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Radzen.TooltipOptions.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>The CSS class.</value>
        </member>
        <member name="P:Radzen.TooltipOptions.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radzen.TooltipOptions.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="T:Radzen.Tooltip">
            <summary>
            Class Tooltip.
            </summary>
        </member>
        <member name="P:Radzen.Tooltip.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Radzen.Tooltip.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:Radzen.Tooltip.Element">
            <summary>
            Gets or sets the element.
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:Radzen.ChartTooltipOptions.ColorScheme">
            <summary>
            Gets or sets the color scheme used to render the tooltip.
            </summary>
            <value>The color scheme.</value>
        </member>
        <member name="P:Radzen.ChartTooltipOptions.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
            <value>The child content.</value>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicExtensions">
            <summary>
            Class DynamicExtensions used to replace System.Linq.Dynamic.Core library.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExtensions.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[],System.Object[])">
            <summary>
            Filters using the specified filter descriptors.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending or descending order according to a key.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExtensions.Select``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a collection of property values.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExtensions.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a collection of property values.
            </summary>
        </member>
        <member name="T:System.Text.StringBuilderCache">
            <summary>Provide a cached reusable instance of stringbuilder per thread.</summary>
        </member>
        <member name="M:System.Text.StringBuilderCache.Acquire(System.Int32)">
            <summary>Get a StringBuilder for the specified capacity.</summary>
            <remarks>If a StringBuilder of an appropriate size is cached, it will be returned and the cache emptied.</remarks>
        </member>
        <member name="M:System.Text.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>Place the specified builder in the cache if it is not too big.</summary>
        </member>
        <member name="M:System.Text.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>ToString() the stringbuilder, Release it to the cache, and return the resulting string.</summary>
        </member>
        <member name="T:ExpressionSerializer">
            <summary>
            Serializes LINQ Expression Trees into C# string representations.
            </summary>
        </member>
        <member name="M:ExpressionSerializer.Serialize(System.Linq.Expressions.Expression)">
            <summary>
            Serializes a given LINQ Expression into a C# string.
            </summary>
            <param name="expression">The expression to serialize.</param>
            <returns>A string representation of the expression.</returns>
        </member>
        <member name="M:ExpressionSerializer.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ExpressionSerializer.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Maps an ExpressionType to its corresponding C# operator.
            </summary>
            <param name="type">The ExpressionType to map.</param>
            <returns>A string representation of the corresponding C# operator.</returns>
        </member>
        <member name="T:SharedTypeExtensions">
            <summary>
            Provides an extension method for displaying type names.
            </summary>
        </member>
        <member name="M:SharedTypeExtensions.UnwrapNullableType(System.Type)">
            <summary>
            Unwraps nullable type.
            </summary>
        </member>
        <member name="M:SharedTypeExtensions.DisplayName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Returns a display name for the given type.
            </summary>
            <param name="type">The type to display.</param>
            <param name="fullName">Indicates whether to use the full name.</param>
            <param name="compilable">Indicates whether to use a compilable format.</param>
            <returns>A string representing the type name.</returns>
        </member>
    </members>
</doc>
